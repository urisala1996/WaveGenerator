
CosmoCaixa_FrequencyGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007ba0  08007ba0  00017ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc0  08007dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dc8  08007dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  2000000c  08007ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08007ddc  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002906  00000000  00000000  000366e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00038ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bc8  00000000  00000000  0003b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015446  00000000  00000000  000652e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a552  00000000  00000000  0007a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a78  00000000  00000000  00184ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b84 	.word	0x08007b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007b84 	.word	0x08007b84

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <compute_sinewave>:
uint8_t steady_signal(uint32_t sample);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void compute_sinewave(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	for (int i=0; i<N_SAMPLES; i++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e03a      	b.n	8000e82 <compute_sinewave+0x82>
		sinewave[i] = ((sin(i*2*M_PI/N_SAMPLES) + 1)*(4000/2));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb2b 	bl	800046c <__aeabi_i2d>
 8000e16:	a324      	add	r3, pc, #144	; (adr r3, 8000ea8 <compute_sinewave+0xa8>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fb90 	bl	8000540 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <compute_sinewave+0x98>)
 8000e2e:	f7ff fcb1 	bl	8000794 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	ec43 2b17 	vmov	d7, r2, r3
 8000e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e3e:	eef0 0a67 	vmov.f32	s1, s15
 8000e42:	f005 fe69 	bl	8006b18 <sin>
 8000e46:	ec51 0b10 	vmov	r0, r1, d0
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <compute_sinewave+0x9c>)
 8000e50:	f7ff f9c0 	bl	80001d4 <__adddf3>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <compute_sinewave+0xa0>)
 8000e62:	f7ff fb6d 	bl	8000540 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe29 	bl	8000ac4 <__aeabi_d2uiz>
 8000e72:	4602      	mov	r2, r0
 8000e74:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <compute_sinewave+0xa4>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<N_SAMPLES; i++){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b7f      	cmp	r3, #127	; 0x7f
 8000e86:	ddc1      	ble.n	8000e0c <compute_sinewave+0xc>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	f3af 8000 	nop.w
 8000e98:	40600000 	.word	0x40600000
 8000e9c:	3ff00000 	.word	0x3ff00000
 8000ea0:	409f4000 	.word	0x409f4000
 8000ea4:	20000138 	.word	0x20000138
 8000ea8:	54442d18 	.word	0x54442d18
 8000eac:	400921fb 	.word	0x400921fb

08000eb0 <ADC_map>:

float ADC_map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
	float in_min_f = (float)in_min;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float in_max_f = (float)in_max;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed6:	edc7 7a08 	vstr	s15, [r7, #32]
	float out_min_f = (float)out_min;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	edc7 7a07 	vstr	s15, [r7, #28]
	float out_max_f = (float)out_max;
 8000ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	edc7 7a06 	vstr	s15, [r7, #24]
	float res = 0;
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

	res = (x-in_min_f)*(out_max_f-out_min_f)/(in_max_f-in_min_f) + out_min_f;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f36:	edc7 7a05 	vstr	s15, [r7, #20]

	return res;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	ee07 3a90 	vmov	s15, r3
  //return (uint32_t)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	372c      	adds	r7, #44	; 0x2c
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <compute_ADC_map>:

void compute_ADC_map(uint32_t *arr){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]

	float freq,tim_arr;

	for(int i=0; i < LOW_LEVEL; i++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e01f      	b.n	8000f9e <compute_ADC_map+0x4e>
		freq = MIN_FREQ;
 8000f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f62:	613b      	str	r3, [r7, #16]
		tim_arr = 8000000/(N_SAMPLES*freq);
 8000f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f68:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800105c <compute_ADC_map+0x10c>
 8000f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f70:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001060 <compute_ADC_map+0x110>
 8000f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f78:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000f82:	330f      	adds	r3, #15
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f92:	ee17 2a90 	vmov	r2, s15
 8000f96:	601a      	str	r2, [r3, #0]
	for(int i=0; i < LOW_LEVEL; i++){
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2bbf      	cmp	r3, #191	; 0xbf
 8000fa2:	dddc      	ble.n	8000f5e <compute_ADC_map+0xe>
	}

	for(int i=LOW_LEVEL; i < HIGH_LEVEL; i++){
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	e027      	b.n	8000ffa <compute_ADC_map+0xaa>
		freq = ADC_map(i, LOW_LEVEL, HIGH_LEVEL, MIN_FREQ, MAX_FREQ);
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	231e      	movs	r3, #30
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f640 4262 	movw	r2, #3170	; 0xc62
 8000fb6:	21c0      	movs	r1, #192	; 0xc0
 8000fb8:	f7ff ff7a 	bl	8000eb0 <ADC_map>
 8000fbc:	ed87 0a04 	vstr	s0, [r7, #16]
		tim_arr = 8000000/(N_SAMPLES*freq);
 8000fc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800105c <compute_ADC_map+0x10c>
 8000fc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fcc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001060 <compute_ADC_map+0x110>
 8000fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd4:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000fde:	330f      	adds	r3, #15
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	601a      	str	r2, [r3, #0]
	for(int i=LOW_LEVEL; i < HIGH_LEVEL; i++){
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	f640 4261 	movw	r2, #3169	; 0xc61
 8001000:	4293      	cmp	r3, r2
 8001002:	ddd2      	ble.n	8000faa <compute_ADC_map+0x5a>
	}

	for(int i=HIGH_LEVEL; i < ADC_RES; i++){
 8001004:	f640 4362 	movw	r3, #3170	; 0xc62
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e01e      	b.n	800104a <compute_ADC_map+0xfa>
		freq = MAX_FREQ;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <compute_ADC_map+0x114>)
 800100e:	613b      	str	r3, [r7, #16]
		tim_arr = 8000000/(N_SAMPLES*freq);
 8001010:	edd7 7a04 	vldr	s15, [r7, #16]
 8001014:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800105c <compute_ADC_map+0x10c>
 8001018:	ee27 7a87 	vmul.f32	s14, s15, s14
 800101c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001060 <compute_ADC_map+0x110>
 8001020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001024:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800102e:	330f      	adds	r3, #15
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	edd7 7a03 	vldr	s15, [r7, #12]
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 2a90 	vmov	r2, s15
 8001042:	601a      	str	r2, [r3, #0]
	for(int i=HIGH_LEVEL; i < ADC_RES; i++){
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001050:	dbdc      	blt.n	800100c <compute_ADC_map+0xbc>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	43000000 	.word	0x43000000
 8001060:	4af42400 	.word	0x4af42400
 8001064:	41f00000 	.word	0x41f00000

08001068 <average>:

uint32_t average(uint32_t *arr, uint32_t N){
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]

	int sum = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<N; i++){
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e00a      	b.n	8001092 <average+0x2a>
		sum = sum + arr[i];
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<N; i++){
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3301      	adds	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d8f0      	bhi.n	800107c <average+0x14>
	}

	return sum/N;
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <steady_signal>:

uint8_t steady_signal(uint32_t sample){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	static uint32_t last_sample = 0;

	if(sample <= last_sample + STEADY_OFFSET && sample >= last_sample - STEADY_OFFSET){
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <steady_signal+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3302      	adds	r3, #2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d80a      	bhi.n	80010da <steady_signal+0x2a>
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <steady_signal+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b02      	subs	r3, #2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d304      	bcc.n	80010da <steady_signal+0x2a>
		last_sample = sample;
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <steady_signal+0x40>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
		return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e003      	b.n	80010e2 <steady_signal+0x32>
	}else{
		last_sample = sample;
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <steady_signal+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
		return 0;
 80010e0:	2300      	movs	r3, #0
	}
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000002c 	.word	0x2000002c

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t ADC_meanSample 		= 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001104:	f102 021c 	add.w	r2, r2, #28
 8001108:	6013      	str	r3, [r2, #0]
  uint32_t ADC_rawSample		= 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001110:	f102 0210 	add.w	r2, r2, #16
 8001114:	6013      	str	r3, [r2, #0]
  uint32_t ADC_auxBuf[ADC_BUF_HALF_LEN];
  uint32_t wave_period 		= 0;
 8001116:	2300      	movs	r3, #0
 8001118:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800111c:	f102 020c 	add.w	r2, r2, #12
 8001120:	6013      	str	r3, [r2, #0]
  uint32_t last_wave_period = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001128:	f102 0208 	add.w	r2, r2, #8
 800112c:	6013      	str	r3, [r2, #0]

  uint32_t ADC_map[ADC_RES];

  uint32_t len = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001134:	f102 0204 	add.w	r2, r2, #4
 8001138:	6013      	str	r3, [r2, #0]

  int TIM_isStopped = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001140:	f102 0218 	add.w	r2, r2, #24
 8001144:	6013      	str	r3, [r2, #0]
  int TIM_onHighFreq = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800114c:	6013      	str	r3, [r2, #0]

  int i = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001154:	f102 0214 	add.w	r2, r2, #20
 8001158:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f000 fd60 	bl	8001c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f91d 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fab9 	bl	80016d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fa91 	bl	800168c <MX_DMA_Init>
  MX_DAC1_Init();
 800116a:	f000 f9df 	bl	800152c <MX_DAC1_Init>
  MX_TIM2_Init();
 800116e:	f000 fa0f 	bl	8001590 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001172:	f000 f965 	bl	8001440 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001176:	f000 fa59 	bl	800162c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800117a:	217f      	movs	r1, #127	; 0x7f
 800117c:	4880      	ldr	r0, [pc, #512]	; (8001380 <main+0x28c>)
 800117e:	f001 ff8f 	bl	80030a0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	497f      	ldr	r1, [pc, #508]	; (8001384 <main+0x290>)
 8001186:	487e      	ldr	r0, [pc, #504]	; (8001380 <main+0x28c>)
 8001188:	f001 f934 	bl	80023f4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 800118c:	487e      	ldr	r0, [pc, #504]	; (8001388 <main+0x294>)
 800118e:	f004 fbfb 	bl	8005988 <HAL_TIM_Base_Start>

  compute_sinewave();
 8001192:	f7ff fe35 	bl	8000e00 <compute_sinewave>
  compute_ADC_map(ADC_map);
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	3b20      	subs	r3, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fed7 	bl	8000f50 <compute_ADC_map>

  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sinewave, N_SAMPLES, DAC_ALIGN_12B_R);
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	4a78      	ldr	r2, [pc, #480]	; (800138c <main+0x298>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4878      	ldr	r0, [pc, #480]	; (8001390 <main+0x29c>)
 80011ae:	f002 f9bb 	bl	8003528 <HAL_DAC_Start_DMA>

  HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 fda8 	bl	8001d08 <HAL_Delay>

	  /*
	   * 	COMPUTE MEAN OF ADC SAMPLES
	   */

	  if(ADC_isHalfCplt){
 80011b8:	4b76      	ldr	r3, [pc, #472]	; (8001394 <main+0x2a0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d03b      	beq.n	800123a <main+0x146>

		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80011c8:	f102 0214 	add.w	r2, r2, #20
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01f      	b.n	8001210 <main+0x11c>
			  ADC_auxBuf[i] = adc_buf[i];
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <main+0x290>)
 80011d2:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011d6:	f103 0314 	add.w	r3, r3, #20
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011e4:	f103 0314 	add.w	r3, r3, #20
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 80011f0:	f101 0120 	add.w	r1, r1, #32
 80011f4:	440b      	add	r3, r1
 80011f6:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 80011fa:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011fe:	f103 0314 	add.w	r3, r3, #20
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800120a:	f102 0214 	add.w	r2, r2, #20
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001214:	f103 0314 	add.w	r3, r3, #20
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b1f      	cmp	r3, #31
 800121c:	ddd8      	ble.n	80011d0 <main+0xdc>
		  }
		  ADC_meanSample = average(ADC_auxBuf,ADC_BUF_HALF_LEN);
 800121e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001222:	2120      	movs	r1, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff1f 	bl	8001068 <average>
 800122a:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800122e:	f103 031c 	add.w	r3, r3, #28
 8001232:	6018      	str	r0, [r3, #0]
		  ADC_isHalfCplt = 0;
 8001234:	4b57      	ldr	r3, [pc, #348]	; (8001394 <main+0x2a0>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	  }

	  if(ADC_isCplt){
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <main+0x2a4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03c      	beq.n	80012be <main+0x1ca>

		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800124a:	f102 0214 	add.w	r2, r2, #20
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e020      	b.n	8001294 <main+0x1a0>
			  ADC_auxBuf[i] = adc_buf[ADC_BUF_HALF_LEN + i];
 8001252:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001256:	f103 0314 	add.w	r3, r3, #20
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3320      	adds	r3, #32
 800125e:	4a49      	ldr	r2, [pc, #292]	; (8001384 <main+0x290>)
 8001260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001264:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001268:	f103 0314 	add.w	r3, r3, #20
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001274:	f101 0120 	add.w	r1, r1, #32
 8001278:	440b      	add	r3, r1
 800127a:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 800127e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001282:	f103 0314 	add.w	r3, r3, #20
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800128e:	f102 0214 	add.w	r2, r2, #20
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001298:	f103 0314 	add.w	r3, r3, #20
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b1f      	cmp	r3, #31
 80012a0:	ddd7      	ble.n	8001252 <main+0x15e>
		  }
		  ADC_meanSample = average(ADC_auxBuf,ADC_BUF_HALF_LEN);
 80012a2:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80012a6:	2120      	movs	r1, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fedd 	bl	8001068 <average>
 80012ae:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80012b2:	f103 031c 	add.w	r3, r3, #28
 80012b6:	6018      	str	r0, [r3, #0]
		  ADC_isCplt = 0;
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <main+0x2a4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	  /*
	   * 	CONVERT SAMPLE TO PERIOD
	   */

	  if(ADC_meanSample > LOW_LEVEL){
 80012be:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80012c2:	f103 031c 	add.w	r3, r3, #28
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2bc0      	cmp	r3, #192	; 0xc0
 80012ca:	d93d      	bls.n	8001348 <main+0x254>

		  //Check if we come from a '0 Hz state'
		  if(TIM_isStopped){
 80012cc:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80012d0:	f103 0318 	add.w	r3, r3, #24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00d      	beq.n	80012f6 <main+0x202>
			  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sinewave, N_SAMPLES, DAC_ALIGN_12B_R);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <main+0x298>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <main+0x29c>)
 80012e6:	f002 f91f 	bl	8003528 <HAL_DAC_Start_DMA>
			  TIM_isStopped = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80012f0:	f102 0218 	add.w	r2, r2, #24
 80012f4:	6013      	str	r3, [r2, #0]
		  }

		  //Convert Sample to Period Value
		  wave_period = ADC_map[ADC_RES-ADC_meanSample];
 80012f6:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80012fa:	f103 031c 	add.w	r3, r3, #28
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	3b20      	subs	r3, #32
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001312:	f102 020c 	add.w	r2, r2, #12
 8001316:	6013      	str	r3, [r2, #0]
#ifdef PRINT_DEBUG
		  printf("ADC: %ld\tPERIOD: %ld\r\n",ADC_meanSample,wave_period);
#endif
		  //Change Timer Period
		  if(!steady_signal(ADC_meanSample)){
 8001318:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800131c:	f103 031c 	add.w	r3, r3, #28
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f7ff fec5 	bl	80010b0 <steady_signal>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d125      	bne.n	8001378 <main+0x284>
			  htim2.Instance->ARR = (uint32_t)(wave_period - 1);
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <main+0x294>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001334:	f102 020c 	add.w	r2, r2, #12
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	3a01      	subs	r2, #1
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
			  htim2.Instance->EGR = TIM_EGR_UG;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <main+0x294>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	e017      	b.n	8001378 <main+0x284>
		  }

	  }else if(ADC_meanSample <= LOW_LEVEL && TIM_isStopped == 0){
 8001348:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800134c:	f103 031c 	add.w	r3, r3, #28
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2bc0      	cmp	r3, #192	; 0xc0
 8001354:	d810      	bhi.n	8001378 <main+0x284>
 8001356:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800135a:	f103 0318 	add.w	r3, r3, #24
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <main+0x284>

		  //Disable Timer (0Hz)
		  HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <main+0x29c>)
 8001368:	f002 f9aa 	bl	80036c0 <HAL_DAC_Stop_DMA>
		  TIM_isStopped = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001372:	f102 0218 	add.w	r2, r2, #24
 8001376:	6013      	str	r3, [r2, #0]
	  }

	HAL_Delay(5);
 8001378:	2005      	movs	r0, #5
 800137a:	f000 fcc5 	bl	8001d08 <HAL_Delay>
	  if(ADC_isHalfCplt){
 800137e:	e71b      	b.n	80011b8 <main+0xc4>
 8001380:	2000008c 	.word	0x2000008c
 8001384:	20000338 	.word	0x20000338
 8001388:	20000438 	.word	0x20000438
 800138c:	20000138 	.word	0x20000138
 8001390:	20000030 	.word	0x20000030
 8001394:	20000028 	.word	0x20000028
 8001398:	20000029 	.word	0x20000029

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2244      	movs	r2, #68	; 0x44
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fbaa 	bl	8006b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c2:	f002 ff8b 	bl	80042dc <HAL_PWREx_ControlVoltageScaling>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013cc:	f000 f9d4 	bl	8001778 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013d0:	2310      	movs	r3, #16
 80013d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013ec:	2328      	movs	r3, #40	; 0x28
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f0:	2307      	movs	r3, #7
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4618      	mov	r0, r3
 8001402:	f002 ffc1 	bl	8004388 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800140c:	f000 f9b4 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2303      	movs	r3, #3
 8001416:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	2104      	movs	r1, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fb93 	bl	8004b54 <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001434:	f000 f9a0 	bl	8001778 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3758      	adds	r7, #88	; 0x58
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <MX_ADC1_Init+0xe4>)
 8001466:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <MX_ADC1_Init+0xe0>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MX_ADC1_Init+0xe0>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001482:	2204      	movs	r2, #4
 8001484:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001488:	2200      	movs	r2, #0
 800148a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_ADC1_Init+0xe0>)
 800148e:	2201      	movs	r2, #1
 8001490:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_ADC1_Init+0xe0>)
 8001494:	2201      	movs	r2, #1
 8001496:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_ADC1_Init+0xe0>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014c4:	f000 fe40 	bl	8002148 <HAL_ADC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014ce:	f000 f953 	bl	8001778 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MX_ADC1_Init+0xe0>)
 80014de:	f001 fe3f 	bl	8003160 <HAL_ADCEx_MultiModeConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014e8:	f000 f946 	bl	8001778 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_ADC1_Init+0xe8>)
 80014ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f0:	2306      	movs	r3, #6
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014f8:	237f      	movs	r3, #127	; 0x7f
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014fc:	2304      	movs	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_ADC1_Init+0xe0>)
 800150a:	f001 f831 	bl	8002570 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001514:	f000 f930 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000008c 	.word	0x2000008c
 8001524:	50040000 	.word	0x50040000
 8001528:	14f00020 	.word	0x14f00020

0800152c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2224      	movs	r2, #36	; 0x24
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fae3 	bl	8006b04 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_DAC1_Init+0x5c>)
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_DAC1_Init+0x60>)
 8001542:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001544:	4810      	ldr	r0, [pc, #64]	; (8001588 <MX_DAC1_Init+0x5c>)
 8001546:	f001 ffcc 	bl	80034e2 <HAL_DAC_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001550:	f000 f912 	bl	8001778 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001558:	2324      	movs	r3, #36	; 0x24
 800155a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_DAC1_Init+0x5c>)
 8001570:	f002 f909 	bl	8003786 <HAL_DAC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800157a:	f000 f8fd 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000030 	.word	0x20000030
 800158c:	40007400 	.word	0x40007400

08001590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_TIM2_Init+0x98>)
 80015b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <MX_TIM2_Init+0x98>)
 80015b8:	2209      	movs	r2, #9
 80015ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_TIM2_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_TIM2_Init+0x98>)
 80015c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_TIM2_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_TIM2_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d6:	4814      	ldr	r0, [pc, #80]	; (8001628 <MX_TIM2_Init+0x98>)
 80015d8:	f004 f97e 	bl	80058d8 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015e2:	f000 f8c9 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_TIM2_Init+0x98>)
 80015f4:	f004 fb4f 	bl	8005c96 <HAL_TIM_ConfigClockSource>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015fe:	f000 f8bb 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001602:	2320      	movs	r3, #32
 8001604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_TIM2_Init+0x98>)
 8001610:	f004 fd6e 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800161a:	f000 f8ad 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000438 	.word	0x20000438

0800162c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_USART2_UART_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x58>)
 8001670:	f004 fde4 	bl	800623c <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 f87d 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000484 	.word	0x20000484
 8001688:	40004400 	.word	0x40004400

0800168c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_DMA_Init+0x48>)
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <MX_DMA_Init+0x48>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6493      	str	r3, [r2, #72]	; 0x48
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_DMA_Init+0x48>)
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	200b      	movs	r0, #11
 80016b0:	f001 fee1 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b4:	200b      	movs	r0, #11
 80016b6:	f001 fefa 	bl	80034ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	200d      	movs	r0, #13
 80016c0:	f001 fed9 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016c4:	200d      	movs	r0, #13
 80016c6:	f001 fef2 	bl	80034ae <HAL_NVIC_EnableIRQ>

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_GPIO_Init+0x5c>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <MX_GPIO_Init+0x5c>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_GPIO_Init+0x5c>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 fdc0 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001710:	2320      	movs	r3, #32
 8001712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f002 fc08 	bl	8003f3c <HAL_GPIO_Init>

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

	ADC_isHalfCplt = 1;
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000028 	.word	0x20000028

08001758 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

	ADC_isCplt = 1;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000029 	.word	0x20000029

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6613      	str	r3, [r2, #96]	; 0x60
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ac      	sub	sp, #176	; 0xb0
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2288      	movs	r2, #136	; 0x88
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f989 	bl	8006b04 <memset>
  if(hadc->Instance==ADC1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_ADC_MspInit+0x120>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d172      	bne.n	80018e2 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001800:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001812:	2310      	movs	r3, #16
 8001814:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001816:	2307      	movs	r3, #7
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fb97 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001838:	f7ff ff9e 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 8001842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_ADC_MspInit+0x124>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186c:	2301      	movs	r3, #1
 800186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001872:	230b      	movs	r3, #11
 8001874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f002 fb58 	bl	8003f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 800188e:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_ADC_MspInit+0x12c>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018bc:	2220      	movs	r2, #32
 80018be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018c8:	f002 f902 	bl	8003ad0 <HAL_DMA_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80018d2:	f7ff ff51 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_ADC_MspInit+0x128>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	37b0      	adds	r7, #176	; 0xb0
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	50040000 	.word	0x50040000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	200000f0 	.word	0x200000f0
 80018f8:	40020008 	.word	0x40020008

080018fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_DAC_MspInit+0xcc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d14f      	bne.n	80019be <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 8001924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_DAC_MspInit+0xd0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800194e:	2310      	movs	r3, #16
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f002 faea 	bl	8003f3c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_DAC_MspInit+0xd8>)
 800196c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001970:	2206      	movs	r2, #6
 8001972:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001976:	2210      	movs	r2, #16
 8001978:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001994:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 80019a4:	f002 f894 	bl	8003ad0 <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80019ae:	f7ff fee3 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_DAC_MspInit+0xd4>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40007400 	.word	0x40007400
 80019cc:	40021000 	.word	0x40021000
 80019d0:	20000044 	.word	0x20000044
 80019d4:	40020030 	.word	0x40020030

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201c      	movs	r0, #28
 8001a08:	f001 fd35 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f001 fd4e 	bl	80034ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ac      	sub	sp, #176	; 0xb0
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2288      	movs	r2, #136	; 0x88
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 f85f 	bl	8006b04 <memset>
  if(huart->Instance==USART2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_UART_MspInit+0xb0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d13b      	bne.n	8001ac8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a50:	2302      	movs	r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fa7f 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a68:	f7ff fe86 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a76:	6593      	str	r3, [r2, #88]	; 0x58
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac4:	f002 fa3a 	bl	8003f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	37b0      	adds	r7, #176	; 0xb0
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40004400 	.word	0x40004400
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f8d0 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <DMA1_Channel1_IRQHandler+0x10>)
 8001b32:	f002 f923 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000f0 	.word	0x200000f0

08001b40 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Channel3_IRQHandler+0x10>)
 8001b46:	f002 f919 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000044 	.word	0x20000044

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f003 ff7d 	bl	8005a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000438 	.word	0x20000438

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <SystemInit+0x5c>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <SystemInit+0x5c>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <SystemInit+0x60>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <SystemInit+0x60>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <SystemInit+0x60>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <SystemInit+0x60>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <SystemInit+0x60>)
 8001b94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <SystemInit+0x60>)
 8001ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <SystemInit+0x60>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <SystemInit+0x60>)
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SystemInit+0x60>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	40021000 	.word	0x40021000

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff ffca 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bd6:	e003      	b.n	8001be0 <LoopCopyDataInit>

08001bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bde:	3104      	adds	r1, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be8:	d3f6      	bcc.n	8001bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bec:	e002      	b.n	8001bf4 <LoopFillZerobss>

08001bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf0:	f842 3b04 	str.w	r3, [r2], #4

08001bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <LoopForever+0x16>)
	cmp	r2, r3
 8001bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf8:	d3f9      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f004 ff5f 	bl	8006abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfe:	f7ff fa79 	bl	80010f4 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c08:	08007dd0 	.word	0x08007dd0
	ldr	r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c10:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001c14:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001c18:	20000510 	.word	0x20000510

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>

08001c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f001 fc19 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f80e 	bl	8001c50 <HAL_InitTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	e001      	b.n	8001c44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c40:	f7ff fda0 	bl	8001784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_InitTick+0x70>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 fc25 	bl	80034ca <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d809      	bhi.n	8001ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f001 fbef 	bl	8003476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_InitTick+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e004      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e001      	b.n	8001cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	2000050c 	.word	0x2000050c

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000050c 	.word	0x2000050c

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3360      	adds	r3, #96	; 0x60
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <LL_ADC_SetOffset+0x44>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	03fff000 	.word	0x03fff000

08001e00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3360      	adds	r3, #96	; 0x60
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3330      	adds	r3, #48	; 0x30
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	211f      	movs	r1, #31
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 011f 	and.w	r1, r3, #31
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3314      	adds	r3, #20
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	0e5b      	lsrs	r3, r3, #25
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0d1b      	lsrs	r3, r3, #20
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2107      	movs	r1, #7
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	0d1b      	lsrs	r3, r3, #20
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	431a      	orrs	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0318 	and.w	r3, r3, #24
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f5c:	40d9      	lsrs	r1, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	400b      	ands	r3, r1
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	431a      	orrs	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	0007ffff 	.word	0x0007ffff

08001f80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6093      	str	r3, [r2, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ffc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002024:	d101      	bne.n	800202a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <LL_ADC_IsEnabled+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <LL_ADC_IsEnabled+0x1a>
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d101      	bne.n	80020c6 <LL_ADC_IsDisableOngoing+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_ADC_IsDisableOngoing+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d101      	bne.n	8002114 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b08      	cmp	r3, #8
 8002134:	d101      	bne.n	800213a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e136      	b.n	80023d0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fb2b 	bl	80017cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff19 	bl	8001fc0 <LL_ADC_IsDeepPowerDownEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff feff 	bl	8001f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff34 	bl	8002010 <LL_ADC_IsInternalRegulatorEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff18 	bl	8001fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b8:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <HAL_ADC_Init+0x290>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	4a87      	ldr	r2, [pc, #540]	; (80023dc <HAL_ADC_Init+0x294>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff16 	bl	8002010 <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff76 	bl	80020fc <LL_ADC_REG_IsConversionOngoing>
 8002210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 80cf 	bne.w	80023be <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80cb 	bne.w	80023be <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002230:	f043 0202 	orr.w	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff23 	bl	8002088 <LL_ADC_IsEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d115      	bne.n	8002274 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002248:	4865      	ldr	r0, [pc, #404]	; (80023e0 <HAL_ADC_Init+0x298>)
 800224a:	f7ff ff1d 	bl	8002088 <LL_ADC_IsEnabled>
 800224e:	4604      	mov	r4, r0
 8002250:	4864      	ldr	r0, [pc, #400]	; (80023e4 <HAL_ADC_Init+0x29c>)
 8002252:	f7ff ff19 	bl	8002088 <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	431c      	orrs	r4, r3
 800225a:	4863      	ldr	r0, [pc, #396]	; (80023e8 <HAL_ADC_Init+0x2a0>)
 800225c:	f7ff ff14 	bl	8002088 <LL_ADC_IsEnabled>
 8002260:	4603      	mov	r3, r0
 8002262:	4323      	orrs	r3, r4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4619      	mov	r1, r3
 800226e:	485f      	ldr	r0, [pc, #380]	; (80023ec <HAL_ADC_Init+0x2a4>)
 8002270:	f7ff fd6e 	bl	8001d50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e5b      	ldrb	r3, [r3, #25]
 8002278:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002284:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800228a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002292:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	3b01      	subs	r3, #1
 80022a8:	045b      	lsls	r3, r3, #17
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_ADC_Init+0x2a8>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	430b      	orrs	r3, r1
 80022de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff09 	bl	80020fc <LL_ADC_REG_IsConversionOngoing>
 80022ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff16 	bl	8002122 <LL_ADC_INJ_IsConversionOngoing>
 80022f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d13d      	bne.n	800237a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d13a      	bne.n	800237a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002308:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002310:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002334:	2b01      	cmp	r3, #1
 8002336:	d118      	bne.n	800236a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800235a:	430a      	orrs	r2, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	e007      	b.n	800237a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10c      	bne.n	800239c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f023 010f 	bic.w	r1, r3, #15
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	e007      	b.n	80023ac <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 020f 	bic.w	r2, r2, #15
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3724      	adds	r7, #36	; 0x24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	20000000 	.word	0x20000000
 80023dc:	053e2d63 	.word	0x053e2d63
 80023e0:	50040000 	.word	0x50040000
 80023e4:	50040100 	.word	0x50040100
 80023e8:	50040200 	.word	0x50040200
 80023ec:	50040300 	.word	0x50040300
 80023f0:	fff0c007 	.word	0xfff0c007

080023f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002400:	4850      	ldr	r0, [pc, #320]	; (8002544 <HAL_ADC_Start_DMA+0x150>)
 8002402:	f7ff fdbd 	bl	8001f80 <LL_ADC_GetMultimode>
 8002406:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fe75 	bl	80020fc <LL_ADC_REG_IsConversionOngoing>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 808e 	bne.w	8002536 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_Start_DMA+0x34>
 8002424:	2302      	movs	r3, #2
 8002426:	e089      	b.n	800253c <HAL_ADC_Start_DMA+0x148>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d002      	beq.n	8002442 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b09      	cmp	r3, #9
 8002440:	d172      	bne.n	8002528 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fc84 	bl	8002d50 <ADC_Enable>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d165      	bne.n	800251e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a37      	ldr	r2, [pc, #220]	; (8002548 <HAL_ADC_Start_DMA+0x154>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d002      	beq.n	8002476 <HAL_ADC_Start_DMA+0x82>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e000      	b.n	8002478 <HAL_ADC_Start_DMA+0x84>
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_ADC_Start_DMA+0x158>)
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	4293      	cmp	r3, r2
 800247e:	d002      	beq.n	8002486 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f023 0206 	bic.w	r2, r3, #6
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	659a      	str	r2, [r3, #88]	; 0x58
 80024aa:	e002      	b.n	80024b2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	4a26      	ldr	r2, [pc, #152]	; (8002550 <HAL_ADC_Start_DMA+0x15c>)
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_ADC_Start_DMA+0x160>)
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_ADC_Start_DMA+0x164>)
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	221c      	movs	r2, #28
 80024d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0210 	orr.w	r2, r2, #16
 80024e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3340      	adds	r3, #64	; 0x40
 8002504:	4619      	mov	r1, r3
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f001 fb99 	bl	8003c40 <HAL_DMA_Start_IT>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fddc 	bl	80020d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800251c:	e00d      	b.n	800253a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002526:	e008      	b.n	800253a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002534:	e001      	b.n	800253a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	50040300 	.word	0x50040300
 8002548:	50040100 	.word	0x50040100
 800254c:	50040000 	.word	0x50040000
 8002550:	08002ed3 	.word	0x08002ed3
 8002554:	08002fab 	.word	0x08002fab
 8002558:	08002fc7 	.word	0x08002fc7

0800255c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0b6      	sub	sp, #216	; 0xd8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x22>
 800258e:	2302      	movs	r3, #2
 8002590:	e3c7      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x7b2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fdac 	bl	80020fc <LL_ADC_REG_IsConversionOngoing>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 83a8 	bne.w	8002cfc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d824      	bhi.n	80025fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	3b02      	subs	r3, #2
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d81b      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x86>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <HAL_ADC_ConfigChannel+0x54>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025dd 	.word	0x080025dd
 80025cc:	080025e5 	.word	0x080025e5
 80025d0:	080025ed 	.word	0x080025ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	220c      	movs	r2, #12
 80025d8:	605a      	str	r2, [r3, #4]
          break;
 80025da:	e011      	b.n	8002600 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2212      	movs	r2, #18
 80025e0:	605a      	str	r2, [r3, #4]
          break;
 80025e2:	e00d      	b.n	8002600 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2218      	movs	r2, #24
 80025e8:	605a      	str	r2, [r3, #4]
          break;
 80025ea:	e009      	b.n	8002600 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	605a      	str	r2, [r3, #4]
          break;
 80025f4:	e004      	b.n	8002600 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2206      	movs	r2, #6
 80025fa:	605a      	str	r2, [r3, #4]
          break;
 80025fc:	e000      	b.n	8002600 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80025fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff fc3b 	bl	8001e88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fd70 	bl	80020fc <LL_ADC_REG_IsConversionOngoing>
 800261c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd7c 	bl	8002122 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 81a6 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 81a1 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	461a      	mov	r2, r3
 8002650:	f7ff fc46 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00a      	beq.n	800268c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002686:	f7ff fb97 	bl	8001db8 <LL_ADC_SetOffset>
 800268a:	e17b      	b.n	8002984 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fbb4 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x148>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fba9 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	e01e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x186>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fb9e 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80026ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x19e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	e018      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1d0>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800272a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fb6d 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fb51 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fb46 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	e01e      	b.n	80027bc <HAL_ADC_ConfigChannel+0x24c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb3b 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800279c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e004      	b.n	80027ba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x264>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	e018      	b.n	8002806 <HAL_ADC_ConfigChannel+0x296>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e004      	b.n	8002806 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002806:	429a      	cmp	r2, r3
 8002808:	d106      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fb0a 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2102      	movs	r1, #2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff faee 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2d4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fae3 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	e01e      	b.n	8002882 <HAL_ADC_ConfigChannel+0x312>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fad8 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800286a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e004      	b.n	8002880 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_ADC_ConfigChannel+0x32a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	e016      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x358>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff faa9 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2103      	movs	r1, #3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fa8d 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x396>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2103      	movs	r1, #3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fa82 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	e017      	b.n	8002936 <HAL_ADC_ConfigChannel+0x3c6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fa77 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800291e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002920:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800292c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x3de>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e011      	b.n	8002972 <HAL_ADC_ConfigChannel+0x402>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800295c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002972:	429a      	cmp	r2, r3
 8002974:	d106      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fa54 	bl	8001e2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb7d 	bl	8002088 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 813f 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff fac8 	bl	8001f38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a8e      	ldr	r2, [pc, #568]	; (8002be8 <HAL_ADC_ConfigChannel+0x678>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 8130 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x46c>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2b09      	cmp	r3, #9
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e019      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4a0>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80029f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	bf94      	ite	ls
 8002a0a:	2301      	movls	r3, #1
 8002a0c:	2300      	movhi	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d079      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x4c0>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a2e:	e015      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x4ec>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x50c>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	e017      	b.n	8002aac <HAL_ADC_ConfigChannel+0x53c>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x562>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	051b      	lsls	r3, r3, #20
 8002ad0:	e018      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x594>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
 8002b06:	e080      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x5b4>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	069b      	lsls	r3, r3, #26
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	e015      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x5e0>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x600>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x630>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x65c>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bca:	e01d      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x698>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	613b      	str	r3, [r7, #16]
  return result;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e005      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x684>
 8002be8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b1e      	subs	r3, #30
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7ff f966 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07a      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c20:	4843      	ldr	r0, [pc, #268]	; (8002d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c22:	f7ff f8bb 	bl	8001d9c <LL_ADC_GetCommonPathInternalCh>
 8002c26:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a41      	ldr	r2, [pc, #260]	; (8002d34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d12c      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d126      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x6e4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d15d      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4834      	ldr	r0, [pc, #208]	; (8002d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c60:	f7ff f889 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c7e:	e002      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8c:	e040      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2d      	ldr	r2, [pc, #180]	; (8002d48 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d118      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x75a>
 8002c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d112      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x748>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d12d      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	481b      	ldr	r0, [pc, #108]	; (8002d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cc4:	f7ff f857 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc8:	e024      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_ADC_ConfigChannel+0x7dc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d120      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11a      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d115      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480e      	ldr	r0, [pc, #56]	; (8002d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cf6:	f7ff f83e 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
 8002cfa:	e00c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	37d8      	adds	r7, #216	; 0xd8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	80080000 	.word	0x80080000
 8002d30:	50040300 	.word	0x50040300
 8002d34:	c7520000 	.word	0xc7520000
 8002d38:	50040000 	.word	0x50040000
 8002d3c:	50040200 	.word	0x50040200
 8002d40:	20000000 	.word	0x20000000
 8002d44:	053e2d63 	.word	0x053e2d63
 8002d48:	cb840000 	.word	0xcb840000
 8002d4c:	80000001 	.word	0x80000001

08002d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff f993 	bl	8002088 <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d14d      	bne.n	8002e04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <ADC_Enable+0xc0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e039      	b.n	8002e06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f94e 	bl	8002038 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe ffa8 	bl	8001cf0 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da2:	e028      	b.n	8002df6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f96d 	bl	8002088 <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f93d 	bl	8002038 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dbe:	f7fe ff97 	bl	8001cf0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d914      	bls.n	8002df6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d00d      	beq.n	8002df6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e007      	b.n	8002e06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d1cf      	bne.n	8002da4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	8000003f 	.word	0x8000003f

08002e14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f944 	bl	80020ae <LL_ADC_IsDisableOngoing>
 8002e26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f92b 	bl	8002088 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d047      	beq.n	8002ec8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d144      	bne.n	8002ec8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030d 	and.w	r3, r3, #13
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f905 	bl	8002060 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe ff47 	bl	8001cf0 <HAL_GetTick>
 8002e62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e64:	e029      	b.n	8002eba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e023      	b.n	8002eca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e82:	f7fe ff35 	bl	8001cf0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d914      	bls.n	8002eba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e007      	b.n	8002eca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1dc      	bne.n	8002e82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d14b      	bne.n	8002f84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe ffa9 	bl	8001e62 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d032      	beq.n	8002f7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d12b      	bne.n	8002f7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11f      	bne.n	8002f7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
 8002f48:	e018      	b.n	8002f7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7fe fbeb 	bl	8001758 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f82:	e00e      	b.n	8002fa2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fae3 	bl	800255c <HAL_ADC_ErrorCallback>
}
 8002f96:	e004      	b.n	8002fa2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7fe fbbd 	bl	8001738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fab5 	bl	800255c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <LL_ADC_IsEnabled>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <LL_ADC_IsEnabled+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_IsEnabled+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_StartCalibration>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003032:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800303c:	4313      	orrs	r3, r2
 800303e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_IsCalibrationOnGoing>:
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003066:	d101      	bne.n	800306c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_IsConversionOngoing>:
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d101      	bne.n	8003092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADCEx_Calibration_Start+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e04d      	b.n	8003158 <HAL_ADCEx_Calibration_Start+0xb8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fea5 	bl	8002e14 <ADC_Disable>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d136      	bne.n	8003142 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030dc:	f023 0302 	bic.w	r3, r3, #2
 80030e0:	f043 0202 	orr.w	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff96 	bl	8003020 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030f4:	e014      	b.n	8003120 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003102:	d30d      	bcc.n	8003120 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f023 0312 	bic.w	r3, r3, #18
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e01b      	b.n	8003158 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff94 	bl	8003052 <LL_ADC_IsCalibrationOnGoing>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e2      	bne.n	80030f6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
 8003140:	e005      	b.n	800314e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b09f      	sub	sp, #124	; 0x7c
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800317a:	2302      	movs	r3, #2
 800317c:	e093      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003186:	2300      	movs	r3, #0
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800318a:	2300      	movs	r3, #0
 800318c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a47      	ldr	r2, [pc, #284]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d102      	bne.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e001      	b.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e072      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff59 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 80031c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff53 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d154      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d151      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80031e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02c      	beq.n	8003246 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031fe:	035b      	lsls	r3, r3, #13
 8003200:	430b      	orrs	r3, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003208:	4829      	ldr	r0, [pc, #164]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800320a:	f7ff fef6 	bl	8002ffa <LL_ADC_IsEnabled>
 800320e:	4604      	mov	r4, r0
 8003210:	4828      	ldr	r0, [pc, #160]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003212:	f7ff fef2 	bl	8002ffa <LL_ADC_IsEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	431c      	orrs	r4, r3
 800321a:	4828      	ldr	r0, [pc, #160]	; (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800321c:	f7ff feed 	bl	8002ffa <LL_ADC_IsEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	4323      	orrs	r3, r4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d137      	bne.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	6811      	ldr	r1, [r2, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	430a      	orrs	r2, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003244:	e028      	b.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003252:	4817      	ldr	r0, [pc, #92]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003254:	f7ff fed1 	bl	8002ffa <LL_ADC_IsEnabled>
 8003258:	4604      	mov	r4, r0
 800325a:	4816      	ldr	r0, [pc, #88]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800325c:	f7ff fecd 	bl	8002ffa <LL_ADC_IsEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	431c      	orrs	r4, r3
 8003264:	4815      	ldr	r0, [pc, #84]	; (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003266:	f7ff fec8 	bl	8002ffa <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	4323      	orrs	r3, r4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d112      	bne.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003280:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003282:	e009      	b.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003296:	e000      	b.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003298:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	377c      	adds	r7, #124	; 0x7c
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop
 80032b0:	50040000 	.word	0x50040000
 80032b4:	50040100 	.word	0x50040100
 80032b8:	50040300 	.word	0x50040300
 80032bc:	50040200 	.word	0x50040200

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db0b      	blt.n	800334e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4907      	ldr	r1, [pc, #28]	; (800335c <__NVIC_EnableIRQ+0x38>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
         );
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003440:	f7ff ff8e 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff29 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff3e 	bl	8003308 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff8e 	bl	80033b4 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5d 	bl	8003360 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff31 	bl	8003324 <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e014      	b.n	800351e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe f9f9 	bl	80018fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	795b      	ldrb	r3, [r3, #5]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_DAC_Start_DMA+0x1e>
 8003542:	2302      	movs	r3, #2
 8003544:	e0ab      	b.n	800369e <HAL_DAC_Start_DMA+0x176>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2202      	movs	r2, #2
 8003550:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d12f      	bne.n	80035b8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_DAC_Start_DMA+0x180>)
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_DAC_Start_DMA+0x184>)
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_DAC_Start_DMA+0x188>)
 800356e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800357e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b08      	cmp	r3, #8
 8003584:	d013      	beq.n	80035ae <HAL_DAC_Start_DMA+0x86>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d845      	bhi.n	8003618 <HAL_DAC_Start_DMA+0xf0>
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_DAC_Start_DMA+0x72>
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d005      	beq.n	80035a4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003598:	e03e      	b.n	8003618 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3308      	adds	r3, #8
 80035a0:	613b      	str	r3, [r7, #16]
        break;
 80035a2:	e03c      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	613b      	str	r3, [r7, #16]
        break;
 80035ac:	e037      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3310      	adds	r3, #16
 80035b4:	613b      	str	r3, [r7, #16]
        break;
 80035b6:	e032      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a3d      	ldr	r2, [pc, #244]	; (80036b4 <HAL_DAC_Start_DMA+0x18c>)
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a3c      	ldr	r2, [pc, #240]	; (80036b8 <HAL_DAC_Start_DMA+0x190>)
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a3b      	ldr	r2, [pc, #236]	; (80036bc <HAL_DAC_Start_DMA+0x194>)
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d013      	beq.n	800360e <HAL_DAC_Start_DMA+0xe6>
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d817      	bhi.n	800361c <HAL_DAC_Start_DMA+0xf4>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_DAC_Start_DMA+0xd2>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d005      	beq.n	8003604 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80035f8:	e010      	b.n	800361c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3314      	adds	r3, #20
 8003600:	613b      	str	r3, [r7, #16]
        break;
 8003602:	e00c      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3318      	adds	r3, #24
 800360a:	613b      	str	r3, [r7, #16]
        break;
 800360c:	e007      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	331c      	adds	r3, #28
 8003614:	613b      	str	r3, [r7, #16]
        break;
 8003616:	e002      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_DAC_Start_DMA+0xf6>
        break;
 800361c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d111      	bne.n	8003648 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003632:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6898      	ldr	r0, [r3, #8]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	f000 faff 	bl	8003c40 <HAL_DMA_Start_IT>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]
 8003646:	e010      	b.n	800366a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68d8      	ldr	r0, [r3, #12]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	f000 faed 	bl	8003c40 <HAL_DMA_Start_IT>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e005      	b.n	800369c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	080039bb 	.word	0x080039bb
 80036ac:	080039dd 	.word	0x080039dd
 80036b0:	080039f9 	.word	0x080039f9
 80036b4:	08003a63 	.word	0x08003a63
 80036b8:	08003a85 	.word	0x08003a85
 80036bc:	08003aa1 	.word	0x08003aa1

080036c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2201      	movs	r2, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	400a      	ands	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 faf6 	bl	8003d00 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e00c      	b.n	8003740 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fae8 	bl	8003d00 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800373e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	795b      	ldrb	r3, [r3, #5]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_DAC_ConfigChannel+0x1c>
 800379e:	2302      	movs	r3, #2
 80037a0:	e107      	b.n	80039b2 <HAL_DAC_ConfigChannel+0x22c>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2202      	movs	r2, #2
 80037ac:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d174      	bne.n	80038a0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037b6:	f7fe fa9b 	bl	8001cf0 <HAL_GetTick>
 80037ba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d134      	bne.n	800382c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037c2:	e011      	b.n	80037e8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037c4:	f7fe fa94 	bl	8001cf0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d90a      	bls.n	80037e8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2203      	movs	r2, #3
 80037e2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0e4      	b.n	80039b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80037f6:	2001      	movs	r0, #1
 80037f8:	f7fe fa86 	bl	8001d08 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	6992      	ldr	r2, [r2, #24]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
 8003806:	e01e      	b.n	8003846 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003808:	f7fe fa72 	bl	8001cf0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d90a      	bls.n	800382c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f043 0208 	orr.w	r2, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2203      	movs	r2, #3
 8003826:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0c2      	b.n	80039b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	dbe8      	blt.n	8003808 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003836:	2001      	movs	r0, #1
 8003838:	f7fe fa66 	bl	8001d08 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	6992      	ldr	r2, [r2, #24]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	ea02 0103 	and.w	r1, r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	21ff      	movs	r1, #255	; 0xff
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	ea02 0103 	and.w	r1, r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d11d      	bne.n	80038e4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	221f      	movs	r2, #31
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2207      	movs	r2, #7
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	431a      	orrs	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43da      	mvns	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	400a      	ands	r2, r1
 8003948:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	f640 72fc 	movw	r2, #4092	; 0xffc
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	22c0      	movs	r2, #192	; 0xc0
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff febe 	bl	800374a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	711a      	strb	r2, [r3, #4]
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff feb7 	bl	800375e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fead 	bl	8003772 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	711a      	strb	r2, [r3, #4]
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ffd8 	bl	8003a26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	711a      	strb	r2, [r3, #4]
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff ffd1 	bl	8003a3a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff ffc7 	bl	8003a4e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	711a      	strb	r2, [r3, #4]
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e098      	b.n	8003c14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <HAL_DMA_Init+0x150>)
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d80f      	bhi.n	8003b0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_DMA_Init+0x154>)
 8003af6:	4413      	add	r3, r2
 8003af8:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <HAL_DMA_Init+0x158>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	009a      	lsls	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_DMA_Init+0x15c>)
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b0c:	e00e      	b.n	8003b2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <HAL_DMA_Init+0x160>)
 8003b16:	4413      	add	r3, r2
 8003b18:	4a43      	ldr	r2, [pc, #268]	; (8003c28 <HAL_DMA_Init+0x158>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <HAL_DMA_Init+0x164>)
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b86:	d039      	beq.n	8003bfc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_DMA_Init+0x15c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d11a      	bne.n	8003bc8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b92:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <HAL_DMA_Init+0x168>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 031c 	and.w	r3, r3, #28
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	4924      	ldr	r1, [pc, #144]	; (8003c38 <HAL_DMA_Init+0x168>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bac:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <HAL_DMA_Init+0x168>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f003 031c 	and.w	r3, r3, #28
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	491d      	ldr	r1, [pc, #116]	; (8003c38 <HAL_DMA_Init+0x168>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
 8003bc6:	e019      	b.n	8003bfc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <HAL_DMA_Init+0x16c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 031c 	and.w	r3, r3, #28
 8003bd4:	210f      	movs	r1, #15
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	4917      	ldr	r1, [pc, #92]	; (8003c3c <HAL_DMA_Init+0x16c>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003be2:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <HAL_DMA_Init+0x16c>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 031c 	and.w	r3, r3, #28
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	4911      	ldr	r1, [pc, #68]	; (8003c3c <HAL_DMA_Init+0x16c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40020407 	.word	0x40020407
 8003c24:	bffdfff8 	.word	0xbffdfff8
 8003c28:	cccccccd 	.word	0xcccccccd
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	bffdfbf8 	.word	0xbffdfbf8
 8003c34:	40020400 	.word	0x40020400
 8003c38:	400200a8 	.word	0x400200a8
 8003c3c:	400204a8 	.word	0x400204a8

08003c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_DMA_Start_IT+0x20>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e04b      	b.n	8003cf8 <HAL_DMA_Start_IT+0xb8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d13a      	bne.n	8003cea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f91e 	bl	8003eda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 020e 	orr.w	r2, r2, #14
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e00f      	b.n	8003cd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 020a 	orr.w	r2, r2, #10
 8003cd6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e005      	b.n	8003cf6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 020e 	bic.w	r2, r2, #14
 8003d38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f003 021c 	and.w	r2, r3, #28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f003 031c 	and.w	r3, r3, #28
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d026      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x7a>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d021      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 021c 	and.w	r2, r3, #28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2104      	movs	r1, #4
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d071      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003df4:	e06c      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 031c 	and.w	r3, r3, #28
 8003dfe:	2202      	movs	r2, #2
 8003e00:	409a      	lsls	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02e      	beq.n	8003e68 <HAL_DMA_IRQHandler+0xec>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d029      	beq.n	8003e68 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 020a 	bic.w	r2, r2, #10
 8003e30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f003 021c 	and.w	r2, r3, #28
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2102      	movs	r1, #2
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d038      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e66:	e033      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f003 031c 	and.w	r3, r3, #28
 8003e70:	2208      	movs	r2, #8
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02a      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x156>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d025      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 020e 	bic.w	r2, r2, #14
 8003e94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f003 021c 	and.w	r2, r3, #28
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
}
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f003 021c 	and.w	r2, r3, #28
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d108      	bne.n	8003f1e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f1c:	e007      	b.n	8003f2e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e17f      	b.n	800424c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8171 	beq.w	8004246 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d00b      	beq.n	8003f84 <HAL_GPIO_Init+0x48>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f78:	2b11      	cmp	r3, #17
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b12      	cmp	r3, #18
 8003f82:	d130      	bne.n	8003fe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fba:	2201      	movs	r2, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0201 	and.w	r2, r3, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d118      	bne.n	8004024 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f003 0201 	and.w	r2, r3, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d003      	beq.n	8004064 <HAL_GPIO_Init+0x128>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b12      	cmp	r3, #18
 8004062:	d123      	bne.n	80040ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80ac 	beq.w	8004246 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	4b5f      	ldr	r3, [pc, #380]	; (800426c <HAL_GPIO_Init+0x330>)
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_GPIO_Init+0x330>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6613      	str	r3, [r2, #96]	; 0x60
 80040fa:	4b5c      	ldr	r3, [pc, #368]	; (800426c <HAL_GPIO_Init+0x330>)
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004106:	4a5a      	ldr	r2, [pc, #360]	; (8004270 <HAL_GPIO_Init+0x334>)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	3302      	adds	r3, #2
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004130:	d025      	beq.n	800417e <HAL_GPIO_Init+0x242>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_GPIO_Init+0x338>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01f      	beq.n	800417a <HAL_GPIO_Init+0x23e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_GPIO_Init+0x33c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d019      	beq.n	8004176 <HAL_GPIO_Init+0x23a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_GPIO_Init+0x340>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <HAL_GPIO_Init+0x236>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4c      	ldr	r2, [pc, #304]	; (8004280 <HAL_GPIO_Init+0x344>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00d      	beq.n	800416e <HAL_GPIO_Init+0x232>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4b      	ldr	r2, [pc, #300]	; (8004284 <HAL_GPIO_Init+0x348>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <HAL_GPIO_Init+0x22e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4a      	ldr	r2, [pc, #296]	; (8004288 <HAL_GPIO_Init+0x34c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_GPIO_Init+0x22a>
 8004162:	2306      	movs	r3, #6
 8004164:	e00c      	b.n	8004180 <HAL_GPIO_Init+0x244>
 8004166:	2307      	movs	r3, #7
 8004168:	e00a      	b.n	8004180 <HAL_GPIO_Init+0x244>
 800416a:	2305      	movs	r3, #5
 800416c:	e008      	b.n	8004180 <HAL_GPIO_Init+0x244>
 800416e:	2304      	movs	r3, #4
 8004170:	e006      	b.n	8004180 <HAL_GPIO_Init+0x244>
 8004172:	2303      	movs	r3, #3
 8004174:	e004      	b.n	8004180 <HAL_GPIO_Init+0x244>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <HAL_GPIO_Init+0x244>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_GPIO_Init+0x244>
 800417e:	2300      	movs	r3, #0
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	f002 0203 	and.w	r2, r2, #3
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	4093      	lsls	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004190:	4937      	ldr	r1, [pc, #220]	; (8004270 <HAL_GPIO_Init+0x334>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_GPIO_Init+0x350>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041c2:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_GPIO_Init+0x350>)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_GPIO_Init+0x350>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_GPIO_Init+0x350>)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_GPIO_Init+0x350>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004216:	4a1d      	ldr	r2, [pc, #116]	; (800428c <HAL_GPIO_Init+0x350>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_GPIO_Init+0x350>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_GPIO_Init+0x350>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3301      	adds	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	f47f ae78 	bne.w	8003f4c <HAL_GPIO_Init+0x10>
  }
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40010000 	.word	0x40010000
 8004274:	48000400 	.word	0x48000400
 8004278:	48000800 	.word	0x48000800
 800427c:	48000c00 	.word	0x48000c00
 8004280:	48001000 	.word	0x48001000
 8004284:	48001400 	.word	0x48001400
 8004288:	48001800 	.word	0x48001800
 800428c:	40010400 	.word	0x40010400

08004290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
 800429c:	4613      	mov	r3, r2
 800429e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a0:	787b      	ldrb	r3, [r7, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40007000 	.word	0x40007000

080042dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ea:	d130      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d038      	beq.n	800436c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004302:	4a1e      	ldr	r2, [pc, #120]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800430a:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2232      	movs	r2, #50	; 0x32
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0c9b      	lsrs	r3, r3, #18
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004320:	e002      	b.n	8004328 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b01      	subs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d102      	bne.n	800433c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f2      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d110      	bne.n	800436c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00f      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d007      	beq.n	800436c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004364:	4a05      	ldr	r2, [pc, #20]	; (800437c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800436a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40007000 	.word	0x40007000
 8004380:	20000000 	.word	0x20000000
 8004384:	431bde83 	.word	0x431bde83

08004388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e3d4      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	4ba1      	ldr	r3, [pc, #644]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a4:	4b9e      	ldr	r3, [pc, #632]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80e4 	beq.w	8004584 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_RCC_OscConfig+0x4a>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	f040 808b 	bne.w	80044e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 8087 	bne.w	80044e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043d2:	4b93      	ldr	r3, [pc, #588]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e3ac      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <HAL_RCC_OscConfig+0x7c>
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004402:	e005      	b.n	8004410 <HAL_RCC_OscConfig+0x88>
 8004404:	4b86      	ldr	r3, [pc, #536]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004410:	4293      	cmp	r3, r2
 8004412:	d223      	bcs.n	800445c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fd41 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e38d      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004428:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7c      	ldr	r2, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b7a      	ldr	r3, [pc, #488]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4977      	ldr	r1, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004446:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4972      	ldr	r1, [pc, #456]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
 800445a:	e025      	b.n	80044a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445c:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6f      	ldr	r2, [pc, #444]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004462:	f043 0308 	orr.w	r3, r3, #8
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	496a      	ldr	r1, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447a:	4b69      	ldr	r3, [pc, #420]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	4965      	ldr	r1, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd01 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e34d      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a8:	f000 fc36 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	495a      	ldr	r1, [pc, #360]	; (8004624 <HAL_RCC_OscConfig+0x29c>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4a58      	ldr	r2, [pc, #352]	; (8004628 <HAL_RCC_OscConfig+0x2a0>)
 80044c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044c8:	4b58      	ldr	r3, [pc, #352]	; (800462c <HAL_RCC_OscConfig+0x2a4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fbbf 	bl	8001c50 <HAL_InitTick>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d052      	beq.n	8004582 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	e331      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d032      	beq.n	800454e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044e8:	4b4d      	ldr	r3, [pc, #308]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a4c      	ldr	r2, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044f4:	f7fd fbfc 	bl	8001cf0 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044fc:	f7fd fbf8 	bl	8001cf0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e31a      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800450e:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a40      	ldr	r2, [pc, #256]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	493b      	ldr	r1, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004538:	4b39      	ldr	r3, [pc, #228]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	4936      	ldr	r1, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e01a      	b.n	8004584 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800454e:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a33      	ldr	r2, [pc, #204]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800455a:	f7fd fbc9 	bl	8001cf0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004562:	f7fd fbc5 	bl	8001cf0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e2e7      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x1da>
 8004580:	e000      	b.n	8004584 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d074      	beq.n	800467a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x21a>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d10e      	bne.n	80045ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d10b      	bne.n	80045ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d064      	beq.n	8004678 <HAL_RCC_OscConfig+0x2f0>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d160      	bne.n	8004678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e2c4      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x24a>
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e01d      	b.n	800460e <HAL_RCC_OscConfig+0x286>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x26e>
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x286>
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_RCC_OscConfig+0x298>)
 8004608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01c      	beq.n	8004650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd fb6b 	bl	8001cf0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461c:	e011      	b.n	8004642 <HAL_RCC_OscConfig+0x2ba>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	08007ba0 	.word	0x08007ba0
 8004628:	20000000 	.word	0x20000000
 800462c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd fb5e 	bl	8001cf0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e280      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004642:	4baf      	ldr	r3, [pc, #700]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x2a8>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fb4e 	bl	8001cf0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fb4a 	bl	8001cf0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e26c      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466a:	4ba5      	ldr	r3, [pc, #660]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x2d0>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d060      	beq.n	8004748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d005      	beq.n	8004698 <HAL_RCC_OscConfig+0x310>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d119      	bne.n	80046c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d116      	bne.n	80046c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004698:	4b99      	ldr	r3, [pc, #612]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_OscConfig+0x328>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e249      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	4990      	ldr	r1, [pc, #576]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c4:	e040      	b.n	8004748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d023      	beq.n	8004716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ce:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8b      	ldr	r2, [pc, #556]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fd fb09 	bl	8001cf0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fd fb05 	bl	8001cf0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e227      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f4:	4b82      	ldr	r3, [pc, #520]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	497c      	ldr	r1, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	e018      	b.n	8004748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b7a      	ldr	r3, [pc, #488]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a79      	ldr	r2, [pc, #484]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fd fae5 	bl	8001cf0 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472a:	f7fd fae1 	bl	8001cf0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e203      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800473c:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d03c      	beq.n	80047ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01c      	beq.n	8004796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800475c:	4b68      	ldr	r3, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	4a67      	ldr	r2, [pc, #412]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fd fac0 	bl	8001cf0 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fd fabc 	bl	8001cf0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1de      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004786:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ef      	beq.n	8004774 <HAL_RCC_OscConfig+0x3ec>
 8004794:	e01b      	b.n	80047ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004796:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fd faa3 	bl	8001cf0 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fd fa9f 	bl	8001cf0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e1c1      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c0:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ef      	bne.n	80047ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a6 	beq.w	8004928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047dc:	2300      	movs	r3, #0
 80047de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b44      	ldr	r3, [pc, #272]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	4a43      	ldr	r2, [pc, #268]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	; 0x58
 80047f8:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004804:	2301      	movs	r3, #1
 8004806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <HAL_RCC_OscConfig+0x57c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d118      	bne.n	8004846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004814:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <HAL_RCC_OscConfig+0x57c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a3a      	ldr	r2, [pc, #232]	; (8004904 <HAL_RCC_OscConfig+0x57c>)
 800481a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004820:	f7fd fa66 	bl	8001cf0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fd fa62 	bl	8001cf0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e184      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4b32      	ldr	r3, [pc, #200]	; (8004904 <HAL_RCC_OscConfig+0x57c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d108      	bne.n	8004860 <HAL_RCC_OscConfig+0x4d8>
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485e:	e024      	b.n	80048aa <HAL_RCC_OscConfig+0x522>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b05      	cmp	r3, #5
 8004866:	d110      	bne.n	800488a <HAL_RCC_OscConfig+0x502>
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a24      	ldr	r2, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a20      	ldr	r2, [pc, #128]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004888:	e00f      	b.n	80048aa <HAL_RCC_OscConfig+0x522>
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489a:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80048a2:	f023 0304 	bic.w	r3, r3, #4
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd fa1d 	bl	8001cf0 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd fa19 	bl	8001cf0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e139      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x578>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0ed      	beq.n	80048ba <HAL_RCC_OscConfig+0x532>
 80048de:	e01a      	b.n	8004916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd fa06 	bl	8001cf0 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e6:	e00f      	b.n	8004908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fd fa02 	bl	8001cf0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d906      	bls.n	8004908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e122      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004908:	4b90      	ldr	r3, [pc, #576]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e8      	bne.n	80048e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004916:	7ffb      	ldrb	r3, [r7, #31]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d105      	bne.n	8004928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800491c:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	4a8a      	ldr	r2, [pc, #552]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004926:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8108 	beq.w	8004b42 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	2b02      	cmp	r3, #2
 8004938:	f040 80d0 	bne.w	8004adc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800493c:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	429a      	cmp	r2, r3
 800494e:	d130      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	3b01      	subs	r3, #1
 800495c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d127      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d11f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800497c:	2a07      	cmp	r2, #7
 800497e:	bf14      	ite	ne
 8004980:	2201      	movne	r2, #1
 8004982:	2200      	moveq	r2, #0
 8004984:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004986:	4293      	cmp	r3, r2
 8004988:	d113      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d06e      	beq.n	8004a90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d069      	beq.n	8004a8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b7      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5c      	ldr	r2, [pc, #368]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 80049da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049e0:	f7fd f986 	bl	8001cf0 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd f982 	bl	8001cf0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0a4      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fa:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a06:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	4b51      	ldr	r3, [pc, #324]	; (8004b50 <HAL_RCC_OscConfig+0x7c8>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0112      	lsls	r2, r2, #4
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a20:	0212      	lsls	r2, r2, #8
 8004a22:	4311      	orrs	r1, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a28:	0852      	lsrs	r2, r2, #1
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	0552      	lsls	r2, r2, #21
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a34:	0852      	lsrs	r2, r2, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0652      	lsls	r2, r2, #25
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a40:	0912      	lsrs	r2, r2, #4
 8004a42:	0452      	lsls	r2, r2, #17
 8004a44:	430a      	orrs	r2, r1
 8004a46:	4941      	ldr	r1, [pc, #260]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a58:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a64:	f7fd f944 	bl	8001cf0 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd f940 	bl	8001cf0 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e062      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8a:	e05a      	b.n	8004b42 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e059      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d152      	bne.n	8004b42 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ab4:	f7fd f91c 	bl	8001cf0 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd f918 	bl	8001cf0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e03a      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x734>
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d02d      	beq.n	8004b3e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004b0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd f8eb 	bl	8001cf0 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fd f8e7 	bl	8001cf0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e009      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_OscConfig+0x7c4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x796>
 8004b3c:	e001      	b.n	8004b42 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	f99d808c 	.word	0xf99d808c

08004b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0c8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 0207 	bic.w	r2, r3, #7
 8004b7e:	4961      	ldr	r1, [pc, #388]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b0      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d04c      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d121      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e09e      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d115      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e092      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e086      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e07e      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bfc:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0203 	bic.w	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	493f      	ldr	r1, [pc, #252]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fd f86f 	bl	8001cf0 <HAL_GetTick>
 8004c12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c16:	f7fd f86b 	bl	8001cf0 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e066      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2c:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 020c 	and.w	r2, r3, #12
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d1eb      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	492c      	ldr	r1, [pc, #176]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d210      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 0207 	bic.w	r2, r3, #7
 8004c72:	4924      	ldr	r1, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1b0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e036      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4918      	ldr	r1, [pc, #96]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4910      	ldr	r1, [pc, #64]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cca:	f000 f825 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	490c      	ldr	r1, [pc, #48]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	5ccb      	ldrb	r3, [r1, r3]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fc ffae 	bl	8001c50 <HAL_InitTick>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	08007ba0 	.word	0x08007ba0
 8004d10:	20000000 	.word	0x20000000
 8004d14:	20000004 	.word	0x20000004

08004d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b089      	sub	sp, #36	; 0x24
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d26:	4b3e      	ldr	r3, [pc, #248]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d30:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x34>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d121      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d11e      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d4c:	4b34      	ldr	r3, [pc, #208]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d58:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e005      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e004      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d9c:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d134      	bne.n	8004e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8004dbc:	e005      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc0:	617b      	str	r3, [r7, #20]
      break;
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004dc6:	617b      	str	r3, [r7, #20]
      break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	617b      	str	r3, [r7, #20]
      break;
 8004dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd0:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	3301      	adds	r3, #1
 8004ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	fb02 f203 	mul.w	r2, r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	0e5b      	lsrs	r3, r3, #25
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	3301      	adds	r3, #1
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e10:	69bb      	ldr	r3, [r7, #24]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3724      	adds	r7, #36	; 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	08007bb8 	.word	0x08007bb8
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	007a1200 	.word	0x007a1200

08004e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000000 	.word	0x20000000

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e4c:	f7ff fff0 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4904      	ldr	r1, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	08007bb0 	.word	0x08007bb0

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e78:	f7ff ffda 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0adb      	lsrs	r3, r3, #11
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4904      	ldr	r1, [pc, #16]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08007bb0 	.word	0x08007bb0

08004ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff fa02 	bl	80042c0 <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
 8004ebe:	e014      	b.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f9f2 	bl	80042c0 <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d10b      	bne.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d919      	bls.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2ba0      	cmp	r3, #160	; 0xa0
 8004efc:	d902      	bls.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efe:	2302      	movs	r3, #2
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e013      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e010      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d902      	bls.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f10:	2303      	movs	r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e00a      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d102      	bne.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e004      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d101      	bne.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 0207 	bic.w	r2, r3, #7
 8004f34:	4909      	ldr	r1, [pc, #36]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40022000 	.word	0x40022000

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d041      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f84:	d02a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8a:	d824      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f96:	d81e      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa4:	4b86      	ldr	r3, [pc, #536]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a85      	ldr	r2, [pc, #532]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb0:	e015      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fabb 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc2:	e00c      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3320      	adds	r3, #32
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fba6 	bl	800571c <RCCEx_PLLSAI2_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe4:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff2:	4973      	ldr	r1, [pc, #460]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d041      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005014:	d02a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800501a:	d824      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800501c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005026:	d81e      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005030:	d010      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005032:	e018      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005034:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4a61      	ldr	r2, [pc, #388]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005040:	e015      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa73 	bl	8005534 <RCCEx_PLLSAI1_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005052:	e00c      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3320      	adds	r3, #32
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fb5e 	bl	800571c <RCCEx_PLLSAI2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005064:	e003      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	74fb      	strb	r3, [r7, #19]
      break;
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800506c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800506e:	7cfb      	ldrb	r3, [r7, #19]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005074:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005082:	494f      	ldr	r1, [pc, #316]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800508a:	e001      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a0 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6593      	str	r3, [r2, #88]	; 0x58
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e0:	f7fc fe06 	bl	8001cf0 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050e6:	e009      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e8:	f7fc fe02 	bl	8001cf0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d902      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	74fb      	strb	r3, [r7, #19]
        break;
 80050fa:	e005      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050fc:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ef      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d15c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800510e:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01f      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d019      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7fc fdc1 	bl	8001cf0 <HAL_GetTick>
 800516e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005170:	e00b      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fdbd 	bl	8001cf0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d902      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	74fb      	strb	r3, [r7, #19]
            break;
 8005188:	e006      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518a:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ec      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ae:	4904      	ldr	r1, [pc, #16]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051b6:	e009      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	74bb      	strb	r3, [r7, #18]
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051cc:	7c7b      	ldrb	r3, [r7, #17]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4b9e      	ldr	r3, [pc, #632]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	4a9d      	ldr	r2, [pc, #628]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ea:	4b98      	ldr	r3, [pc, #608]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	4994      	ldr	r1, [pc, #592]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800520c:	4b8f      	ldr	r3, [pc, #572]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f023 020c 	bic.w	r2, r3, #12
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	498c      	ldr	r1, [pc, #560]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800522e:	4b87      	ldr	r3, [pc, #540]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	4983      	ldr	r1, [pc, #524]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005250:	4b7e      	ldr	r3, [pc, #504]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	497b      	ldr	r1, [pc, #492]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005272:	4b76      	ldr	r3, [pc, #472]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	4972      	ldr	r1, [pc, #456]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005294:	4b6d      	ldr	r3, [pc, #436]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	496a      	ldr	r1, [pc, #424]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b6:	4b65      	ldr	r3, [pc, #404]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	4961      	ldr	r1, [pc, #388]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d8:	4b5c      	ldr	r3, [pc, #368]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e6:	4959      	ldr	r1, [pc, #356]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fa:	4b54      	ldr	r3, [pc, #336]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	4950      	ldr	r1, [pc, #320]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531c:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	4948      	ldr	r1, [pc, #288]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800533e:	4b43      	ldr	r3, [pc, #268]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	493f      	ldr	r1, [pc, #252]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d028      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005360:	4b3a      	ldr	r3, [pc, #232]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536e:	4937      	ldr	r1, [pc, #220]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537e:	d106      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a31      	ldr	r2, [pc, #196]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
 800538c:	e011      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005396:	d10c      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8c8 	bl	8005534 <RCCEx_PLLSAI1_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d028      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053be:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	491f      	ldr	r1, [pc, #124]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053dc:	d106      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e8:	60d3      	str	r3, [r2, #12]
 80053ea:	e011      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f899 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	4908      	ldr	r1, [pc, #32]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543a:	d109      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a02      	ldr	r2, [pc, #8]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	60d3      	str	r3, [r2, #12]
 8005448:	e014      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005458:	d10c      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3304      	adds	r3, #4
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f867 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02f      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005480:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800548e:	4928      	ldr	r1, [pc, #160]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800549e:	d10d      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f844 	bl	8005534 <RCCEx_PLLSAI1_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d014      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	74bb      	strb	r3, [r7, #18]
 80054ba:	e011      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3320      	adds	r3, #32
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f925 	bl	800571c <RCCEx_PLLSAI2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fa:	490d      	ldr	r1, [pc, #52]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005526:	7cbb      	ldrb	r3, [r7, #18]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40021000 	.word	0x40021000

08005534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005542:	4b75      	ldr	r3, [pc, #468]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800554e:	4b72      	ldr	r3, [pc, #456]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0203 	and.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d10d      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
       ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
       ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d047      	beq.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e044      	b.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d018      	beq.n	80055ba <RCCEx_PLLSAI1_Config+0x86>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d825      	bhi.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d002      	beq.n	8005596 <RCCEx_PLLSAI1_Config+0x62>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d009      	beq.n	80055a8 <RCCEx_PLLSAI1_Config+0x74>
 8005594:	e020      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005596:	4b60      	ldr	r3, [pc, #384]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11d      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a6:	e01a      	b.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055a8:	4b5b      	ldr	r3, [pc, #364]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b8:	e013      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ba:	4b57      	ldr	r3, [pc, #348]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055c6:	4b54      	ldr	r3, [pc, #336]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055d6:	e006      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	e004      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10d      	bne.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ee:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	430b      	orrs	r3, r1
 8005604:	4944      	ldr	r1, [pc, #272]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d17d      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a40      	ldr	r2, [pc, #256]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fc fb68 	bl	8001cf0 <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005624:	f7fc fb64 	bl	8001cf0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
        break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005638:	4b37      	ldr	r3, [pc, #220]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d160      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d111      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005650:	4b31      	ldr	r3, [pc, #196]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6892      	ldr	r2, [r2, #8]
 8005660:	0211      	lsls	r1, r2, #8
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68d2      	ldr	r2, [r2, #12]
 8005666:	0912      	lsrs	r2, r2, #4
 8005668:	0452      	lsls	r2, r2, #17
 800566a:	430a      	orrs	r2, r1
 800566c:	492a      	ldr	r1, [pc, #168]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
 8005672:	e027      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d112      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800567a:	4b27      	ldr	r3, [pc, #156]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005682:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	0211      	lsls	r1, r2, #8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6912      	ldr	r2, [r2, #16]
 8005690:	0852      	lsrs	r2, r2, #1
 8005692:	3a01      	subs	r2, #1
 8005694:	0552      	lsls	r2, r2, #21
 8005696:	430a      	orrs	r2, r1
 8005698:	491f      	ldr	r1, [pc, #124]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
 800569e:	e011      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6892      	ldr	r2, [r2, #8]
 80056b0:	0211      	lsls	r1, r2, #8
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6952      	ldr	r2, [r2, #20]
 80056b6:	0852      	lsrs	r2, r2, #1
 80056b8:	3a01      	subs	r2, #1
 80056ba:	0652      	lsls	r2, r2, #25
 80056bc:	430a      	orrs	r2, r1
 80056be:	4916      	ldr	r1, [pc, #88]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fc fb0e 	bl	8001cf0 <HAL_GetTick>
 80056d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056d6:	e009      	b.n	80056ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d8:	f7fc fb0a 	bl	8001cf0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d902      	bls.n	80056ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	73fb      	strb	r3, [r7, #15]
          break;
 80056ea:	e005      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ef      	beq.n	80056d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4904      	ldr	r1, [pc, #16]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005708:	4313      	orrs	r3, r2
 800570a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000

0800571c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800572a:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005736:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0203 	and.w	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d10d      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
       ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800574e:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
       ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d047      	beq.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	e044      	b.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d018      	beq.n	80057a2 <RCCEx_PLLSAI2_Config+0x86>
 8005770:	2b03      	cmp	r3, #3
 8005772:	d825      	bhi.n	80057c0 <RCCEx_PLLSAI2_Config+0xa4>
 8005774:	2b01      	cmp	r3, #1
 8005776:	d002      	beq.n	800577e <RCCEx_PLLSAI2_Config+0x62>
 8005778:	2b02      	cmp	r3, #2
 800577a:	d009      	beq.n	8005790 <RCCEx_PLLSAI2_Config+0x74>
 800577c:	e020      	b.n	80057c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11d      	bne.n	80057c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578e:	e01a      	b.n	80057c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	2b00      	cmp	r3, #0
 800579a:	d116      	bne.n	80057ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a0:	e013      	b.n	80057ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ae:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057be:	e006      	b.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      break;
 80057c4:	e004      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	430b      	orrs	r3, r1
 80057ec:	4939      	ldr	r1, [pc, #228]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d167      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005804:	f7fc fa74 	bl	8001cf0 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800580a:	e009      	b.n	8005820 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800580c:	f7fc fa70 	bl	8001cf0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d902      	bls.n	8005820 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	73fb      	strb	r3, [r7, #15]
        break;
 800581e:	e005      	b.n	800582c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005820:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ef      	bne.n	800580c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d14a      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d111      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	0211      	lsls	r1, r2, #8
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68d2      	ldr	r2, [r2, #12]
 800584e:	0912      	lsrs	r2, r2, #4
 8005850:	0452      	lsls	r2, r2, #17
 8005852:	430a      	orrs	r2, r1
 8005854:	491f      	ldr	r1, [pc, #124]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	614b      	str	r3, [r1, #20]
 800585a:	e011      	b.n	8005880 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6892      	ldr	r2, [r2, #8]
 800586c:	0211      	lsls	r1, r2, #8
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6912      	ldr	r2, [r2, #16]
 8005872:	0852      	lsrs	r2, r2, #1
 8005874:	3a01      	subs	r2, #1
 8005876:	0652      	lsls	r2, r2, #25
 8005878:	430a      	orrs	r2, r1
 800587a:	4916      	ldr	r1, [pc, #88]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587c:	4313      	orrs	r3, r2
 800587e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fc fa30 	bl	8001cf0 <HAL_GetTick>
 8005890:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005892:	e009      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005894:	f7fc fa2c 	bl	8001cf0 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
          break;
 80058a6:	e005      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ef      	beq.n	8005894 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4904      	ldr	r1, [pc, #16]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000

080058d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e049      	b.n	800597e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc f86a 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f000 fab6 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d001      	beq.n	80059a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e047      	b.n	8005a30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_TIM_Base_Start+0xb4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01d      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d018      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <HAL_TIM_Base_Start+0xb8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <HAL_TIM_Base_Start+0xbc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_TIM_Base_Start+0xc0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <HAL_TIM_Base_Start+0xc4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_Base_Start+0x66>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_TIM_Base_Start+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d115      	bne.n	8005a1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_TIM_Base_Start+0xcc>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d015      	beq.n	8005a2c <HAL_TIM_Base_Start+0xa4>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a06:	d011      	beq.n	8005a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a18:	e008      	b.n	8005a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e000      	b.n	8005a2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	00010007 	.word	0x00010007

08005a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0202 	mvn.w	r2, #2
 8005a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9d5 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9c7 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f9d8 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d122      	bne.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d11b      	bne.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0204 	mvn.w	r2, #4
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9ab 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f99d 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f9ae 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0208 	mvn.w	r2, #8
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f981 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f973 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f984 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d122      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d11b      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0210 	mvn.w	r2, #16
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2208      	movs	r2, #8
 8005b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f957 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e005      	b.n	8005baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f949 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f95a 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10e      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d107      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0201 	mvn.w	r2, #1
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f923 	bl	8005e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fb06 	bl	8006214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 faf9 	bl	8006228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f908 	bl	8005e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d10e      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0220 	mvn.w	r2, #32
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fab9 	bl	8006200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_ConfigClockSource+0x18>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e0b5      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x184>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ccc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cea:	d03e      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xd4>
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	f200 8087 	bhi.w	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	f000 8085 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x170>
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d87f      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d02:	2b70      	cmp	r3, #112	; 0x70
 8005d04:	d01a      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0xa6>
 8005d06:	2b70      	cmp	r3, #112	; 0x70
 8005d08:	d87b      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0a:	2b60      	cmp	r3, #96	; 0x60
 8005d0c:	d050      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0x11a>
 8005d0e:	2b60      	cmp	r3, #96	; 0x60
 8005d10:	d877      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d12:	2b50      	cmp	r3, #80	; 0x50
 8005d14:	d03c      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xfa>
 8005d16:	2b50      	cmp	r3, #80	; 0x50
 8005d18:	d873      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d058      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0x13a>
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d86f      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	d064      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x15a>
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d86b      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d060      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x15a>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d867      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d05c      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x15a>
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d05a      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d3a:	e062      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6899      	ldr	r1, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f000 f9b0 	bl	80060b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]
      break;
 8005d68:	e04e      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6899      	ldr	r1, [r3, #8]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f000 f999 	bl	80060b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8c:	609a      	str	r2, [r3, #8]
      break;
 8005d8e:	e03b      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f000 f90d 	bl	8005fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2150      	movs	r1, #80	; 0x50
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f966 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dae:	e02b      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f000 f92c 	bl	800601a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2160      	movs	r1, #96	; 0x60
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f956 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dce:	e01b      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6859      	ldr	r1, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f000 f8ed 	bl	8005fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2140      	movs	r1, #64	; 0x40
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f946 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dee:	e00b      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 f93d 	bl	800607a <TIM_ITRx_SetConfig>
        break;
 8005e00:	e002      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d013      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d00f      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3d      	ldr	r2, [pc, #244]	; (8005fa0 <TIM_Base_SetConfig+0x118>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3c      	ldr	r2, [pc, #240]	; (8005fa4 <TIM_Base_SetConfig+0x11c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3b      	ldr	r2, [pc, #236]	; (8005fa8 <TIM_Base_SetConfig+0x120>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a3a      	ldr	r2, [pc, #232]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d108      	bne.n	8005eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01f      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee8:	d01b      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <TIM_Base_SetConfig+0x118>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d017      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <TIM_Base_SetConfig+0x11c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <TIM_Base_SetConfig+0x120>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00f      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a29      	ldr	r2, [pc, #164]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00b      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a28      	ldr	r2, [pc, #160]	; (8005fb0 <TIM_Base_SetConfig+0x128>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d007      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <TIM_Base_SetConfig+0x12c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_Base_SetConfig+0x9a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <TIM_Base_SetConfig+0x130>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d108      	bne.n	8005f34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_Base_SetConfig+0xf8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_Base_SetConfig+0xf8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <TIM_Base_SetConfig+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_Base_SetConfig+0xf8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <TIM_Base_SetConfig+0x12c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0xf8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <TIM_Base_SetConfig+0x130>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	615a      	str	r2, [r3, #20]
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	f043 0307 	orr.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e068      	b.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2e      	ldr	r2, [pc, #184]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2d      	ldr	r2, [pc, #180]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d018      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a13      	ldr	r2, [pc, #76]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a14      	ldr	r2, [pc, #80]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d10c      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40014000 	.word	0x40014000

08006200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e040      	b.n	80062d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb fbde 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f82c 	bl	80062d8 <UART_SetConfig>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e022      	b.n	80062d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 faaa 	bl	80067ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fb31 	bl	8006930 <UART_CheckIdleState>
 80062ce:	4603      	mov	r3, r0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d8:	b5b0      	push	{r4, r5, r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4bad      	ldr	r3, [pc, #692]	; (80065b8 <UART_SetConfig+0x2e0>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	69f9      	ldr	r1, [r7, #28]
 800630c:	430b      	orrs	r3, r1
 800630e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4aa2      	ldr	r2, [pc, #648]	; (80065bc <UART_SetConfig+0x2e4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	4313      	orrs	r3, r2
 800633e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a99      	ldr	r2, [pc, #612]	; (80065c0 <UART_SetConfig+0x2e8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d121      	bne.n	80063a2 <UART_SetConfig+0xca>
 800635e:	4b99      	ldr	r3, [pc, #612]	; (80065c4 <UART_SetConfig+0x2ec>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d817      	bhi.n	800639c <UART_SetConfig+0xc4>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x9c>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	08006391 	.word	0x08006391
 800637c:	0800638b 	.word	0x0800638b
 8006380:	08006397 	.word	0x08006397
 8006384:	2301      	movs	r3, #1
 8006386:	76fb      	strb	r3, [r7, #27]
 8006388:	e0e7      	b.n	800655a <UART_SetConfig+0x282>
 800638a:	2302      	movs	r3, #2
 800638c:	76fb      	strb	r3, [r7, #27]
 800638e:	e0e4      	b.n	800655a <UART_SetConfig+0x282>
 8006390:	2304      	movs	r3, #4
 8006392:	76fb      	strb	r3, [r7, #27]
 8006394:	e0e1      	b.n	800655a <UART_SetConfig+0x282>
 8006396:	2308      	movs	r3, #8
 8006398:	76fb      	strb	r3, [r7, #27]
 800639a:	e0de      	b.n	800655a <UART_SetConfig+0x282>
 800639c:	2310      	movs	r3, #16
 800639e:	76fb      	strb	r3, [r7, #27]
 80063a0:	e0db      	b.n	800655a <UART_SetConfig+0x282>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a88      	ldr	r2, [pc, #544]	; (80065c8 <UART_SetConfig+0x2f0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d132      	bne.n	8006412 <UART_SetConfig+0x13a>
 80063ac:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <UART_SetConfig+0x2ec>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d828      	bhi.n	800640c <UART_SetConfig+0x134>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0xe8>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	0800640d 	.word	0x0800640d
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	08006401 	.word	0x08006401
 80063d4:	0800640d 	.word	0x0800640d
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	080063fb 	.word	0x080063fb
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006407 	.word	0x08006407
 80063f4:	2300      	movs	r3, #0
 80063f6:	76fb      	strb	r3, [r7, #27]
 80063f8:	e0af      	b.n	800655a <UART_SetConfig+0x282>
 80063fa:	2302      	movs	r3, #2
 80063fc:	76fb      	strb	r3, [r7, #27]
 80063fe:	e0ac      	b.n	800655a <UART_SetConfig+0x282>
 8006400:	2304      	movs	r3, #4
 8006402:	76fb      	strb	r3, [r7, #27]
 8006404:	e0a9      	b.n	800655a <UART_SetConfig+0x282>
 8006406:	2308      	movs	r3, #8
 8006408:	76fb      	strb	r3, [r7, #27]
 800640a:	e0a6      	b.n	800655a <UART_SetConfig+0x282>
 800640c:	2310      	movs	r3, #16
 800640e:	76fb      	strb	r3, [r7, #27]
 8006410:	e0a3      	b.n	800655a <UART_SetConfig+0x282>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a6d      	ldr	r2, [pc, #436]	; (80065cc <UART_SetConfig+0x2f4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d120      	bne.n	800645e <UART_SetConfig+0x186>
 800641c:	4b69      	ldr	r3, [pc, #420]	; (80065c4 <UART_SetConfig+0x2ec>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006426:	2b30      	cmp	r3, #48	; 0x30
 8006428:	d013      	beq.n	8006452 <UART_SetConfig+0x17a>
 800642a:	2b30      	cmp	r3, #48	; 0x30
 800642c:	d814      	bhi.n	8006458 <UART_SetConfig+0x180>
 800642e:	2b20      	cmp	r3, #32
 8006430:	d009      	beq.n	8006446 <UART_SetConfig+0x16e>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d810      	bhi.n	8006458 <UART_SetConfig+0x180>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x168>
 800643a:	2b10      	cmp	r3, #16
 800643c:	d006      	beq.n	800644c <UART_SetConfig+0x174>
 800643e:	e00b      	b.n	8006458 <UART_SetConfig+0x180>
 8006440:	2300      	movs	r3, #0
 8006442:	76fb      	strb	r3, [r7, #27]
 8006444:	e089      	b.n	800655a <UART_SetConfig+0x282>
 8006446:	2302      	movs	r3, #2
 8006448:	76fb      	strb	r3, [r7, #27]
 800644a:	e086      	b.n	800655a <UART_SetConfig+0x282>
 800644c:	2304      	movs	r3, #4
 800644e:	76fb      	strb	r3, [r7, #27]
 8006450:	e083      	b.n	800655a <UART_SetConfig+0x282>
 8006452:	2308      	movs	r3, #8
 8006454:	76fb      	strb	r3, [r7, #27]
 8006456:	e080      	b.n	800655a <UART_SetConfig+0x282>
 8006458:	2310      	movs	r3, #16
 800645a:	76fb      	strb	r3, [r7, #27]
 800645c:	e07d      	b.n	800655a <UART_SetConfig+0x282>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a5b      	ldr	r2, [pc, #364]	; (80065d0 <UART_SetConfig+0x2f8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d120      	bne.n	80064aa <UART_SetConfig+0x1d2>
 8006468:	4b56      	ldr	r3, [pc, #344]	; (80065c4 <UART_SetConfig+0x2ec>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006472:	2bc0      	cmp	r3, #192	; 0xc0
 8006474:	d013      	beq.n	800649e <UART_SetConfig+0x1c6>
 8006476:	2bc0      	cmp	r3, #192	; 0xc0
 8006478:	d814      	bhi.n	80064a4 <UART_SetConfig+0x1cc>
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d009      	beq.n	8006492 <UART_SetConfig+0x1ba>
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d810      	bhi.n	80064a4 <UART_SetConfig+0x1cc>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <UART_SetConfig+0x1b4>
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d006      	beq.n	8006498 <UART_SetConfig+0x1c0>
 800648a:	e00b      	b.n	80064a4 <UART_SetConfig+0x1cc>
 800648c:	2300      	movs	r3, #0
 800648e:	76fb      	strb	r3, [r7, #27]
 8006490:	e063      	b.n	800655a <UART_SetConfig+0x282>
 8006492:	2302      	movs	r3, #2
 8006494:	76fb      	strb	r3, [r7, #27]
 8006496:	e060      	b.n	800655a <UART_SetConfig+0x282>
 8006498:	2304      	movs	r3, #4
 800649a:	76fb      	strb	r3, [r7, #27]
 800649c:	e05d      	b.n	800655a <UART_SetConfig+0x282>
 800649e:	2308      	movs	r3, #8
 80064a0:	76fb      	strb	r3, [r7, #27]
 80064a2:	e05a      	b.n	800655a <UART_SetConfig+0x282>
 80064a4:	2310      	movs	r3, #16
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e057      	b.n	800655a <UART_SetConfig+0x282>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a49      	ldr	r2, [pc, #292]	; (80065d4 <UART_SetConfig+0x2fc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d125      	bne.n	8006500 <UART_SetConfig+0x228>
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <UART_SetConfig+0x2ec>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c2:	d017      	beq.n	80064f4 <UART_SetConfig+0x21c>
 80064c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c8:	d817      	bhi.n	80064fa <UART_SetConfig+0x222>
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ce:	d00b      	beq.n	80064e8 <UART_SetConfig+0x210>
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d4:	d811      	bhi.n	80064fa <UART_SetConfig+0x222>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <UART_SetConfig+0x20a>
 80064da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064de:	d006      	beq.n	80064ee <UART_SetConfig+0x216>
 80064e0:	e00b      	b.n	80064fa <UART_SetConfig+0x222>
 80064e2:	2300      	movs	r3, #0
 80064e4:	76fb      	strb	r3, [r7, #27]
 80064e6:	e038      	b.n	800655a <UART_SetConfig+0x282>
 80064e8:	2302      	movs	r3, #2
 80064ea:	76fb      	strb	r3, [r7, #27]
 80064ec:	e035      	b.n	800655a <UART_SetConfig+0x282>
 80064ee:	2304      	movs	r3, #4
 80064f0:	76fb      	strb	r3, [r7, #27]
 80064f2:	e032      	b.n	800655a <UART_SetConfig+0x282>
 80064f4:	2308      	movs	r3, #8
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e02f      	b.n	800655a <UART_SetConfig+0x282>
 80064fa:	2310      	movs	r3, #16
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e02c      	b.n	800655a <UART_SetConfig+0x282>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <UART_SetConfig+0x2e4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d125      	bne.n	8006556 <UART_SetConfig+0x27e>
 800650a:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <UART_SetConfig+0x2ec>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006518:	d017      	beq.n	800654a <UART_SetConfig+0x272>
 800651a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800651e:	d817      	bhi.n	8006550 <UART_SetConfig+0x278>
 8006520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006524:	d00b      	beq.n	800653e <UART_SetConfig+0x266>
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652a:	d811      	bhi.n	8006550 <UART_SetConfig+0x278>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <UART_SetConfig+0x260>
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d006      	beq.n	8006544 <UART_SetConfig+0x26c>
 8006536:	e00b      	b.n	8006550 <UART_SetConfig+0x278>
 8006538:	2300      	movs	r3, #0
 800653a:	76fb      	strb	r3, [r7, #27]
 800653c:	e00d      	b.n	800655a <UART_SetConfig+0x282>
 800653e:	2302      	movs	r3, #2
 8006540:	76fb      	strb	r3, [r7, #27]
 8006542:	e00a      	b.n	800655a <UART_SetConfig+0x282>
 8006544:	2304      	movs	r3, #4
 8006546:	76fb      	strb	r3, [r7, #27]
 8006548:	e007      	b.n	800655a <UART_SetConfig+0x282>
 800654a:	2308      	movs	r3, #8
 800654c:	76fb      	strb	r3, [r7, #27]
 800654e:	e004      	b.n	800655a <UART_SetConfig+0x282>
 8006550:	2310      	movs	r3, #16
 8006552:	76fb      	strb	r3, [r7, #27]
 8006554:	e001      	b.n	800655a <UART_SetConfig+0x282>
 8006556:	2310      	movs	r3, #16
 8006558:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	; (80065bc <UART_SetConfig+0x2e4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	f040 8087 	bne.w	8006674 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006566:	7efb      	ldrb	r3, [r7, #27]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d837      	bhi.n	80065dc <UART_SetConfig+0x304>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x29c>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	08006599 	.word	0x08006599
 8006578:	080065dd 	.word	0x080065dd
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065dd 	.word	0x080065dd
 8006584:	080065a7 	.word	0x080065a7
 8006588:	080065dd 	.word	0x080065dd
 800658c:	080065dd 	.word	0x080065dd
 8006590:	080065dd 	.word	0x080065dd
 8006594:	080065af 	.word	0x080065af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fe fc56 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800659c:	6178      	str	r0, [r7, #20]
        break;
 800659e:	e022      	b.n	80065e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <UART_SetConfig+0x300>)
 80065a2:	617b      	str	r3, [r7, #20]
        break;
 80065a4:	e01f      	b.n	80065e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fe fbb7 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 80065aa:	6178      	str	r0, [r7, #20]
        break;
 80065ac:	e01b      	b.n	80065e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	617b      	str	r3, [r7, #20]
        break;
 80065b4:	e017      	b.n	80065e6 <UART_SetConfig+0x30e>
 80065b6:	bf00      	nop
 80065b8:	efff69f3 	.word	0xefff69f3
 80065bc:	40008000 	.word	0x40008000
 80065c0:	40013800 	.word	0x40013800
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40004400 	.word	0x40004400
 80065cc:	40004800 	.word	0x40004800
 80065d0:	40004c00 	.word	0x40004c00
 80065d4:	40005000 	.word	0x40005000
 80065d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	76bb      	strb	r3, [r7, #26]
        break;
 80065e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80f1 	beq.w	80067d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d305      	bcc.n	800660a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	429a      	cmp	r2, r3
 8006608:	d902      	bls.n	8006610 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	76bb      	strb	r3, [r7, #26]
 800660e:	e0df      	b.n	80067d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4618      	mov	r0, r3
 8006614:	f04f 0100 	mov.w	r1, #0
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	020b      	lsls	r3, r1, #8
 8006622:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006626:	0202      	lsls	r2, r0, #8
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	6849      	ldr	r1, [r1, #4]
 800662c:	0849      	lsrs	r1, r1, #1
 800662e:	4608      	mov	r0, r1
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	1814      	adds	r4, r2, r0
 8006636:	eb43 0501 	adc.w	r5, r3, r1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7fa fa5c 	bl	8000b04 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4613      	mov	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665a:	d308      	bcc.n	800666e <UART_SetConfig+0x396>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006662:	d204      	bcs.n	800666e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e0b0      	b.n	80067d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	76bb      	strb	r3, [r7, #26]
 8006672:	e0ad      	b.n	80067d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667c:	d15c      	bne.n	8006738 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800667e:	7efb      	ldrb	r3, [r7, #27]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d828      	bhi.n	80066d6 <UART_SetConfig+0x3fe>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x3b4>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c7 	.word	0x080066c7
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066d7 	.word	0x080066d7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b0:	f7fe fbca 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80066b4:	6178      	str	r0, [r7, #20]
        break;
 80066b6:	e013      	b.n	80066e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fe fbdc 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 80066bc:	6178      	str	r0, [r7, #20]
        break;
 80066be:	e00f      	b.n	80066e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <UART_SetConfig+0x510>)
 80066c2:	617b      	str	r3, [r7, #20]
        break;
 80066c4:	e00c      	b.n	80066e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe fb27 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 80066ca:	6178      	str	r0, [r7, #20]
        break;
 80066cc:	e008      	b.n	80066e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	617b      	str	r3, [r7, #20]
        break;
 80066d4:	e004      	b.n	80066e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	76bb      	strb	r3, [r7, #26]
        break;
 80066de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d074      	beq.n	80067d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	005a      	lsls	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	441a      	add	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d916      	bls.n	8006732 <UART_SetConfig+0x45a>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670a:	d212      	bcs.n	8006732 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f023 030f 	bic.w	r3, r3, #15
 8006714:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	b29a      	uxth	r2, r3
 8006722:	89fb      	ldrh	r3, [r7, #14]
 8006724:	4313      	orrs	r3, r2
 8006726:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	89fa      	ldrh	r2, [r7, #14]
 800672e:	60da      	str	r2, [r3, #12]
 8006730:	e04e      	b.n	80067d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	76bb      	strb	r3, [r7, #26]
 8006736:	e04b      	b.n	80067d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006738:	7efb      	ldrb	r3, [r7, #27]
 800673a:	2b08      	cmp	r3, #8
 800673c:	d827      	bhi.n	800678e <UART_SetConfig+0x4b6>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x46c>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006769 	.word	0x08006769
 8006748:	08006771 	.word	0x08006771
 800674c:	08006779 	.word	0x08006779
 8006750:	0800678f 	.word	0x0800678f
 8006754:	0800677f 	.word	0x0800677f
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800678f 	.word	0x0800678f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	08006787 	.word	0x08006787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe fb6e 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800676c:	6178      	str	r0, [r7, #20]
        break;
 800676e:	e013      	b.n	8006798 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7fe fb80 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 8006774:	6178      	str	r0, [r7, #20]
        break;
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <UART_SetConfig+0x510>)
 800677a:	617b      	str	r3, [r7, #20]
        break;
 800677c:	e00c      	b.n	8006798 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7fe facb 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8006782:	6178      	str	r0, [r7, #20]
        break;
 8006784:	e008      	b.n	8006798 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e004      	b.n	8006798 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	76bb      	strb	r3, [r7, #26]
        break;
 8006796:	bf00      	nop
    }

    if (pclk != 0U)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	085a      	lsrs	r2, r3, #1
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d908      	bls.n	80067cc <UART_SetConfig+0x4f4>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d204      	bcs.n	80067cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e001      	b.n	80067d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bdb0      	pop	{r4, r5, r7, pc}
 80067e6:	bf00      	nop
 80067e8:	00f42400 	.word	0x00f42400

080067ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ea:	d10a      	bne.n	8006902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  }
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af02      	add	r7, sp, #8
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006940:	f7fb f9d6 	bl	8001cf0 <HAL_GetTick>
 8006944:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10e      	bne.n	8006972 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f82d 	bl	80069c2 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e023      	b.n	80069ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d10e      	bne.n	800699e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f817 	bl	80069c2 <UART_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e00d      	b.n	80069ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d2:	e05e      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069da:	d05a      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069dc:	f7fb f988 	bl	8001cf0 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d302      	bcc.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11b      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e043      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02c      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a46:	d124      	bne.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a50:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a60:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0201 	bic.w	r2, r2, #1
 8006a70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e00f      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d091      	beq.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <__libc_init_array>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4d0d      	ldr	r5, [pc, #52]	; (8006af4 <__libc_init_array+0x38>)
 8006ac0:	4c0d      	ldr	r4, [pc, #52]	; (8006af8 <__libc_init_array+0x3c>)
 8006ac2:	1b64      	subs	r4, r4, r5
 8006ac4:	10a4      	asrs	r4, r4, #2
 8006ac6:	2600      	movs	r6, #0
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	d109      	bne.n	8006ae0 <__libc_init_array+0x24>
 8006acc:	4d0b      	ldr	r5, [pc, #44]	; (8006afc <__libc_init_array+0x40>)
 8006ace:	4c0c      	ldr	r4, [pc, #48]	; (8006b00 <__libc_init_array+0x44>)
 8006ad0:	f001 f858 	bl	8007b84 <_init>
 8006ad4:	1b64      	subs	r4, r4, r5
 8006ad6:	10a4      	asrs	r4, r4, #2
 8006ad8:	2600      	movs	r6, #0
 8006ada:	42a6      	cmp	r6, r4
 8006adc:	d105      	bne.n	8006aea <__libc_init_array+0x2e>
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae4:	4798      	blx	r3
 8006ae6:	3601      	adds	r6, #1
 8006ae8:	e7ee      	b.n	8006ac8 <__libc_init_array+0xc>
 8006aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aee:	4798      	blx	r3
 8006af0:	3601      	adds	r6, #1
 8006af2:	e7f2      	b.n	8006ada <__libc_init_array+0x1e>
 8006af4:	08007dc8 	.word	0x08007dc8
 8006af8:	08007dc8 	.word	0x08007dc8
 8006afc:	08007dc8 	.word	0x08007dc8
 8006b00:	08007dcc 	.word	0x08007dcc

08006b04 <memset>:
 8006b04:	4402      	add	r2, r0
 8006b06:	4603      	mov	r3, r0
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d100      	bne.n	8006b0e <memset+0xa>
 8006b0c:	4770      	bx	lr
 8006b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b12:	e7f9      	b.n	8006b08 <memset+0x4>
 8006b14:	0000      	movs	r0, r0
	...

08006b18 <sin>:
 8006b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b1a:	ec53 2b10 	vmov	r2, r3, d0
 8006b1e:	4826      	ldr	r0, [pc, #152]	; (8006bb8 <sin+0xa0>)
 8006b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b24:	4281      	cmp	r1, r0
 8006b26:	dc07      	bgt.n	8006b38 <sin+0x20>
 8006b28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006bb0 <sin+0x98>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f000 fe5b 	bl	80077e8 <__kernel_sin>
 8006b32:	ec51 0b10 	vmov	r0, r1, d0
 8006b36:	e007      	b.n	8006b48 <sin+0x30>
 8006b38:	4820      	ldr	r0, [pc, #128]	; (8006bbc <sin+0xa4>)
 8006b3a:	4281      	cmp	r1, r0
 8006b3c:	dd09      	ble.n	8006b52 <sin+0x3a>
 8006b3e:	ee10 0a10 	vmov	r0, s0
 8006b42:	4619      	mov	r1, r3
 8006b44:	f7f9 fb44 	bl	80001d0 <__aeabi_dsub>
 8006b48:	ec41 0b10 	vmov	d0, r0, r1
 8006b4c:	b005      	add	sp, #20
 8006b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b52:	4668      	mov	r0, sp
 8006b54:	f000 f834 	bl	8006bc0 <__ieee754_rem_pio2>
 8006b58:	f000 0003 	and.w	r0, r0, #3
 8006b5c:	2801      	cmp	r0, #1
 8006b5e:	d008      	beq.n	8006b72 <sin+0x5a>
 8006b60:	2802      	cmp	r0, #2
 8006b62:	d00d      	beq.n	8006b80 <sin+0x68>
 8006b64:	b9d0      	cbnz	r0, 8006b9c <sin+0x84>
 8006b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b6a:	ed9d 0b00 	vldr	d0, [sp]
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7dd      	b.n	8006b2e <sin+0x16>
 8006b72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b76:	ed9d 0b00 	vldr	d0, [sp]
 8006b7a:	f000 fa2d 	bl	8006fd8 <__kernel_cos>
 8006b7e:	e7d8      	b.n	8006b32 <sin+0x1a>
 8006b80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b84:	ed9d 0b00 	vldr	d0, [sp]
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f000 fe2d 	bl	80077e8 <__kernel_sin>
 8006b8e:	ec53 2b10 	vmov	r2, r3, d0
 8006b92:	ee10 0a10 	vmov	r0, s0
 8006b96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b9a:	e7d5      	b.n	8006b48 <sin+0x30>
 8006b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ba0:	ed9d 0b00 	vldr	d0, [sp]
 8006ba4:	f000 fa18 	bl	8006fd8 <__kernel_cos>
 8006ba8:	e7f1      	b.n	8006b8e <sin+0x76>
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
	...
 8006bb8:	3fe921fb 	.word	0x3fe921fb
 8006bbc:	7fefffff 	.word	0x7fefffff

08006bc0 <__ieee754_rem_pio2>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ed2d 8b02 	vpush	{d8}
 8006bc8:	ec55 4b10 	vmov	r4, r5, d0
 8006bcc:	4bca      	ldr	r3, [pc, #808]	; (8006ef8 <__ieee754_rem_pio2+0x338>)
 8006bce:	b08b      	sub	sp, #44	; 0x2c
 8006bd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006bd4:	4598      	cmp	r8, r3
 8006bd6:	4682      	mov	sl, r0
 8006bd8:	9502      	str	r5, [sp, #8]
 8006bda:	dc08      	bgt.n	8006bee <__ieee754_rem_pio2+0x2e>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2300      	movs	r3, #0
 8006be0:	ed80 0b00 	vstr	d0, [r0]
 8006be4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006be8:	f04f 0b00 	mov.w	fp, #0
 8006bec:	e028      	b.n	8006c40 <__ieee754_rem_pio2+0x80>
 8006bee:	4bc3      	ldr	r3, [pc, #780]	; (8006efc <__ieee754_rem_pio2+0x33c>)
 8006bf0:	4598      	cmp	r8, r3
 8006bf2:	dc78      	bgt.n	8006ce6 <__ieee754_rem_pio2+0x126>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	4ec2      	ldr	r6, [pc, #776]	; (8006f00 <__ieee754_rem_pio2+0x340>)
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	ee10 0a10 	vmov	r0, s0
 8006bfe:	a3b0      	add	r3, pc, #704	; (adr r3, 8006ec0 <__ieee754_rem_pio2+0x300>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	4629      	mov	r1, r5
 8006c06:	dd39      	ble.n	8006c7c <__ieee754_rem_pio2+0xbc>
 8006c08:	f7f9 fae2 	bl	80001d0 <__aeabi_dsub>
 8006c0c:	45b0      	cmp	r8, r6
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	d01b      	beq.n	8006c4c <__ieee754_rem_pio2+0x8c>
 8006c14:	a3ac      	add	r3, pc, #688	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x308>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fad9 	bl	80001d0 <__aeabi_dsub>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	e9ca 2300 	strd	r2, r3, [sl]
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fad1 	bl	80001d0 <__aeabi_dsub>
 8006c2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x308>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f7f9 facc 	bl	80001d0 <__aeabi_dsub>
 8006c38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c3c:	f04f 0b01 	mov.w	fp, #1
 8006c40:	4658      	mov	r0, fp
 8006c42:	b00b      	add	sp, #44	; 0x2c
 8006c44:	ecbd 8b02 	vpop	{d8}
 8006c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x310>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 fabd 	bl	80001d0 <__aeabi_dsub>
 8006c56:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x318>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	f7f9 fab6 	bl	80001d0 <__aeabi_dsub>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9ca 2300 	strd	r2, r3, [sl]
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7f9 faae 	bl	80001d0 <__aeabi_dsub>
 8006c74:	a398      	add	r3, pc, #608	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x318>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	e7db      	b.n	8006c34 <__ieee754_rem_pio2+0x74>
 8006c7c:	f7f9 faaa 	bl	80001d4 <__adddf3>
 8006c80:	45b0      	cmp	r8, r6
 8006c82:	4604      	mov	r4, r0
 8006c84:	460d      	mov	r5, r1
 8006c86:	d016      	beq.n	8006cb6 <__ieee754_rem_pio2+0xf6>
 8006c88:	a38f      	add	r3, pc, #572	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x308>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 faa1 	bl	80001d4 <__adddf3>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	e9ca 2300 	strd	r2, r3, [sl]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 fa97 	bl	80001d0 <__aeabi_dsub>
 8006ca2:	a389      	add	r3, pc, #548	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x308>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fa94 	bl	80001d4 <__adddf3>
 8006cac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006cb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cb4:	e7c4      	b.n	8006c40 <__ieee754_rem_pio2+0x80>
 8006cb6:	a386      	add	r3, pc, #536	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x310>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7f9 fa8a 	bl	80001d4 <__adddf3>
 8006cc0:	a385      	add	r3, pc, #532	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x318>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	f7f9 fa83 	bl	80001d4 <__adddf3>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	e9ca 2300 	strd	r2, r3, [sl]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 fa79 	bl	80001d0 <__aeabi_dsub>
 8006cde:	a37e      	add	r3, pc, #504	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x318>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	e7e0      	b.n	8006ca8 <__ieee754_rem_pio2+0xe8>
 8006ce6:	4b87      	ldr	r3, [pc, #540]	; (8006f04 <__ieee754_rem_pio2+0x344>)
 8006ce8:	4598      	cmp	r8, r3
 8006cea:	f300 80d9 	bgt.w	8006ea0 <__ieee754_rem_pio2+0x2e0>
 8006cee:	f000 fe39 	bl	8007964 <fabs>
 8006cf2:	ec55 4b10 	vmov	r4, r5, d0
 8006cf6:	ee10 0a10 	vmov	r0, s0
 8006cfa:	a379      	add	r3, pc, #484	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x320>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fc1d 	bl	8000540 <__aeabi_dmul>
 8006d06:	4b80      	ldr	r3, [pc, #512]	; (8006f08 <__ieee754_rem_pio2+0x348>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fa63 	bl	80001d4 <__adddf3>
 8006d0e:	f7f9 feb1 	bl	8000a74 <__aeabi_d2iz>
 8006d12:	4683      	mov	fp, r0
 8006d14:	f7f9 fbaa 	bl	800046c <__aeabi_i2d>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	ec43 2b18 	vmov	d8, r2, r3
 8006d20:	a367      	add	r3, pc, #412	; (adr r3, 8006ec0 <__ieee754_rem_pio2+0x300>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fc0b 	bl	8000540 <__aeabi_dmul>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fa4d 	bl	80001d0 <__aeabi_dsub>
 8006d36:	a364      	add	r3, pc, #400	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x308>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460f      	mov	r7, r1
 8006d40:	ec51 0b18 	vmov	r0, r1, d8
 8006d44:	f7f9 fbfc 	bl	8000540 <__aeabi_dmul>
 8006d48:	f1bb 0f1f 	cmp.w	fp, #31
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	dc0d      	bgt.n	8006d6e <__ieee754_rem_pio2+0x1ae>
 8006d52:	4b6e      	ldr	r3, [pc, #440]	; (8006f0c <__ieee754_rem_pio2+0x34c>)
 8006d54:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	4543      	cmp	r3, r8
 8006d5e:	d006      	beq.n	8006d6e <__ieee754_rem_pio2+0x1ae>
 8006d60:	4622      	mov	r2, r4
 8006d62:	462b      	mov	r3, r5
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 fa32 	bl	80001d0 <__aeabi_dsub>
 8006d6c:	e00f      	b.n	8006d8e <__ieee754_rem_pio2+0x1ce>
 8006d6e:	462b      	mov	r3, r5
 8006d70:	4622      	mov	r2, r4
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fa2b 	bl	80001d0 <__aeabi_dsub>
 8006d7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d84:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006d88:	f1b8 0f10 	cmp.w	r8, #16
 8006d8c:	dc02      	bgt.n	8006d94 <__ieee754_rem_pio2+0x1d4>
 8006d8e:	e9ca 0100 	strd	r0, r1, [sl]
 8006d92:	e039      	b.n	8006e08 <__ieee754_rem_pio2+0x248>
 8006d94:	a34e      	add	r3, pc, #312	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x310>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	ec51 0b18 	vmov	r0, r1, d8
 8006d9e:	f7f9 fbcf 	bl	8000540 <__aeabi_dmul>
 8006da2:	4604      	mov	r4, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fa0f 	bl	80001d0 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	f7f9 fa07 	bl	80001d0 <__aeabi_dsub>
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	f7f9 fa03 	bl	80001d0 <__aeabi_dsub>
 8006dca:	a343      	add	r3, pc, #268	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x318>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	ec51 0b18 	vmov	r0, r1, d8
 8006dd8:	f7f9 fbb2 	bl	8000540 <__aeabi_dmul>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	f7f9 f9f6 	bl	80001d0 <__aeabi_dsub>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 f9ee 	bl	80001d0 <__aeabi_dsub>
 8006df4:	9a03      	ldr	r2, [sp, #12]
 8006df6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b31      	cmp	r3, #49	; 0x31
 8006dfe:	dc24      	bgt.n	8006e4a <__ieee754_rem_pio2+0x28a>
 8006e00:	e9ca 0100 	strd	r0, r1, [sl]
 8006e04:	4646      	mov	r6, r8
 8006e06:	464f      	mov	r7, r9
 8006e08:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4642      	mov	r2, r8
 8006e10:	464b      	mov	r3, r9
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 f9dc 	bl	80001d0 <__aeabi_dsub>
 8006e18:	462b      	mov	r3, r5
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	f7f9 f9d8 	bl	80001d0 <__aeabi_dsub>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e28:	f6bf af0a 	bge.w	8006c40 <__ieee754_rem_pio2+0x80>
 8006e2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e30:	f8ca 3004 	str.w	r3, [sl, #4]
 8006e34:	f8ca 8000 	str.w	r8, [sl]
 8006e38:	f8ca 0008 	str.w	r0, [sl, #8]
 8006e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e40:	f8ca 300c 	str.w	r3, [sl, #12]
 8006e44:	f1cb 0b00 	rsb	fp, fp, #0
 8006e48:	e6fa      	b.n	8006c40 <__ieee754_rem_pio2+0x80>
 8006e4a:	a327      	add	r3, pc, #156	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x328>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	ec51 0b18 	vmov	r0, r1, d8
 8006e54:	f7f9 fb74 	bl	8000540 <__aeabi_dmul>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 f9b4 	bl	80001d0 <__aeabi_dsub>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	460f      	mov	r7, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 f9ac 	bl	80001d0 <__aeabi_dsub>
 8006e78:	4622      	mov	r2, r4
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	f7f9 f9a8 	bl	80001d0 <__aeabi_dsub>
 8006e80:	a31b      	add	r3, pc, #108	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x330>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	ec51 0b18 	vmov	r0, r1, d8
 8006e8e:	f7f9 fb57 	bl	8000540 <__aeabi_dmul>
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	f7f9 f99b 	bl	80001d0 <__aeabi_dsub>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	e75f      	b.n	8006d60 <__ieee754_rem_pio2+0x1a0>
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <__ieee754_rem_pio2+0x350>)
 8006ea2:	4598      	cmp	r8, r3
 8006ea4:	dd36      	ble.n	8006f14 <__ieee754_rem_pio2+0x354>
 8006ea6:	ee10 2a10 	vmov	r2, s0
 8006eaa:	462b      	mov	r3, r5
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7f9 f98e 	bl	80001d0 <__aeabi_dsub>
 8006eb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006eb8:	e9ca 0100 	strd	r0, r1, [sl]
 8006ebc:	e694      	b.n	8006be8 <__ieee754_rem_pio2+0x28>
 8006ebe:	bf00      	nop
 8006ec0:	54400000 	.word	0x54400000
 8006ec4:	3ff921fb 	.word	0x3ff921fb
 8006ec8:	1a626331 	.word	0x1a626331
 8006ecc:	3dd0b461 	.word	0x3dd0b461
 8006ed0:	1a600000 	.word	0x1a600000
 8006ed4:	3dd0b461 	.word	0x3dd0b461
 8006ed8:	2e037073 	.word	0x2e037073
 8006edc:	3ba3198a 	.word	0x3ba3198a
 8006ee0:	6dc9c883 	.word	0x6dc9c883
 8006ee4:	3fe45f30 	.word	0x3fe45f30
 8006ee8:	2e000000 	.word	0x2e000000
 8006eec:	3ba3198a 	.word	0x3ba3198a
 8006ef0:	252049c1 	.word	0x252049c1
 8006ef4:	397b839a 	.word	0x397b839a
 8006ef8:	3fe921fb 	.word	0x3fe921fb
 8006efc:	4002d97b 	.word	0x4002d97b
 8006f00:	3ff921fb 	.word	0x3ff921fb
 8006f04:	413921fb 	.word	0x413921fb
 8006f08:	3fe00000 	.word	0x3fe00000
 8006f0c:	08007be8 	.word	0x08007be8
 8006f10:	7fefffff 	.word	0x7fefffff
 8006f14:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006f18:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006f1c:	ee10 0a10 	vmov	r0, s0
 8006f20:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006f24:	ee10 6a10 	vmov	r6, s0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	f7f9 fda3 	bl	8000a74 <__aeabi_d2iz>
 8006f2e:	f7f9 fa9d 	bl	800046c <__aeabi_i2d>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4630      	mov	r0, r6
 8006f38:	4639      	mov	r1, r7
 8006f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f3e:	f7f9 f947 	bl	80001d0 <__aeabi_dsub>
 8006f42:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <__ieee754_rem_pio2+0x40c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	f7f9 fafb 	bl	8000540 <__aeabi_dmul>
 8006f4a:	460f      	mov	r7, r1
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	f7f9 fd91 	bl	8000a74 <__aeabi_d2iz>
 8006f52:	f7f9 fa8b 	bl	800046c <__aeabi_i2d>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f62:	f7f9 f935 	bl	80001d0 <__aeabi_dsub>
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <__ieee754_rem_pio2+0x40c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f7f9 fae9 	bl	8000540 <__aeabi_dmul>
 8006f6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f72:	ad04      	add	r5, sp, #16
 8006f74:	f04f 0803 	mov.w	r8, #3
 8006f78:	46a9      	mov	r9, r5
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	2700      	movs	r7, #0
 8006f7e:	4632      	mov	r2, r6
 8006f80:	463b      	mov	r3, r7
 8006f82:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006f86:	46c3      	mov	fp, r8
 8006f88:	3d08      	subs	r5, #8
 8006f8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f8e:	f7f9 fd3f 	bl	8000a10 <__aeabi_dcmpeq>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1f3      	bne.n	8006f7e <__ieee754_rem_pio2+0x3be>
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <__ieee754_rem_pio2+0x410>)
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	465b      	mov	r3, fp
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	4648      	mov	r0, r9
 8006fa6:	f000 f8df 	bl	8007168 <__kernel_rem_pio2>
 8006faa:	9b02      	ldr	r3, [sp, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	4683      	mov	fp, r0
 8006fb0:	f6bf ae46 	bge.w	8006c40 <__ieee754_rem_pio2+0x80>
 8006fb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006fb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	f8ca 3004 	str.w	r3, [sl, #4]
 8006fc0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006fc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	e73a      	b.n	8006e40 <__ieee754_rem_pio2+0x280>
 8006fca:	bf00      	nop
 8006fcc:	41700000 	.word	0x41700000
 8006fd0:	08007c68 	.word	0x08007c68
 8006fd4:	00000000 	.word	0x00000000

08006fd8 <__kernel_cos>:
 8006fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ec57 6b10 	vmov	r6, r7, d0
 8006fe0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006fe4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006fe8:	ed8d 1b00 	vstr	d1, [sp]
 8006fec:	da07      	bge.n	8006ffe <__kernel_cos+0x26>
 8006fee:	ee10 0a10 	vmov	r0, s0
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fd3e 	bl	8000a74 <__aeabi_d2iz>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f000 8088 	beq.w	800710e <__kernel_cos+0x136>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	4630      	mov	r0, r6
 8007004:	4639      	mov	r1, r7
 8007006:	f7f9 fa9b 	bl	8000540 <__aeabi_dmul>
 800700a:	4b51      	ldr	r3, [pc, #324]	; (8007150 <__kernel_cos+0x178>)
 800700c:	2200      	movs	r2, #0
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	f7f9 fa95 	bl	8000540 <__aeabi_dmul>
 8007016:	a340      	add	r3, pc, #256	; (adr r3, 8007118 <__kernel_cos+0x140>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4682      	mov	sl, r0
 800701e:	468b      	mov	fp, r1
 8007020:	4620      	mov	r0, r4
 8007022:	4629      	mov	r1, r5
 8007024:	f7f9 fa8c 	bl	8000540 <__aeabi_dmul>
 8007028:	a33d      	add	r3, pc, #244	; (adr r3, 8007120 <__kernel_cos+0x148>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f8d1 	bl	80001d4 <__adddf3>
 8007032:	4622      	mov	r2, r4
 8007034:	462b      	mov	r3, r5
 8007036:	f7f9 fa83 	bl	8000540 <__aeabi_dmul>
 800703a:	a33b      	add	r3, pc, #236	; (adr r3, 8007128 <__kernel_cos+0x150>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f8c6 	bl	80001d0 <__aeabi_dsub>
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	f7f9 fa7a 	bl	8000540 <__aeabi_dmul>
 800704c:	a338      	add	r3, pc, #224	; (adr r3, 8007130 <__kernel_cos+0x158>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f8bf 	bl	80001d4 <__adddf3>
 8007056:	4622      	mov	r2, r4
 8007058:	462b      	mov	r3, r5
 800705a:	f7f9 fa71 	bl	8000540 <__aeabi_dmul>
 800705e:	a336      	add	r3, pc, #216	; (adr r3, 8007138 <__kernel_cos+0x160>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f8b4 	bl	80001d0 <__aeabi_dsub>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fa68 	bl	8000540 <__aeabi_dmul>
 8007070:	a333      	add	r3, pc, #204	; (adr r3, 8007140 <__kernel_cos+0x168>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 f8ad 	bl	80001d4 <__adddf3>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	f7f9 fa5f 	bl	8000540 <__aeabi_dmul>
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	f7f9 fa5b 	bl	8000540 <__aeabi_dmul>
 800708a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800708e:	4604      	mov	r4, r0
 8007090:	460d      	mov	r5, r1
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f7f9 fa53 	bl	8000540 <__aeabi_dmul>
 800709a:	460b      	mov	r3, r1
 800709c:	4602      	mov	r2, r0
 800709e:	4629      	mov	r1, r5
 80070a0:	4620      	mov	r0, r4
 80070a2:	f7f9 f895 	bl	80001d0 <__aeabi_dsub>
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <__kernel_cos+0x17c>)
 80070a8:	4598      	cmp	r8, r3
 80070aa:	4606      	mov	r6, r0
 80070ac:	460f      	mov	r7, r1
 80070ae:	dc10      	bgt.n	80070d2 <__kernel_cos+0xfa>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4650      	mov	r0, sl
 80070b6:	4659      	mov	r1, fp
 80070b8:	f7f9 f88a 	bl	80001d0 <__aeabi_dsub>
 80070bc:	460b      	mov	r3, r1
 80070be:	4926      	ldr	r1, [pc, #152]	; (8007158 <__kernel_cos+0x180>)
 80070c0:	4602      	mov	r2, r0
 80070c2:	2000      	movs	r0, #0
 80070c4:	f7f9 f884 	bl	80001d0 <__aeabi_dsub>
 80070c8:	ec41 0b10 	vmov	d0, r0, r1
 80070cc:	b003      	add	sp, #12
 80070ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d2:	4b22      	ldr	r3, [pc, #136]	; (800715c <__kernel_cos+0x184>)
 80070d4:	4920      	ldr	r1, [pc, #128]	; (8007158 <__kernel_cos+0x180>)
 80070d6:	4598      	cmp	r8, r3
 80070d8:	bfcc      	ite	gt
 80070da:	4d21      	ldrgt	r5, [pc, #132]	; (8007160 <__kernel_cos+0x188>)
 80070dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80070e0:	2400      	movs	r4, #0
 80070e2:	4622      	mov	r2, r4
 80070e4:	462b      	mov	r3, r5
 80070e6:	2000      	movs	r0, #0
 80070e8:	f7f9 f872 	bl	80001d0 <__aeabi_dsub>
 80070ec:	4622      	mov	r2, r4
 80070ee:	4680      	mov	r8, r0
 80070f0:	4689      	mov	r9, r1
 80070f2:	462b      	mov	r3, r5
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	f7f9 f86a 	bl	80001d0 <__aeabi_dsub>
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	f7f9 f866 	bl	80001d0 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4640      	mov	r0, r8
 800710a:	4649      	mov	r1, r9
 800710c:	e7da      	b.n	80070c4 <__kernel_cos+0xec>
 800710e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007148 <__kernel_cos+0x170>
 8007112:	e7db      	b.n	80070cc <__kernel_cos+0xf4>
 8007114:	f3af 8000 	nop.w
 8007118:	be8838d4 	.word	0xbe8838d4
 800711c:	bda8fae9 	.word	0xbda8fae9
 8007120:	bdb4b1c4 	.word	0xbdb4b1c4
 8007124:	3e21ee9e 	.word	0x3e21ee9e
 8007128:	809c52ad 	.word	0x809c52ad
 800712c:	3e927e4f 	.word	0x3e927e4f
 8007130:	19cb1590 	.word	0x19cb1590
 8007134:	3efa01a0 	.word	0x3efa01a0
 8007138:	16c15177 	.word	0x16c15177
 800713c:	3f56c16c 	.word	0x3f56c16c
 8007140:	5555554c 	.word	0x5555554c
 8007144:	3fa55555 	.word	0x3fa55555
 8007148:	00000000 	.word	0x00000000
 800714c:	3ff00000 	.word	0x3ff00000
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	3fd33332 	.word	0x3fd33332
 8007158:	3ff00000 	.word	0x3ff00000
 800715c:	3fe90000 	.word	0x3fe90000
 8007160:	3fd20000 	.word	0x3fd20000
 8007164:	00000000 	.word	0x00000000

08007168 <__kernel_rem_pio2>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	ed2d 8b02 	vpush	{d8}
 8007170:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007174:	f112 0f14 	cmn.w	r2, #20
 8007178:	9308      	str	r3, [sp, #32]
 800717a:	9101      	str	r1, [sp, #4]
 800717c:	4bc6      	ldr	r3, [pc, #792]	; (8007498 <__kernel_rem_pio2+0x330>)
 800717e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007180:	9009      	str	r0, [sp, #36]	; 0x24
 8007182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800718e:	bfa8      	it	ge
 8007190:	1ed4      	subge	r4, r2, #3
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	bfb2      	itee	lt
 8007196:	2400      	movlt	r4, #0
 8007198:	2318      	movge	r3, #24
 800719a:	fb94 f4f3 	sdivge	r4, r4, r3
 800719e:	f06f 0317 	mvn.w	r3, #23
 80071a2:	fb04 3303 	mla	r3, r4, r3, r3
 80071a6:	eb03 0a02 	add.w	sl, r3, r2
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	9a06      	ldr	r2, [sp, #24]
 80071ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007488 <__kernel_rem_pio2+0x320>
 80071b2:	eb03 0802 	add.w	r8, r3, r2
 80071b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80071b8:	1aa7      	subs	r7, r4, r2
 80071ba:	ae20      	add	r6, sp, #128	; 0x80
 80071bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80071c0:	2500      	movs	r5, #0
 80071c2:	4545      	cmp	r5, r8
 80071c4:	dd18      	ble.n	80071f8 <__kernel_rem_pio2+0x90>
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80071cc:	aa20      	add	r2, sp, #128	; 0x80
 80071ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007488 <__kernel_rem_pio2+0x320>
 80071d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80071d6:	f1c3 0301 	rsb	r3, r3, #1
 80071da:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	9a04      	ldr	r2, [sp, #16]
 80071e4:	4443      	add	r3, r8
 80071e6:	429a      	cmp	r2, r3
 80071e8:	db2f      	blt.n	800724a <__kernel_rem_pio2+0xe2>
 80071ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80071ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80071f2:	462f      	mov	r7, r5
 80071f4:	2600      	movs	r6, #0
 80071f6:	e01b      	b.n	8007230 <__kernel_rem_pio2+0xc8>
 80071f8:	42ef      	cmn	r7, r5
 80071fa:	d407      	bmi.n	800720c <__kernel_rem_pio2+0xa4>
 80071fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007200:	f7f9 f934 	bl	800046c <__aeabi_i2d>
 8007204:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007208:	3501      	adds	r5, #1
 800720a:	e7da      	b.n	80071c2 <__kernel_rem_pio2+0x5a>
 800720c:	ec51 0b18 	vmov	r0, r1, d8
 8007210:	e7f8      	b.n	8007204 <__kernel_rem_pio2+0x9c>
 8007212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007216:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800721a:	f7f9 f991 	bl	8000540 <__aeabi_dmul>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007226:	f7f8 ffd5 	bl	80001d4 <__adddf3>
 800722a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800722e:	3601      	adds	r6, #1
 8007230:	9b06      	ldr	r3, [sp, #24]
 8007232:	429e      	cmp	r6, r3
 8007234:	f1a7 0708 	sub.w	r7, r7, #8
 8007238:	ddeb      	ble.n	8007212 <__kernel_rem_pio2+0xaa>
 800723a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800723e:	3508      	adds	r5, #8
 8007240:	ecab 7b02 	vstmia	fp!, {d7}
 8007244:	f108 0801 	add.w	r8, r8, #1
 8007248:	e7ca      	b.n	80071e0 <__kernel_rem_pio2+0x78>
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	aa0c      	add	r2, sp, #48	; 0x30
 800724e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007252:	930b      	str	r3, [sp, #44]	; 0x2c
 8007254:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007256:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800725a:	9c04      	ldr	r4, [sp, #16]
 800725c:	930a      	str	r3, [sp, #40]	; 0x28
 800725e:	ab98      	add	r3, sp, #608	; 0x260
 8007260:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007264:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007268:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800726c:	f8cd b008 	str.w	fp, [sp, #8]
 8007270:	4625      	mov	r5, r4
 8007272:	2d00      	cmp	r5, #0
 8007274:	dc78      	bgt.n	8007368 <__kernel_rem_pio2+0x200>
 8007276:	ec47 6b10 	vmov	d0, r6, r7
 800727a:	4650      	mov	r0, sl
 800727c:	f000 fbfc 	bl	8007a78 <scalbn>
 8007280:	ec57 6b10 	vmov	r6, r7, d0
 8007284:	2200      	movs	r2, #0
 8007286:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800728a:	ee10 0a10 	vmov	r0, s0
 800728e:	4639      	mov	r1, r7
 8007290:	f7f9 f956 	bl	8000540 <__aeabi_dmul>
 8007294:	ec41 0b10 	vmov	d0, r0, r1
 8007298:	f000 fb6e 	bl	8007978 <floor>
 800729c:	4b7f      	ldr	r3, [pc, #508]	; (800749c <__kernel_rem_pio2+0x334>)
 800729e:	ec51 0b10 	vmov	r0, r1, d0
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f9 f94c 	bl	8000540 <__aeabi_dmul>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4630      	mov	r0, r6
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f8 ff8e 	bl	80001d0 <__aeabi_dsub>
 80072b4:	460f      	mov	r7, r1
 80072b6:	4606      	mov	r6, r0
 80072b8:	f7f9 fbdc 	bl	8000a74 <__aeabi_d2iz>
 80072bc:	9007      	str	r0, [sp, #28]
 80072be:	f7f9 f8d5 	bl	800046c <__aeabi_i2d>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f8 ff81 	bl	80001d0 <__aeabi_dsub>
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	dd70      	ble.n	80073ba <__kernel_rem_pio2+0x252>
 80072d8:	1e62      	subs	r2, r4, #1
 80072da:	ab0c      	add	r3, sp, #48	; 0x30
 80072dc:	9d07      	ldr	r5, [sp, #28]
 80072de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80072e2:	f1ca 0118 	rsb	r1, sl, #24
 80072e6:	fa40 f301 	asr.w	r3, r0, r1
 80072ea:	441d      	add	r5, r3
 80072ec:	408b      	lsls	r3, r1
 80072ee:	1ac0      	subs	r0, r0, r3
 80072f0:	ab0c      	add	r3, sp, #48	; 0x30
 80072f2:	9507      	str	r5, [sp, #28]
 80072f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80072f8:	f1ca 0317 	rsb	r3, sl, #23
 80072fc:	fa40 f303 	asr.w	r3, r0, r3
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd66      	ble.n	80073d6 <__kernel_rem_pio2+0x26e>
 8007308:	9b07      	ldr	r3, [sp, #28]
 800730a:	2200      	movs	r2, #0
 800730c:	3301      	adds	r3, #1
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	4615      	mov	r5, r2
 8007312:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007316:	4294      	cmp	r4, r2
 8007318:	f300 8099 	bgt.w	800744e <__kernel_rem_pio2+0x2e6>
 800731c:	f1ba 0f00 	cmp.w	sl, #0
 8007320:	dd07      	ble.n	8007332 <__kernel_rem_pio2+0x1ca>
 8007322:	f1ba 0f01 	cmp.w	sl, #1
 8007326:	f000 80a5 	beq.w	8007474 <__kernel_rem_pio2+0x30c>
 800732a:	f1ba 0f02 	cmp.w	sl, #2
 800732e:	f000 80c1 	beq.w	80074b4 <__kernel_rem_pio2+0x34c>
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d14e      	bne.n	80073d6 <__kernel_rem_pio2+0x26e>
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	4958      	ldr	r1, [pc, #352]	; (80074a0 <__kernel_rem_pio2+0x338>)
 800733e:	2000      	movs	r0, #0
 8007340:	f7f8 ff46 	bl	80001d0 <__aeabi_dsub>
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	2d00      	cmp	r5, #0
 800734a:	d044      	beq.n	80073d6 <__kernel_rem_pio2+0x26e>
 800734c:	4650      	mov	r0, sl
 800734e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007490 <__kernel_rem_pio2+0x328>
 8007352:	f000 fb91 	bl	8007a78 <scalbn>
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	ec53 2b10 	vmov	r2, r3, d0
 800735e:	f7f8 ff37 	bl	80001d0 <__aeabi_dsub>
 8007362:	4606      	mov	r6, r0
 8007364:	460f      	mov	r7, r1
 8007366:	e036      	b.n	80073d6 <__kernel_rem_pio2+0x26e>
 8007368:	4b4e      	ldr	r3, [pc, #312]	; (80074a4 <__kernel_rem_pio2+0x33c>)
 800736a:	2200      	movs	r2, #0
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f9 f8e6 	bl	8000540 <__aeabi_dmul>
 8007374:	f7f9 fb7e 	bl	8000a74 <__aeabi_d2iz>
 8007378:	f7f9 f878 	bl	800046c <__aeabi_i2d>
 800737c:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <__kernel_rem_pio2+0x340>)
 800737e:	2200      	movs	r2, #0
 8007380:	4680      	mov	r8, r0
 8007382:	4689      	mov	r9, r1
 8007384:	f7f9 f8dc 	bl	8000540 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f7f8 ff1e 	bl	80001d0 <__aeabi_dsub>
 8007394:	f7f9 fb6e 	bl	8000a74 <__aeabi_d2iz>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	f843 0b04 	str.w	r0, [r3], #4
 800739e:	3d01      	subs	r5, #1
 80073a0:	9302      	str	r3, [sp, #8]
 80073a2:	ab70      	add	r3, sp, #448	; 0x1c0
 80073a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f8 ff10 	bl	80001d4 <__adddf3>
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	e75b      	b.n	8007272 <__kernel_rem_pio2+0x10a>
 80073ba:	d105      	bne.n	80073c8 <__kernel_rem_pio2+0x260>
 80073bc:	1e63      	subs	r3, r4, #1
 80073be:	aa0c      	add	r2, sp, #48	; 0x30
 80073c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80073c4:	15c3      	asrs	r3, r0, #23
 80073c6:	e79b      	b.n	8007300 <__kernel_rem_pio2+0x198>
 80073c8:	4b38      	ldr	r3, [pc, #224]	; (80074ac <__kernel_rem_pio2+0x344>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7f9 fb3e 	bl	8000a4c <__aeabi_dcmpge>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d139      	bne.n	8007448 <__kernel_rem_pio2+0x2e0>
 80073d4:	9002      	str	r0, [sp, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fb17 	bl	8000a10 <__aeabi_dcmpeq>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f000 80b4 	beq.w	8007550 <__kernel_rem_pio2+0x3e8>
 80073e8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80073ec:	465b      	mov	r3, fp
 80073ee:	2200      	movs	r2, #0
 80073f0:	9904      	ldr	r1, [sp, #16]
 80073f2:	428b      	cmp	r3, r1
 80073f4:	da65      	bge.n	80074c2 <__kernel_rem_pio2+0x35a>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d07b      	beq.n	80074f2 <__kernel_rem_pio2+0x38a>
 80073fa:	ab0c      	add	r3, sp, #48	; 0x30
 80073fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8007400:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a0 	beq.w	800754a <__kernel_rem_pio2+0x3e2>
 800740a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007490 <__kernel_rem_pio2+0x328>
 800740e:	4650      	mov	r0, sl
 8007410:	f000 fb32 	bl	8007a78 <scalbn>
 8007414:	4f23      	ldr	r7, [pc, #140]	; (80074a4 <__kernel_rem_pio2+0x33c>)
 8007416:	ec55 4b10 	vmov	r4, r5, d0
 800741a:	46d8      	mov	r8, fp
 800741c:	2600      	movs	r6, #0
 800741e:	f1b8 0f00 	cmp.w	r8, #0
 8007422:	f280 80cf 	bge.w	80075c4 <__kernel_rem_pio2+0x45c>
 8007426:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007488 <__kernel_rem_pio2+0x320>
 800742a:	465f      	mov	r7, fp
 800742c:	f04f 0800 	mov.w	r8, #0
 8007430:	2f00      	cmp	r7, #0
 8007432:	f2c0 80fd 	blt.w	8007630 <__kernel_rem_pio2+0x4c8>
 8007436:	ab70      	add	r3, sp, #448	; 0x1c0
 8007438:	f8df a074 	ldr.w	sl, [pc, #116]	; 80074b0 <__kernel_rem_pio2+0x348>
 800743c:	ec55 4b18 	vmov	r4, r5, d8
 8007440:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007444:	2600      	movs	r6, #0
 8007446:	e0e5      	b.n	8007614 <__kernel_rem_pio2+0x4ac>
 8007448:	2302      	movs	r3, #2
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	e75c      	b.n	8007308 <__kernel_rem_pio2+0x1a0>
 800744e:	f8db 3000 	ldr.w	r3, [fp]
 8007452:	b955      	cbnz	r5, 800746a <__kernel_rem_pio2+0x302>
 8007454:	b123      	cbz	r3, 8007460 <__kernel_rem_pio2+0x2f8>
 8007456:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800745a:	f8cb 3000 	str.w	r3, [fp]
 800745e:	2301      	movs	r3, #1
 8007460:	3201      	adds	r2, #1
 8007462:	f10b 0b04 	add.w	fp, fp, #4
 8007466:	461d      	mov	r5, r3
 8007468:	e755      	b.n	8007316 <__kernel_rem_pio2+0x1ae>
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	f8cb 3000 	str.w	r3, [fp]
 8007470:	462b      	mov	r3, r5
 8007472:	e7f5      	b.n	8007460 <__kernel_rem_pio2+0x2f8>
 8007474:	1e62      	subs	r2, r4, #1
 8007476:	ab0c      	add	r3, sp, #48	; 0x30
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007480:	a90c      	add	r1, sp, #48	; 0x30
 8007482:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007486:	e754      	b.n	8007332 <__kernel_rem_pio2+0x1ca>
	...
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	08007db0 	.word	0x08007db0
 800749c:	40200000 	.word	0x40200000
 80074a0:	3ff00000 	.word	0x3ff00000
 80074a4:	3e700000 	.word	0x3e700000
 80074a8:	41700000 	.word	0x41700000
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	08007d70 	.word	0x08007d70
 80074b4:	1e62      	subs	r2, r4, #1
 80074b6:	ab0c      	add	r3, sp, #48	; 0x30
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80074c0:	e7de      	b.n	8007480 <__kernel_rem_pio2+0x318>
 80074c2:	a90c      	add	r1, sp, #48	; 0x30
 80074c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	430a      	orrs	r2, r1
 80074cc:	e790      	b.n	80073f0 <__kernel_rem_pio2+0x288>
 80074ce:	3301      	adds	r3, #1
 80074d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d0fa      	beq.n	80074ce <__kernel_rem_pio2+0x366>
 80074d8:	9a08      	ldr	r2, [sp, #32]
 80074da:	18e3      	adds	r3, r4, r3
 80074dc:	18a6      	adds	r6, r4, r2
 80074de:	aa20      	add	r2, sp, #128	; 0x80
 80074e0:	1c65      	adds	r5, r4, #1
 80074e2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80074e6:	9302      	str	r3, [sp, #8]
 80074e8:	9b02      	ldr	r3, [sp, #8]
 80074ea:	42ab      	cmp	r3, r5
 80074ec:	da04      	bge.n	80074f8 <__kernel_rem_pio2+0x390>
 80074ee:	461c      	mov	r4, r3
 80074f0:	e6b5      	b.n	800725e <__kernel_rem_pio2+0xf6>
 80074f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f4:	2301      	movs	r3, #1
 80074f6:	e7eb      	b.n	80074d0 <__kernel_rem_pio2+0x368>
 80074f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074fe:	f7f8 ffb5 	bl	800046c <__aeabi_i2d>
 8007502:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	46b3      	mov	fp, r6
 800750a:	461c      	mov	r4, r3
 800750c:	2700      	movs	r7, #0
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	f04f 0900 	mov.w	r9, #0
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	429f      	cmp	r7, r3
 800751a:	dd06      	ble.n	800752a <__kernel_rem_pio2+0x3c2>
 800751c:	ab70      	add	r3, sp, #448	; 0x1c0
 800751e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007522:	e9c3 8900 	strd	r8, r9, [r3]
 8007526:	3501      	adds	r5, #1
 8007528:	e7de      	b.n	80074e8 <__kernel_rem_pio2+0x380>
 800752a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800752e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007532:	f7f9 f805 	bl	8000540 <__aeabi_dmul>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f8 fe49 	bl	80001d4 <__adddf3>
 8007542:	3701      	adds	r7, #1
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	e7e5      	b.n	8007516 <__kernel_rem_pio2+0x3ae>
 800754a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800754e:	e754      	b.n	80073fa <__kernel_rem_pio2+0x292>
 8007550:	ec47 6b10 	vmov	d0, r6, r7
 8007554:	f1ca 0000 	rsb	r0, sl, #0
 8007558:	f000 fa8e 	bl	8007a78 <scalbn>
 800755c:	ec57 6b10 	vmov	r6, r7, d0
 8007560:	4b9f      	ldr	r3, [pc, #636]	; (80077e0 <__kernel_rem_pio2+0x678>)
 8007562:	ee10 0a10 	vmov	r0, s0
 8007566:	2200      	movs	r2, #0
 8007568:	4639      	mov	r1, r7
 800756a:	f7f9 fa6f 	bl	8000a4c <__aeabi_dcmpge>
 800756e:	b300      	cbz	r0, 80075b2 <__kernel_rem_pio2+0x44a>
 8007570:	4b9c      	ldr	r3, [pc, #624]	; (80077e4 <__kernel_rem_pio2+0x67c>)
 8007572:	2200      	movs	r2, #0
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f8 ffe2 	bl	8000540 <__aeabi_dmul>
 800757c:	f7f9 fa7a 	bl	8000a74 <__aeabi_d2iz>
 8007580:	4605      	mov	r5, r0
 8007582:	f7f8 ff73 	bl	800046c <__aeabi_i2d>
 8007586:	4b96      	ldr	r3, [pc, #600]	; (80077e0 <__kernel_rem_pio2+0x678>)
 8007588:	2200      	movs	r2, #0
 800758a:	f7f8 ffd9 	bl	8000540 <__aeabi_dmul>
 800758e:	460b      	mov	r3, r1
 8007590:	4602      	mov	r2, r0
 8007592:	4639      	mov	r1, r7
 8007594:	4630      	mov	r0, r6
 8007596:	f7f8 fe1b 	bl	80001d0 <__aeabi_dsub>
 800759a:	f7f9 fa6b 	bl	8000a74 <__aeabi_d2iz>
 800759e:	f104 0b01 	add.w	fp, r4, #1
 80075a2:	ab0c      	add	r3, sp, #48	; 0x30
 80075a4:	f10a 0a18 	add.w	sl, sl, #24
 80075a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80075ac:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80075b0:	e72b      	b.n	800740a <__kernel_rem_pio2+0x2a2>
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f9 fa5d 	bl	8000a74 <__aeabi_d2iz>
 80075ba:	ab0c      	add	r3, sp, #48	; 0x30
 80075bc:	46a3      	mov	fp, r4
 80075be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80075c2:	e722      	b.n	800740a <__kernel_rem_pio2+0x2a2>
 80075c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80075c6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80075ca:	ab0c      	add	r3, sp, #48	; 0x30
 80075cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80075d0:	f7f8 ff4c 	bl	800046c <__aeabi_i2d>
 80075d4:	4622      	mov	r2, r4
 80075d6:	462b      	mov	r3, r5
 80075d8:	f7f8 ffb2 	bl	8000540 <__aeabi_dmul>
 80075dc:	4632      	mov	r2, r6
 80075de:	e9c9 0100 	strd	r0, r1, [r9]
 80075e2:	463b      	mov	r3, r7
 80075e4:	4620      	mov	r0, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7f8 ffaa 	bl	8000540 <__aeabi_dmul>
 80075ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80075f0:	4604      	mov	r4, r0
 80075f2:	460d      	mov	r5, r1
 80075f4:	e713      	b.n	800741e <__kernel_rem_pio2+0x2b6>
 80075f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80075fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80075fe:	f7f8 ff9f 	bl	8000540 <__aeabi_dmul>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f8 fde3 	bl	80001d4 <__adddf3>
 800760e:	3601      	adds	r6, #1
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	429e      	cmp	r6, r3
 8007618:	dc01      	bgt.n	800761e <__kernel_rem_pio2+0x4b6>
 800761a:	45b0      	cmp	r8, r6
 800761c:	daeb      	bge.n	80075f6 <__kernel_rem_pio2+0x48e>
 800761e:	ab48      	add	r3, sp, #288	; 0x120
 8007620:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007624:	e9c3 4500 	strd	r4, r5, [r3]
 8007628:	3f01      	subs	r7, #1
 800762a:	f108 0801 	add.w	r8, r8, #1
 800762e:	e6ff      	b.n	8007430 <__kernel_rem_pio2+0x2c8>
 8007630:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007632:	2b02      	cmp	r3, #2
 8007634:	dc0b      	bgt.n	800764e <__kernel_rem_pio2+0x4e6>
 8007636:	2b00      	cmp	r3, #0
 8007638:	dc6e      	bgt.n	8007718 <__kernel_rem_pio2+0x5b0>
 800763a:	d045      	beq.n	80076c8 <__kernel_rem_pio2+0x560>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	f003 0007 	and.w	r0, r3, #7
 8007642:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007646:	ecbd 8b02 	vpop	{d8}
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007650:	2b03      	cmp	r3, #3
 8007652:	d1f3      	bne.n	800763c <__kernel_rem_pio2+0x4d4>
 8007654:	ab48      	add	r3, sp, #288	; 0x120
 8007656:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800765a:	46d0      	mov	r8, sl
 800765c:	46d9      	mov	r9, fp
 800765e:	f1b9 0f00 	cmp.w	r9, #0
 8007662:	f1a8 0808 	sub.w	r8, r8, #8
 8007666:	dc64      	bgt.n	8007732 <__kernel_rem_pio2+0x5ca>
 8007668:	465c      	mov	r4, fp
 800766a:	2c01      	cmp	r4, #1
 800766c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007670:	dc7e      	bgt.n	8007770 <__kernel_rem_pio2+0x608>
 8007672:	2000      	movs	r0, #0
 8007674:	2100      	movs	r1, #0
 8007676:	f1bb 0f01 	cmp.w	fp, #1
 800767a:	f300 8097 	bgt.w	80077ac <__kernel_rem_pio2+0x644>
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007684:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007688:	2b00      	cmp	r3, #0
 800768a:	f040 8099 	bne.w	80077c0 <__kernel_rem_pio2+0x658>
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	e9c3 5600 	strd	r5, r6, [r3]
 8007694:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007698:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800769c:	e7ce      	b.n	800763c <__kernel_rem_pio2+0x4d4>
 800769e:	ab48      	add	r3, sp, #288	; 0x120
 80076a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fd94 	bl	80001d4 <__adddf3>
 80076ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80076b0:	f1bb 0f00 	cmp.w	fp, #0
 80076b4:	daf3      	bge.n	800769e <__kernel_rem_pio2+0x536>
 80076b6:	9b02      	ldr	r3, [sp, #8]
 80076b8:	b113      	cbz	r3, 80076c0 <__kernel_rem_pio2+0x558>
 80076ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076be:	4619      	mov	r1, r3
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	e9c3 0100 	strd	r0, r1, [r3]
 80076c6:	e7b9      	b.n	800763c <__kernel_rem_pio2+0x4d4>
 80076c8:	2000      	movs	r0, #0
 80076ca:	2100      	movs	r1, #0
 80076cc:	e7f0      	b.n	80076b0 <__kernel_rem_pio2+0x548>
 80076ce:	ab48      	add	r3, sp, #288	; 0x120
 80076d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fd7c 	bl	80001d4 <__adddf3>
 80076dc:	3c01      	subs	r4, #1
 80076de:	2c00      	cmp	r4, #0
 80076e0:	daf5      	bge.n	80076ce <__kernel_rem_pio2+0x566>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	b1e3      	cbz	r3, 8007720 <__kernel_rem_pio2+0x5b8>
 80076e6:	4602      	mov	r2, r0
 80076e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076ec:	9c01      	ldr	r4, [sp, #4]
 80076ee:	e9c4 2300 	strd	r2, r3, [r4]
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80076fa:	f7f8 fd69 	bl	80001d0 <__aeabi_dsub>
 80076fe:	ad4a      	add	r5, sp, #296	; 0x128
 8007700:	2401      	movs	r4, #1
 8007702:	45a3      	cmp	fp, r4
 8007704:	da0f      	bge.n	8007726 <__kernel_rem_pio2+0x5be>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	b113      	cbz	r3, 8007710 <__kernel_rem_pio2+0x5a8>
 800770a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800770e:	4619      	mov	r1, r3
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007716:	e791      	b.n	800763c <__kernel_rem_pio2+0x4d4>
 8007718:	465c      	mov	r4, fp
 800771a:	2000      	movs	r0, #0
 800771c:	2100      	movs	r1, #0
 800771e:	e7de      	b.n	80076de <__kernel_rem_pio2+0x576>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	e7e2      	b.n	80076ec <__kernel_rem_pio2+0x584>
 8007726:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800772a:	f7f8 fd53 	bl	80001d4 <__adddf3>
 800772e:	3401      	adds	r4, #1
 8007730:	e7e7      	b.n	8007702 <__kernel_rem_pio2+0x59a>
 8007732:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007736:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800773a:	4620      	mov	r0, r4
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fd47 	bl	80001d4 <__adddf3>
 8007746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fd3d 	bl	80001d0 <__aeabi_dsub>
 8007756:	4632      	mov	r2, r6
 8007758:	463b      	mov	r3, r7
 800775a:	f7f8 fd3b 	bl	80001d4 <__adddf3>
 800775e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007762:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007766:	ed88 7b00 	vstr	d7, [r8]
 800776a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800776e:	e776      	b.n	800765e <__kernel_rem_pio2+0x4f6>
 8007770:	e9da 8900 	ldrd	r8, r9, [sl]
 8007774:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007778:	4640      	mov	r0, r8
 800777a:	4632      	mov	r2, r6
 800777c:	463b      	mov	r3, r7
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd28 	bl	80001d4 <__adddf3>
 8007784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f8 fd1e 	bl	80001d0 <__aeabi_dsub>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	f7f8 fd1c 	bl	80001d4 <__adddf3>
 800779c:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077a4:	ed8a 7b00 	vstr	d7, [sl]
 80077a8:	3c01      	subs	r4, #1
 80077aa:	e75e      	b.n	800766a <__kernel_rem_pio2+0x502>
 80077ac:	ab48      	add	r3, sp, #288	; 0x120
 80077ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fd0d 	bl	80001d4 <__adddf3>
 80077ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80077be:	e75a      	b.n	8007676 <__kernel_rem_pio2+0x50e>
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	601d      	str	r5, [r3, #0]
 80077c6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80077ca:	605c      	str	r4, [r3, #4]
 80077cc:	609f      	str	r7, [r3, #8]
 80077ce:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80077d2:	60d3      	str	r3, [r2, #12]
 80077d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d8:	6110      	str	r0, [r2, #16]
 80077da:	6153      	str	r3, [r2, #20]
 80077dc:	e72e      	b.n	800763c <__kernel_rem_pio2+0x4d4>
 80077de:	bf00      	nop
 80077e0:	41700000 	.word	0x41700000
 80077e4:	3e700000 	.word	0x3e700000

080077e8 <__kernel_sin>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b04 	vpush	{d8-d9}
 80077f0:	eeb0 8a41 	vmov.f32	s16, s2
 80077f4:	eef0 8a61 	vmov.f32	s17, s3
 80077f8:	ec55 4b10 	vmov	r4, r5, d0
 80077fc:	b083      	sub	sp, #12
 80077fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007802:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007806:	9001      	str	r0, [sp, #4]
 8007808:	da06      	bge.n	8007818 <__kernel_sin+0x30>
 800780a:	ee10 0a10 	vmov	r0, s0
 800780e:	4629      	mov	r1, r5
 8007810:	f7f9 f930 	bl	8000a74 <__aeabi_d2iz>
 8007814:	2800      	cmp	r0, #0
 8007816:	d051      	beq.n	80078bc <__kernel_sin+0xd4>
 8007818:	4622      	mov	r2, r4
 800781a:	462b      	mov	r3, r5
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fe8e 	bl	8000540 <__aeabi_dmul>
 8007824:	4682      	mov	sl, r0
 8007826:	468b      	mov	fp, r1
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fe86 	bl	8000540 <__aeabi_dmul>
 8007834:	a341      	add	r3, pc, #260	; (adr r3, 800793c <__kernel_sin+0x154>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	4650      	mov	r0, sl
 8007840:	4659      	mov	r1, fp
 8007842:	f7f8 fe7d 	bl	8000540 <__aeabi_dmul>
 8007846:	a33f      	add	r3, pc, #252	; (adr r3, 8007944 <__kernel_sin+0x15c>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcc0 	bl	80001d0 <__aeabi_dsub>
 8007850:	4652      	mov	r2, sl
 8007852:	465b      	mov	r3, fp
 8007854:	f7f8 fe74 	bl	8000540 <__aeabi_dmul>
 8007858:	a33c      	add	r3, pc, #240	; (adr r3, 800794c <__kernel_sin+0x164>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fcb9 	bl	80001d4 <__adddf3>
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	f7f8 fe6b 	bl	8000540 <__aeabi_dmul>
 800786a:	a33a      	add	r3, pc, #232	; (adr r3, 8007954 <__kernel_sin+0x16c>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fcae 	bl	80001d0 <__aeabi_dsub>
 8007874:	4652      	mov	r2, sl
 8007876:	465b      	mov	r3, fp
 8007878:	f7f8 fe62 	bl	8000540 <__aeabi_dmul>
 800787c:	a337      	add	r3, pc, #220	; (adr r3, 800795c <__kernel_sin+0x174>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fca7 	bl	80001d4 <__adddf3>
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	b9eb      	cbnz	r3, 80078ca <__kernel_sin+0xe2>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	f7f8 fe53 	bl	8000540 <__aeabi_dmul>
 800789a:	a325      	add	r3, pc, #148	; (adr r3, 8007930 <__kernel_sin+0x148>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fc96 	bl	80001d0 <__aeabi_dsub>
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	f7f8 fe4a 	bl	8000540 <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fc8e 	bl	80001d4 <__adddf3>
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	ec45 4b10 	vmov	d0, r4, r5
 80078c0:	b003      	add	sp, #12
 80078c2:	ecbd 8b04 	vpop	{d8-d9}
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <__kernel_sin+0x150>)
 80078cc:	ec51 0b18 	vmov	r0, r1, d8
 80078d0:	2200      	movs	r2, #0
 80078d2:	f7f8 fe35 	bl	8000540 <__aeabi_dmul>
 80078d6:	4632      	mov	r2, r6
 80078d8:	ec41 0b19 	vmov	d9, r0, r1
 80078dc:	463b      	mov	r3, r7
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fe2d 	bl	8000540 <__aeabi_dmul>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	ec51 0b19 	vmov	r0, r1, d9
 80078ee:	f7f8 fc6f 	bl	80001d0 <__aeabi_dsub>
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	f7f8 fe23 	bl	8000540 <__aeabi_dmul>
 80078fa:	ec53 2b18 	vmov	r2, r3, d8
 80078fe:	f7f8 fc67 	bl	80001d0 <__aeabi_dsub>
 8007902:	a30b      	add	r3, pc, #44	; (adr r3, 8007930 <__kernel_sin+0x148>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	4606      	mov	r6, r0
 800790a:	460f      	mov	r7, r1
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f8 fe16 	bl	8000540 <__aeabi_dmul>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f7f8 fc5a 	bl	80001d4 <__adddf3>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f8 fc52 	bl	80001d0 <__aeabi_dsub>
 800792c:	e7c4      	b.n	80078b8 <__kernel_sin+0xd0>
 800792e:	bf00      	nop
 8007930:	55555549 	.word	0x55555549
 8007934:	3fc55555 	.word	0x3fc55555
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	5acfd57c 	.word	0x5acfd57c
 8007940:	3de5d93a 	.word	0x3de5d93a
 8007944:	8a2b9ceb 	.word	0x8a2b9ceb
 8007948:	3e5ae5e6 	.word	0x3e5ae5e6
 800794c:	57b1fe7d 	.word	0x57b1fe7d
 8007950:	3ec71de3 	.word	0x3ec71de3
 8007954:	19c161d5 	.word	0x19c161d5
 8007958:	3f2a01a0 	.word	0x3f2a01a0
 800795c:	1110f8a6 	.word	0x1110f8a6
 8007960:	3f811111 	.word	0x3f811111

08007964 <fabs>:
 8007964:	ec51 0b10 	vmov	r0, r1, d0
 8007968:	ee10 2a10 	vmov	r2, s0
 800796c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007970:	ec43 2b10 	vmov	d0, r2, r3
 8007974:	4770      	bx	lr
	...

08007978 <floor>:
 8007978:	ec51 0b10 	vmov	r0, r1, d0
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007984:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007988:	2e13      	cmp	r6, #19
 800798a:	ee10 5a10 	vmov	r5, s0
 800798e:	ee10 8a10 	vmov	r8, s0
 8007992:	460c      	mov	r4, r1
 8007994:	dc32      	bgt.n	80079fc <floor+0x84>
 8007996:	2e00      	cmp	r6, #0
 8007998:	da14      	bge.n	80079c4 <floor+0x4c>
 800799a:	a333      	add	r3, pc, #204	; (adr r3, 8007a68 <floor+0xf0>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f8 fc18 	bl	80001d4 <__adddf3>
 80079a4:	2200      	movs	r2, #0
 80079a6:	2300      	movs	r3, #0
 80079a8:	f7f9 f85a 	bl	8000a60 <__aeabi_dcmpgt>
 80079ac:	b138      	cbz	r0, 80079be <floor+0x46>
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	da57      	bge.n	8007a62 <floor+0xea>
 80079b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80079b6:	431d      	orrs	r5, r3
 80079b8:	d001      	beq.n	80079be <floor+0x46>
 80079ba:	4c2d      	ldr	r4, [pc, #180]	; (8007a70 <floor+0xf8>)
 80079bc:	2500      	movs	r5, #0
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	e025      	b.n	8007a10 <floor+0x98>
 80079c4:	4f2b      	ldr	r7, [pc, #172]	; (8007a74 <floor+0xfc>)
 80079c6:	4137      	asrs	r7, r6
 80079c8:	ea01 0307 	and.w	r3, r1, r7
 80079cc:	4303      	orrs	r3, r0
 80079ce:	d01f      	beq.n	8007a10 <floor+0x98>
 80079d0:	a325      	add	r3, pc, #148	; (adr r3, 8007a68 <floor+0xf0>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fbfd 	bl	80001d4 <__adddf3>
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	f7f9 f83f 	bl	8000a60 <__aeabi_dcmpgt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d0eb      	beq.n	80079be <floor+0x46>
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	bfbe      	ittt	lt
 80079ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80079ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80079f2:	19a4      	addlt	r4, r4, r6
 80079f4:	ea24 0407 	bic.w	r4, r4, r7
 80079f8:	2500      	movs	r5, #0
 80079fa:	e7e0      	b.n	80079be <floor+0x46>
 80079fc:	2e33      	cmp	r6, #51	; 0x33
 80079fe:	dd0b      	ble.n	8007a18 <floor+0xa0>
 8007a00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007a04:	d104      	bne.n	8007a10 <floor+0x98>
 8007a06:	ee10 2a10 	vmov	r2, s0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	f7f8 fbe2 	bl	80001d4 <__adddf3>
 8007a10:	ec41 0b10 	vmov	d0, r0, r1
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a20:	fa23 f707 	lsr.w	r7, r3, r7
 8007a24:	4207      	tst	r7, r0
 8007a26:	d0f3      	beq.n	8007a10 <floor+0x98>
 8007a28:	a30f      	add	r3, pc, #60	; (adr r3, 8007a68 <floor+0xf0>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fbd1 	bl	80001d4 <__adddf3>
 8007a32:	2200      	movs	r2, #0
 8007a34:	2300      	movs	r3, #0
 8007a36:	f7f9 f813 	bl	8000a60 <__aeabi_dcmpgt>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d0bf      	beq.n	80079be <floor+0x46>
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	da02      	bge.n	8007a48 <floor+0xd0>
 8007a42:	2e14      	cmp	r6, #20
 8007a44:	d103      	bne.n	8007a4e <floor+0xd6>
 8007a46:	3401      	adds	r4, #1
 8007a48:	ea25 0507 	bic.w	r5, r5, r7
 8007a4c:	e7b7      	b.n	80079be <floor+0x46>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007a54:	fa03 f606 	lsl.w	r6, r3, r6
 8007a58:	4435      	add	r5, r6
 8007a5a:	4545      	cmp	r5, r8
 8007a5c:	bf38      	it	cc
 8007a5e:	18e4      	addcc	r4, r4, r3
 8007a60:	e7f2      	b.n	8007a48 <floor+0xd0>
 8007a62:	2500      	movs	r5, #0
 8007a64:	462c      	mov	r4, r5
 8007a66:	e7aa      	b.n	80079be <floor+0x46>
 8007a68:	8800759c 	.word	0x8800759c
 8007a6c:	7e37e43c 	.word	0x7e37e43c
 8007a70:	bff00000 	.word	0xbff00000
 8007a74:	000fffff 	.word	0x000fffff

08007a78 <scalbn>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	ec55 4b10 	vmov	r4, r5, d0
 8007a7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a82:	4606      	mov	r6, r0
 8007a84:	462b      	mov	r3, r5
 8007a86:	b99a      	cbnz	r2, 8007ab0 <scalbn+0x38>
 8007a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a8c:	4323      	orrs	r3, r4
 8007a8e:	d036      	beq.n	8007afe <scalbn+0x86>
 8007a90:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <scalbn+0x100>)
 8007a92:	4629      	mov	r1, r5
 8007a94:	ee10 0a10 	vmov	r0, s0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f7f8 fd51 	bl	8000540 <__aeabi_dmul>
 8007a9e:	4b37      	ldr	r3, [pc, #220]	; (8007b7c <scalbn+0x104>)
 8007aa0:	429e      	cmp	r6, r3
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	da10      	bge.n	8007aca <scalbn+0x52>
 8007aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8007b58 <scalbn+0xe0>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	e03a      	b.n	8007b26 <scalbn+0xae>
 8007ab0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ab4:	428a      	cmp	r2, r1
 8007ab6:	d10c      	bne.n	8007ad2 <scalbn+0x5a>
 8007ab8:	ee10 2a10 	vmov	r2, s0
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fb88 	bl	80001d4 <__adddf3>
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	e019      	b.n	8007afe <scalbn+0x86>
 8007aca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ace:	460b      	mov	r3, r1
 8007ad0:	3a36      	subs	r2, #54	; 0x36
 8007ad2:	4432      	add	r2, r6
 8007ad4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ad8:	428a      	cmp	r2, r1
 8007ada:	dd08      	ble.n	8007aee <scalbn+0x76>
 8007adc:	2d00      	cmp	r5, #0
 8007ade:	a120      	add	r1, pc, #128	; (adr r1, 8007b60 <scalbn+0xe8>)
 8007ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae4:	da1c      	bge.n	8007b20 <scalbn+0xa8>
 8007ae6:	a120      	add	r1, pc, #128	; (adr r1, 8007b68 <scalbn+0xf0>)
 8007ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aec:	e018      	b.n	8007b20 <scalbn+0xa8>
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	dd08      	ble.n	8007b04 <scalbn+0x8c>
 8007af2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007afe:	ec45 4b10 	vmov	d0, r4, r5
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007b08:	da19      	bge.n	8007b3e <scalbn+0xc6>
 8007b0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007b14:	dd0a      	ble.n	8007b2c <scalbn+0xb4>
 8007b16:	a112      	add	r1, pc, #72	; (adr r1, 8007b60 <scalbn+0xe8>)
 8007b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e2      	bne.n	8007ae6 <scalbn+0x6e>
 8007b20:	a30f      	add	r3, pc, #60	; (adr r3, 8007b60 <scalbn+0xe8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fd0b 	bl	8000540 <__aeabi_dmul>
 8007b2a:	e7cb      	b.n	8007ac4 <scalbn+0x4c>
 8007b2c:	a10a      	add	r1, pc, #40	; (adr r1, 8007b58 <scalbn+0xe0>)
 8007b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0b8      	beq.n	8007aa8 <scalbn+0x30>
 8007b36:	a10e      	add	r1, pc, #56	; (adr r1, 8007b70 <scalbn+0xf8>)
 8007b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b3c:	e7b4      	b.n	8007aa8 <scalbn+0x30>
 8007b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b42:	3236      	adds	r2, #54	; 0x36
 8007b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <scalbn+0x108>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	e7e8      	b.n	8007b26 <scalbn+0xae>
 8007b54:	f3af 8000 	nop.w
 8007b58:	c2f8f359 	.word	0xc2f8f359
 8007b5c:	01a56e1f 	.word	0x01a56e1f
 8007b60:	8800759c 	.word	0x8800759c
 8007b64:	7e37e43c 	.word	0x7e37e43c
 8007b68:	8800759c 	.word	0x8800759c
 8007b6c:	fe37e43c 	.word	0xfe37e43c
 8007b70:	c2f8f359 	.word	0xc2f8f359
 8007b74:	81a56e1f 	.word	0x81a56e1f
 8007b78:	43500000 	.word	0x43500000
 8007b7c:	ffff3cb0 	.word	0xffff3cb0
 8007b80:	3c900000 	.word	0x3c900000

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
