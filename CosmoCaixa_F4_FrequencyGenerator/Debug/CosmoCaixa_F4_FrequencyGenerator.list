
CosmoCaixa_F4_FrequencyGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008188  08008188  00018188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008380  08008380  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008388  08008388  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000644  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000650  20000650  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca4  00000000  00000000  000371f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00039e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024615  00000000  00000000  0003c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cdd  00000000  00000000  00060b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df466  00000000  00000000  000797ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158c50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005844  00000000  00000000  00158ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800816c 	.word	0x0800816c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800816c 	.word	0x0800816c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000e08:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <write_register+0x34>)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <write_register+0x34>)
 8000e14:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000e16:	2364      	movs	r3, #100	; 0x64
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <write_register+0x34>)
 8000e1e:	2194      	movs	r1, #148	; 0x94
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <write_register+0x38>)
 8000e22:	f003 f8f5 	bl	8004010 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000028 	.word	0x20000028
 8000e34:	2000002c 	.word	0x2000002c

08000e38 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <read_register+0x3c>)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <read_register+0x3c>)
 8000e52:	2194      	movs	r1, #148	; 0x94
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <read_register+0x40>)
 8000e56:	f003 f8db 	bl	8004010 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	2194      	movs	r1, #148	; 0x94
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <read_register+0x40>)
 8000e66:	f003 f9d1 	bl	800420c <HAL_I2C_Master_Receive>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000028 	.word	0x20000028
 8000e78:	2000002c 	.word	0x2000002c

08000e7c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	f107 0c08 	add.w	ip, r7, #8
 8000e86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e8a:	4b88      	ldr	r3, [pc, #544]	; (80010ac <CS43_Init+0x230>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000e92:	4b86      	ldr	r3, [pc, #536]	; (80010ac <CS43_Init+0x230>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	4b84      	ldr	r3, [pc, #528]	; (80010ac <CS43_Init+0x230>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ea0:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	4882      	ldr	r0, [pc, #520]	; (80010b0 <CS43_Init+0x234>)
 8000ea8:	f002 ff54 	bl	8003d54 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000eac:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <CS43_Init+0x238>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	2254      	movs	r2, #84	; 0x54
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f006 f90a 	bl	80070d0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000ebc:	4b7e      	ldr	r3, [pc, #504]	; (80010b8 <CS43_Init+0x23c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000ec2:	497d      	ldr	r1, [pc, #500]	; (80010b8 <CS43_Init+0x23c>)
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f7ff ff99 	bl	8000dfc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000eca:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <CS43_Init+0x23c>)
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000ed0:	4b79      	ldr	r3, [pc, #484]	; (80010b8 <CS43_Init+0x23c>)
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b77      	ldr	r3, [pc, #476]	; (80010b8 <CS43_Init+0x23c>)
 8000edc:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000ede:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <CS43_Init+0x23c>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	f043 030c 	orr.w	r3, r3, #12
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <CS43_Init+0x23c>)
 8000eea:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000eec:	4b72      	ldr	r3, [pc, #456]	; (80010b8 <CS43_Init+0x23c>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	f043 0303 	orr.w	r3, r3, #3
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <CS43_Init+0x23c>)
 8000ef8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000efa:	4970      	ldr	r1, [pc, #448]	; (80010bc <CS43_Init+0x240>)
 8000efc:	2004      	movs	r0, #4
 8000efe:	f7ff ff7d 	bl	8000dfc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000f02:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <CS43_Init+0x23c>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000f08:	496c      	ldr	r1, [pc, #432]	; (80010bc <CS43_Init+0x240>)
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f7ff ff76 	bl	8000dfc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000f10:	4969      	ldr	r1, [pc, #420]	; (80010b8 <CS43_Init+0x23c>)
 8000f12:	2006      	movs	r0, #6
 8000f14:	f7ff ff90 	bl	8000e38 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000f18:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <CS43_Init+0x23c>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <CS43_Init+0x23c>)
 8000f24:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000f26:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <CS43_Init+0x23c>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <CS43_Init+0x23c>)
 8000f32:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <CS43_Init+0x23c>)
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b5e      	ldr	r3, [pc, #376]	; (80010b8 <CS43_Init+0x23c>)
 8000f40:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000f42:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <CS43_Init+0x23c>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	f023 0310 	bic.w	r3, r3, #16
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <CS43_Init+0x23c>)
 8000f4e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000f50:	4b59      	ldr	r3, [pc, #356]	; (80010b8 <CS43_Init+0x23c>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f023 0304 	bic.w	r3, r3, #4
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <CS43_Init+0x23c>)
 8000f5c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <CS43_Init+0x23c>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <CS43_Init+0x23c>)
 8000f6a:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <CS43_Init+0x23c>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	f043 0303 	orr.w	r3, r3, #3
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <CS43_Init+0x23c>)
 8000f78:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000f7a:	4950      	ldr	r1, [pc, #320]	; (80010bc <CS43_Init+0x240>)
 8000f7c:	2006      	movs	r0, #6
 8000f7e:	f7ff ff3d 	bl	8000dfc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000f82:	494e      	ldr	r1, [pc, #312]	; (80010bc <CS43_Init+0x240>)
 8000f84:	2008      	movs	r0, #8
 8000f86:	f7ff ff57 	bl	8000e38 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <CS43_Init+0x23c>)
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	f023 030f 	bic.w	r3, r3, #15
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <CS43_Init+0x23c>)
 8000f96:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <CS43_Init+0x23c>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <CS43_Init+0x23c>)
 8000fa4:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000fa6:	4945      	ldr	r1, [pc, #276]	; (80010bc <CS43_Init+0x240>)
 8000fa8:	2008      	movs	r0, #8
 8000faa:	f7ff ff27 	bl	8000dfc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000fae:	4943      	ldr	r1, [pc, #268]	; (80010bc <CS43_Init+0x240>)
 8000fb0:	2009      	movs	r0, #9
 8000fb2:	f7ff ff41 	bl	8000e38 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <CS43_Init+0x23c>)
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	f023 030f 	bic.w	r3, r3, #15
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <CS43_Init+0x23c>)
 8000fc2:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000fc4:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <CS43_Init+0x23c>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <CS43_Init+0x23c>)
 8000fd0:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000fd2:	493a      	ldr	r1, [pc, #232]	; (80010bc <CS43_Init+0x240>)
 8000fd4:	2009      	movs	r0, #9
 8000fd6:	f7ff ff11 	bl	8000dfc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000fda:	4938      	ldr	r1, [pc, #224]	; (80010bc <CS43_Init+0x240>)
 8000fdc:	200e      	movs	r0, #14
 8000fde:	f7ff ff2b 	bl	8000e38 <read_register>
	if(outputMode == CS43_MODE_ANALOG)
 8000fe2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d131      	bne.n	800104e <CS43_Init+0x1d2>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <CS43_Init+0x23c>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <CS43_Init+0x23c>)
 8000ff6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <CS43_Init+0x23c>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <CS43_Init+0x23c>)
 8001004:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <CS43_Init+0x23c>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	f023 0320 	bic.w	r3, r3, #32
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <CS43_Init+0x23c>)
 8001012:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <CS43_Init+0x23c>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	f023 0310 	bic.w	r3, r3, #16
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <CS43_Init+0x23c>)
 8001020:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <CS43_Init+0x23c>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	f023 0308 	bic.w	r3, r3, #8
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <CS43_Init+0x23c>)
 800102e:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 1);   // No Soft Ramp on Volume changes
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <CS43_Init+0x23c>)
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	f023 0302 	bic.w	r3, r3, #2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <CS43_Init+0x23c>)
 800103c:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 0);   // Enable Digital Zero Cross
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <CS43_Init+0x23c>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <CS43_Init+0x23c>)
 800104a:	705a      	strb	r2, [r3, #1]
 800104c:	e006      	b.n	800105c <CS43_Init+0x1e0>
	}
	else if(outputMode == CS43_MODE_I2S)
 800104e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <CS43_Init+0x1e0>
	{
		iData[1] = 0x02;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <CS43_Init+0x23c>)
 8001058:	2202      	movs	r2, #2
 800105a:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800105c:	4917      	ldr	r1, [pc, #92]	; (80010bc <CS43_Init+0x240>)
 800105e:	200e      	movs	r0, #14
 8001060:	f7ff fecc 	bl	8000dfc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001064:	4915      	ldr	r1, [pc, #84]	; (80010bc <CS43_Init+0x240>)
 8001066:	200f      	movs	r0, #15
 8001068:	f7ff fee6 	bl	8000e38 <read_register>
	iData[1] = 0x00;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <CS43_Init+0x23c>)
 800106e:	2200      	movs	r2, #0
 8001070:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8001072:	4912      	ldr	r1, [pc, #72]	; (80010bc <CS43_Init+0x240>)
 8001074:	200f      	movs	r0, #15
 8001076:	f7ff fec1 	bl	8000dfc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <CS43_Init+0x23c>)
 800107c:	2200      	movs	r2, #0
 800107e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001080:	490e      	ldr	r1, [pc, #56]	; (80010bc <CS43_Init+0x240>)
 8001082:	2014      	movs	r0, #20
 8001084:	f7ff feba 	bl	8000dfc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <CS43_Init+0x240>)
 800108a:	2015      	movs	r0, #21
 800108c:	f7ff feb6 	bl	8000dfc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <CS43_Init+0x240>)
 8001092:	201a      	movs	r0, #26
 8001094:	f7ff feb2 	bl	8000dfc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001098:	4908      	ldr	r1, [pc, #32]	; (80010bc <CS43_Init+0x240>)
 800109a:	201b      	movs	r0, #27
 800109c:	f7ff feae 	bl	8000dfc <write_register>
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a8:	b004      	add	sp, #16
 80010aa:	4770      	bx	lr
 80010ac:	20000600 	.word	0x20000600
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	2000002c 	.word	0x2000002c
 80010b8:	20000028 	.word	0x20000028
 80010bc:	20000029 	.word	0x20000029

080010c0 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	switch (side)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d837      	bhi.n	8001140 <CS43_Enable_RightLeft+0x80>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <CS43_Enable_RightLeft+0x18>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	080010ff 	.word	0x080010ff
 80010e0:	08001115 	.word	0x08001115
 80010e4:	0800112b 	.word	0x0800112b
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 80010ea:	22c0      	movs	r2, #192	; 0xc0
 80010ec:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 80010fa:	705a      	strb	r2, [r3, #1]
			break;
 80010fc:	e021      	b.n	8001142 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001110:	705a      	strb	r2, [r3, #1]
			break;
 8001112:	e016      	b.n	8001142 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001116:	22c0      	movs	r2, #192	; 0xc0
 8001118:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001126:	705a      	strb	r2, [r3, #1]
			break;
 8001128:	e00b      	b.n	8001142 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 800113c:	705a      	strb	r2, [r3, #1]
			break;
 800113e:	e000      	b.n	8001142 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8001140:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	f043 030c 	orr.w	r3, r3, #12
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 800114e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	f043 0303 	orr.w	r3, r3, #3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <CS43_Enable_RightLeft+0xb0>)
 800115c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800115e:	4905      	ldr	r1, [pc, #20]	; (8001174 <CS43_Enable_RightLeft+0xb4>)
 8001160:	2004      	movs	r0, #4
 8001162:	f7ff fe4b 	bl	8000dfc <write_register>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000028 	.word	0x20000028
 8001174:	20000029 	.word	0x20000029

08001178 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	3b32      	subs	r3, #50	; 0x32
 8001186:	b2db      	uxtb	r3, r3
 8001188:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <CS43_SetVolume+0x78>)
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800119c:	4915      	ldr	r1, [pc, #84]	; (80011f4 <CS43_SetVolume+0x7c>)
 800119e:	2014      	movs	r0, #20
 80011a0:	f7ff fe2c 	bl	8000dfc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80011a4:	4913      	ldr	r1, [pc, #76]	; (80011f4 <CS43_SetVolume+0x7c>)
 80011a6:	2015      	movs	r0, #21
 80011a8:	f7ff fe28 	bl	8000dfc <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d80e      	bhi.n	80011d0 <CS43_SetVolume+0x58>
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <CS43_SetVolume+0x80>)
 80011be:	fb82 1203 	smull	r1, r2, r2, r3
 80011c2:	1152      	asrs	r2, r2, #5
 80011c4:	17db      	asrs	r3, r3, #31
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3b18      	subs	r3, #24
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e000      	b.n	80011d2 <CS43_SetVolume+0x5a>
 80011d0:	2318      	movs	r3, #24
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <CS43_SetVolume+0x78>)
 80011d4:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80011d6:	4907      	ldr	r1, [pc, #28]	; (80011f4 <CS43_SetVolume+0x7c>)
 80011d8:	2020      	movs	r0, #32
 80011da:	f7ff fe0f 	bl	8000dfc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80011de:	4905      	ldr	r1, [pc, #20]	; (80011f4 <CS43_SetVolume+0x7c>)
 80011e0:	2021      	movs	r0, #33	; 0x21
 80011e2:	f7ff fe0b 	bl	8000dfc <write_register>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000028 	.word	0x20000028
 80011f4:	20000029 	.word	0x20000029
 80011f8:	51eb851f 	.word	0x51eb851f

080011fc <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <CS43_Start+0x7c>)
 8001202:	2299      	movs	r2, #153	; 0x99
 8001204:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001206:	491d      	ldr	r1, [pc, #116]	; (800127c <CS43_Start+0x80>)
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fdf7 	bl	8000dfc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <CS43_Start+0x7c>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8001214:	4919      	ldr	r1, [pc, #100]	; (800127c <CS43_Start+0x80>)
 8001216:	2047      	movs	r0, #71	; 0x47
 8001218:	f7ff fdf0 	bl	8000dfc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800121c:	4917      	ldr	r1, [pc, #92]	; (800127c <CS43_Start+0x80>)
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f7ff fe0a 	bl	8000e38 <read_register>
	iData[1] |= 0x80;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <CS43_Start+0x7c>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <CS43_Start+0x7c>)
 8001230:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001232:	4912      	ldr	r1, [pc, #72]	; (800127c <CS43_Start+0x80>)
 8001234:	2032      	movs	r0, #50	; 0x32
 8001236:	f7ff fde1 	bl	8000dfc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <CS43_Start+0x80>)
 800123c:	2032      	movs	r0, #50	; 0x32
 800123e:	f7ff fdfb 	bl	8000e38 <read_register>
	iData[1] &= ~(0x80);
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <CS43_Start+0x7c>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <CS43_Start+0x7c>)
 800124e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001250:	490a      	ldr	r1, [pc, #40]	; (800127c <CS43_Start+0x80>)
 8001252:	2032      	movs	r0, #50	; 0x32
 8001254:	f7ff fdd2 	bl	8000dfc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <CS43_Start+0x7c>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800125e:	4907      	ldr	r1, [pc, #28]	; (800127c <CS43_Start+0x80>)
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fdcb 	bl	8000dfc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <CS43_Start+0x7c>)
 8001268:	229e      	movs	r2, #158	; 0x9e
 800126a:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800126c:	4903      	ldr	r1, [pc, #12]	; (800127c <CS43_Start+0x80>)
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fdc4 	bl	8000dfc <write_register>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000028 	.word	0x20000028
 800127c:	20000029 	.word	0x20000029

08001280 <CS43_Stop>:

void CS43_Stop(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <CS43_Stop+0x18>)
 8001286:	2201      	movs	r2, #1
 8001288:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800128a:	4904      	ldr	r1, [pc, #16]	; (800129c <CS43_Stop+0x1c>)
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fdb5 	bl	8000dfc <write_register>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000028 	.word	0x20000028
 800129c:	20000029 	.word	0x20000029

080012a0 <compute_sinewave>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void compute_sinewave(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	for (int i=0; i<N_SAMPLES; i++){
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	e03a      	b.n	8001322 <compute_sinewave+0x82>
		sinewave[i] = ((sin(i*2*M_PI/N_SAMPLES) + 1)*(4000/2));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8db 	bl	800046c <__aeabi_i2d>
 80012b6:	a324      	add	r3, pc, #144	; (adr r3, 8001348 <compute_sinewave+0xa8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f940 	bl	8000540 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <compute_sinewave+0x98>)
 80012ce:	f7ff fa61 	bl	8000794 <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	ec43 2b17 	vmov	d7, r2, r3
 80012da:	eeb0 0a47 	vmov.f32	s0, s14
 80012de:	eef0 0a67 	vmov.f32	s1, s15
 80012e2:	f005 ff0d 	bl	8007100 <sin>
 80012e6:	ec51 0b10 	vmov	r0, r1, d0
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <compute_sinewave+0x9c>)
 80012f0:	f7fe ff70 	bl	80001d4 <__adddf3>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <compute_sinewave+0xa0>)
 8001302:	f7ff f91d 	bl	8000540 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fbd9 	bl	8000ac4 <__aeabi_d2uiz>
 8001312:	4602      	mov	r2, r0
 8001314:	490b      	ldr	r1, [pc, #44]	; (8001344 <compute_sinewave+0xa4>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<N_SAMPLES; i++){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b7f      	cmp	r3, #127	; 0x7f
 8001326:	ddc1      	ble.n	80012ac <compute_sinewave+0xc>
	}
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	40600000 	.word	0x40600000
 800133c:	3ff00000 	.word	0x3ff00000
 8001340:	409f4000 	.word	0x409f4000
 8001344:	20000268 	.word	0x20000268
 8001348:	54442d18 	.word	0x54442d18
 800134c:	400921fb 	.word	0x400921fb

08001350 <ADC_map>:

float ADC_map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	603b      	str	r3, [r7, #0]
	float in_min_f = (float)in_min;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001368:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float in_max_f = (float)in_max;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	edc7 7a08 	vstr	s15, [r7, #32]
	float out_min_f = (float)out_min;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	edc7 7a07 	vstr	s15, [r7, #28]
	float out_max_f = (float)out_max;
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001392:	edc7 7a06 	vstr	s15, [r7, #24]
	float res = 0;
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

	res = (x-in_min_f)*(out_max_f-out_min_f)/(in_max_f-in_min_f) + out_min_f;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80013b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013be:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a05 	vstr	s15, [r7, #20]

	return res;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	ee07 3a90 	vmov	s15, r3
  //return (uint32_t)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	372c      	adds	r7, #44	; 0x2c
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <compute_ADC_map>:

void compute_ADC_map(uint32_t *arr){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	6078      	str	r0, [r7, #4]

	float freq,tim_arr;

	for(int i=0; i < LOW_LEVEL; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e01f      	b.n	800143e <compute_ADC_map+0x4e>
		freq = MIN_FREQ;
 80013fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001402:	613b      	str	r3, [r7, #16]
		tim_arr = AUDIO_CLK/(N_SAMPLES*freq);
 8001404:	edd7 7a04 	vldr	s15, [r7, #16]
 8001408:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80014fc <compute_ADC_map+0x10c>
 800140c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001410:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001500 <compute_ADC_map+0x110>
 8001414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001418:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001422:	330f      	adds	r3, #15
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	edd7 7a03 	vldr	s15, [r7, #12]
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	601a      	str	r2, [r3, #0]
	for(int i=0; i < LOW_LEVEL; i++){
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2bbf      	cmp	r3, #191	; 0xbf
 8001442:	dddc      	ble.n	80013fe <compute_ADC_map+0xe>
	}

	for(int i=LOW_LEVEL; i < HIGH_LEVEL; i++){
 8001444:	23c0      	movs	r3, #192	; 0xc0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e027      	b.n	800149a <compute_ADC_map+0xaa>
		freq = ADC_map(i, LOW_LEVEL, HIGH_LEVEL, MIN_FREQ, MAX_FREQ);
 800144a:	69b8      	ldr	r0, [r7, #24]
 800144c:	231e      	movs	r3, #30
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	f640 4262 	movw	r2, #3170	; 0xc62
 8001456:	21c0      	movs	r1, #192	; 0xc0
 8001458:	f7ff ff7a 	bl	8001350 <ADC_map>
 800145c:	ed87 0a04 	vstr	s0, [r7, #16]
		tim_arr = AUDIO_CLK/(N_SAMPLES*freq);
 8001460:	edd7 7a04 	vldr	s15, [r7, #16]
 8001464:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80014fc <compute_ADC_map+0x10c>
 8001468:	ee27 7a87 	vmul.f32	s14, s15, s14
 800146c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001500 <compute_ADC_map+0x110>
 8001470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001474:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800147e:	330f      	adds	r3, #15
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	edd7 7a03 	vldr	s15, [r7, #12]
 800148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148e:	ee17 2a90 	vmov	r2, s15
 8001492:	601a      	str	r2, [r3, #0]
	for(int i=LOW_LEVEL; i < HIGH_LEVEL; i++){
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3301      	adds	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f640 4261 	movw	r2, #3169	; 0xc61
 80014a0:	4293      	cmp	r3, r2
 80014a2:	ddd2      	ble.n	800144a <compute_ADC_map+0x5a>
	}

	for(int i=HIGH_LEVEL; i < ADC_RES; i++){
 80014a4:	f640 4362 	movw	r3, #3170	; 0xc62
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e01e      	b.n	80014ea <compute_ADC_map+0xfa>
		freq = MAX_FREQ;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <compute_ADC_map+0x114>)
 80014ae:	613b      	str	r3, [r7, #16]
		tim_arr = AUDIO_CLK/(N_SAMPLES*freq);
 80014b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80014fc <compute_ADC_map+0x10c>
 80014b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014bc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001500 <compute_ADC_map+0x110>
 80014c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c4:	edc7 7a03 	vstr	s15, [r7, #12]
		arr[(ADC_RES-1)-i] = (uint32_t)tim_arr;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80014ce:	330f      	adds	r3, #15
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014de:	ee17 2a90 	vmov	r2, s15
 80014e2:	601a      	str	r2, [r3, #0]
	for(int i=HIGH_LEVEL; i < ADC_RES; i++){
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f0:	dbdc      	blt.n	80014ac <compute_ADC_map+0xbc>
	}
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	43000000 	.word	0x43000000
 8001500:	4a742400 	.word	0x4a742400
 8001504:	41f00000 	.word	0x41f00000

08001508 <average>:

uint32_t average(uint32_t *arr, uint32_t N){
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]

	int sum = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<N; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	e00a      	b.n	8001532 <average+0x2a>
		sum = sum + arr[i];
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4413      	add	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<N; i++){
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d8f0      	bhi.n	800151c <average+0x14>
	}

	return sum/N;
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <steady_signal>:

uint8_t steady_signal(uint32_t sample){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

	static uint32_t last_sample = 0;

	if(sample <= last_sample + STEADY_OFFSET && sample >= last_sample - STEADY_OFFSET){
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <steady_signal+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3302      	adds	r3, #2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d80a      	bhi.n	800157a <steady_signal+0x2a>
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <steady_signal+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b02      	subs	r3, #2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d304      	bcc.n	800157a <steady_signal+0x2a>
		last_sample = sample;
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <steady_signal+0x40>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
		return 1;
 8001576:	2301      	movs	r3, #1
 8001578:	e003      	b.n	8001582 <steady_signal+0x32>
	}else{
		last_sample = sample;
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <steady_signal+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]
		return 0;
 8001580:	2300      	movs	r3, #0
	}
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000084 	.word	0x20000084

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 800159a:	b09b      	sub	sp, #108	; 0x6c
 800159c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  sample_dt = F_OUT/F_SAMPLE;
 800159e:	4bad      	ldr	r3, [pc, #692]	; (8001854 <main+0x2c0>)
 80015a0:	4aad      	ldr	r2, [pc, #692]	; (8001858 <main+0x2c4>)
 80015a2:	601a      	str	r2, [r3, #0]
  sample_N  = F_SAMPLE/F_OUT;
 80015a4:	4bad      	ldr	r3, [pc, #692]	; (800185c <main+0x2c8>)
 80015a6:	2232      	movs	r2, #50	; 0x32
 80015a8:	801a      	strh	r2, [r3, #0]

  uint32_t ADC_meanSample 		= 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015b0:	f102 021c 	add.w	r2, r2, #28
 80015b4:	6013      	str	r3, [r2, #0]
  uint32_t ADC_rawSample		= 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015bc:	f102 0210 	add.w	r2, r2, #16
 80015c0:	6013      	str	r3, [r2, #0]
  uint32_t ADC_auxBuf[ADC_BUF_HALF_LEN];
  uint32_t wave_period 		= 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015c8:	f102 020c 	add.w	r2, r2, #12
 80015cc:	6013      	str	r3, [r2, #0]
  uint32_t last_wave_period = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015d4:	f102 0208 	add.w	r2, r2, #8
 80015d8:	6013      	str	r3, [r2, #0]

  uint32_t ADC_map[ADC_RES];

  uint32_t len = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015e0:	f102 0204 	add.w	r2, r2, #4
 80015e4:	6013      	str	r3, [r2, #0]

  int TIM_isStopped = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015ec:	f102 0218 	add.w	r2, r2, #24
 80015f0:	6013      	str	r3, [r2, #0]
  int TIM_onHighFreq = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015f8:	6013      	str	r3, [r2, #0]

  int i = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001600:	f102 0214 	add.w	r2, r2, #20
 8001604:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f000 ff0b 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160a:	f000 f93d 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160e:	f000 fb31 	bl	8001c74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001612:	f000 fa1f 	bl	8001a54 <MX_I2C1_Init>
  MX_DMA_Init();
 8001616:	f000 faef 	bl	8001bf8 <MX_DMA_Init>
  MX_DAC_Init();
 800161a:	f000 f9f1 	bl	8001a00 <MX_DAC_Init>
  MX_TIM2_Init();
 800161e:	f000 fa75 	bl	8001b0c <MX_TIM2_Init>
  MX_I2S3_Init();
 8001622:	f000 fa45 	bl	8001ab0 <MX_I2S3_Init>
  MX_ADC1_Init();
 8001626:	f000 f999 	bl	800195c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800162a:	f000 fabb 	bl	8001ba4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	498b      	ldr	r1, [pc, #556]	; (8001860 <main+0x2cc>)
 8001632:	488c      	ldr	r0, [pc, #560]	; (8001864 <main+0x2d0>)
 8001634:	f000 ffce 	bl	80025d4 <HAL_ADC_Start_DMA>

  CS43_Init(hi2c1, CS43_MODE_ANALOG);
 8001638:	4c8b      	ldr	r4, [pc, #556]	; (8001868 <main+0x2d4>)
 800163a:	2301      	movs	r3, #1
 800163c:	9311      	str	r3, [sp, #68]	; 0x44
 800163e:	4668      	mov	r0, sp
 8001640:	f104 0310 	add.w	r3, r4, #16
 8001644:	2244      	movs	r2, #68	; 0x44
 8001646:	4619      	mov	r1, r3
 8001648:	f005 fd42 	bl	80070d0 <memcpy>
 800164c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001650:	f7ff fc14 	bl	8000e7c <CS43_Init>
  CS43_SetVolume(FULL_VOLUME);
 8001654:	2023      	movs	r0, #35	; 0x23
 8001656:	f7ff fd8f 	bl	8001178 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800165a:	2003      	movs	r0, #3
 800165c:	f7ff fd30 	bl	80010c0 <CS43_Enable_RightLeft>
  CS43_Start();
 8001660:	f7ff fdcc 	bl	80011fc <CS43_Start>

  // Dummy data for Clock Enabling
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_data, 4);
 8001664:	2204      	movs	r2, #4
 8001666:	4981      	ldr	r1, [pc, #516]	; (800186c <main+0x2d8>)
 8001668:	4881      	ldr	r0, [pc, #516]	; (8001870 <main+0x2dc>)
 800166a:	f003 fc63 	bl	8004f34 <HAL_I2S_Transmit_DMA>

  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start(&htim2);
 800166e:	4881      	ldr	r0, [pc, #516]	; (8001874 <main+0x2e0>)
 8001670:	f004 feca 	bl	8006408 <HAL_TIM_Base_Start>

  compute_sinewave();
 8001674:	f7ff fe14 	bl	80012a0 <compute_sinewave>
  compute_ADC_map(ADC_map);
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	3b20      	subs	r3, #32
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff feb6 	bl	80013f0 <compute_ADC_map>

  //HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sinewave, N_SAMPLES, DAC_ALIGN_12B_R); //DAC_ALIGN_12B_R
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	4a7b      	ldr	r2, [pc, #492]	; (8001878 <main+0x2e4>)
 800168c:	2100      	movs	r1, #0
 800168e:	487b      	ldr	r0, [pc, #492]	; (800187c <main+0x2e8>)
 8001690:	f001 fc8e 	bl	8002fb0 <HAL_DAC_Start_DMA>


  HAL_Delay(10);
 8001694:	200a      	movs	r0, #10
 8001696:	f000 ff35 	bl	8002504 <HAL_Delay>

	  /*
	   * 	COMPUTE MEAN OF ADC SAMPLES
	   */

	  if(ADC_isHalfCplt){
 800169a:	4b79      	ldr	r3, [pc, #484]	; (8001880 <main+0x2ec>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03b      	beq.n	800171c <main+0x188>

		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 80016a4:	2300      	movs	r3, #0
 80016a6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016aa:	f102 0214 	add.w	r2, r2, #20
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e01f      	b.n	80016f2 <main+0x15e>
			  ADC_auxBuf[i] = adc_buf[i];
 80016b2:	4a6b      	ldr	r2, [pc, #428]	; (8001860 <main+0x2cc>)
 80016b4:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016b8:	f103 0314 	add.w	r3, r3, #20
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c2:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016c6:	f103 0314 	add.w	r3, r3, #20
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 80016d2:	f101 0120 	add.w	r1, r1, #32
 80016d6:	440b      	add	r3, r1
 80016d8:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 80016dc:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016e0:	f103 0314 	add.w	r3, r3, #20
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016ec:	f102 0214 	add.w	r2, r2, #20
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016f6:	f103 0314 	add.w	r3, r3, #20
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b1f      	cmp	r3, #31
 80016fe:	ddd8      	ble.n	80016b2 <main+0x11e>
		  }
		  ADC_meanSample = average(ADC_auxBuf,ADC_BUF_HALF_LEN);
 8001700:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001704:	2120      	movs	r1, #32
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fefe 	bl	8001508 <average>
 800170c:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001710:	f103 031c 	add.w	r3, r3, #28
 8001714:	6018      	str	r0, [r3, #0]
		  ADC_isHalfCplt = 0;
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <main+0x2ec>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	  }

	  if(ADC_isCplt){
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <main+0x2f0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <main+0x20c>

		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 8001726:	2300      	movs	r3, #0
 8001728:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800172c:	f102 0214 	add.w	r2, r2, #20
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e020      	b.n	8001776 <main+0x1e2>
			  ADC_auxBuf[i] = adc_buf[ADC_BUF_HALF_LEN + i];
 8001734:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001738:	f103 0314 	add.w	r3, r3, #20
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3320      	adds	r3, #32
 8001740:	4a47      	ldr	r2, [pc, #284]	; (8001860 <main+0x2cc>)
 8001742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001746:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800174a:	f103 0314 	add.w	r3, r3, #20
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001756:	f101 0120 	add.w	r1, r1, #32
 800175a:	440b      	add	r3, r1
 800175c:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(i=0; i<ADC_BUF_HALF_LEN; i++){
 8001760:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001764:	f103 0314 	add.w	r3, r3, #20
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001770:	f102 0214 	add.w	r2, r2, #20
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800177a:	f103 0314 	add.w	r3, r3, #20
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b1f      	cmp	r3, #31
 8001782:	ddd7      	ble.n	8001734 <main+0x1a0>
		  }
		  ADC_meanSample = average(ADC_auxBuf,ADC_BUF_HALF_LEN);
 8001784:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001788:	2120      	movs	r1, #32
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff febc 	bl	8001508 <average>
 8001790:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001794:	f103 031c 	add.w	r3, r3, #28
 8001798:	6018      	str	r0, [r3, #0]
		  ADC_isCplt = 0;
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <main+0x2f0>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]

	  /*
	   * 	CONVERT SAMPLE TO PERIOD
	   */

	  if(ADC_meanSample > LOW_LEVEL){
 80017a0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017a4:	f103 031c 	add.w	r3, r3, #28
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2bc0      	cmp	r3, #192	; 0xc0
 80017ac:	d937      	bls.n	800181e <main+0x28a>

		  //Check if we come from a '0 Hz state'
		  if(TIM_isStopped){
 80017ae:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017b2:	f103 0318 	add.w	r3, r3, #24
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <main+0x238>
			  //HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sinewave, N_SAMPLES, DAC_ALIGN_12B_R);
			  //CS43_Headphones_Mute(CS43_NO_MUTE);
			  CS43_Start();
 80017bc:	f7ff fd1e 	bl	80011fc <CS43_Start>
			  TIM_isStopped = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017c6:	f102 0218 	add.w	r2, r2, #24
 80017ca:	6013      	str	r3, [r2, #0]
		  }

		  //Convert Sample to Period Value
		  wave_period = ADC_map[ADC_RES - ADC_meanSample];
 80017cc:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017d0:	f103 031c 	add.w	r3, r3, #28
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	3b20      	subs	r3, #32
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017e8:	f102 020c 	add.w	r2, r2, #12
 80017ec:	6013      	str	r3, [r2, #0]
#ifdef PRINT_DEBUG
		  printf("ADC: %ld\tPERIOD: %ld\r\n",ADC_meanSample,wave_period);
#endif
		  //Change Timer Period
		  if(!steady_signal(ADC_meanSample)){
 80017ee:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017f2:	f103 031c 	add.w	r3, r3, #28
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f7ff feaa 	bl	8001550 <steady_signal>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d123      	bne.n	800184a <main+0x2b6>
			  htim2.Instance->ARR = (uint32_t)(wave_period - 1);
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <main+0x2e0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800180a:	f102 020c 	add.w	r2, r2, #12
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	3a01      	subs	r2, #1
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
			  htim2.Instance->EGR = TIM_EGR_UG;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <main+0x2e0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	e015      	b.n	800184a <main+0x2b6>
		  }

	  }else if(ADC_meanSample <= LOW_LEVEL && TIM_isStopped == 0){
 800181e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001822:	f103 031c 	add.w	r3, r3, #28
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2bc0      	cmp	r3, #192	; 0xc0
 800182a:	d80e      	bhi.n	800184a <main+0x2b6>
 800182c:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001830:	f103 0318 	add.w	r3, r3, #24
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <main+0x2b6>

		  //Disable Timer (0Hz)
		  //HAL_DAC_Stop_DMA(&hdac, DAC1_CHANNEL_1);
		  //CS43_Headphones_Mute(CS43_MUTE);
		  CS43_Stop();
 800183a:	f7ff fd21 	bl	8001280 <CS43_Stop>
		  TIM_isStopped = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001844:	f102 0218 	add.w	r2, r2, #24
 8001848:	6013      	str	r3, [r2, #0]
	  }

	HAL_Delay(5);
 800184a:	2005      	movs	r0, #5
 800184c:	f000 fe5a 	bl	8002504 <HAL_Delay>
	  if(ADC_isHalfCplt){
 8001850:	e723      	b.n	800169a <main+0x106>
 8001852:	bf00      	nop
 8001854:	200005fc 	.word	0x200005fc
 8001858:	3ca3d70a 	.word	0x3ca3d70a
 800185c:	20000088 	.word	0x20000088
 8001860:	20000468 	.word	0x20000468
 8001864:	200001a8 	.word	0x200001a8
 8001868:	2000008c 	.word	0x2000008c
 800186c:	200000e0 	.word	0x200000e0
 8001870:	20000600 	.word	0x20000600
 8001874:	20000568 	.word	0x20000568
 8001878:	20000268 	.word	0x20000268
 800187c:	200001f4 	.word	0x200001f4
 8001880:	20000080 	.word	0x20000080
 8001884:	20000081 	.word	0x20000081

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2230      	movs	r2, #48	; 0x30
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fc28 	bl	80070ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <SystemClock_Config+0xcc>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <SystemClock_Config+0xcc>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <SystemClock_Config+0xcc>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <SystemClock_Config+0xd0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a21      	ldr	r2, [pc, #132]	; (8001958 <SystemClock_Config+0xd0>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <SystemClock_Config+0xd0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f8:	2308      	movs	r3, #8
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001902:	2302      	movs	r3, #2
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001906:	2307      	movs	r3, #7
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	4618      	mov	r0, r3
 8001910:	f003 ff76 	bl	8005800 <HAL_RCC_OscConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800191a:	f000 fa61 	bl	8001de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2302      	movs	r3, #2
 8001924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800192a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800192e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2105      	movs	r1, #5
 800193c:	4618      	mov	r0, r3
 800193e:	f004 f9d7 	bl	8005cf0 <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001948:	f000 fa4a 	bl	8001de0 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_ADC1_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_ADC1_Init+0x98>)
 800198a:	2201      	movs	r2, #1
 800198c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_ADC1_Init+0x98>)
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <MX_ADC1_Init+0xa0>)
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019be:	f000 fdc5 	bl	800254c <HAL_ADC_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019c8:	f000 fa0a 	bl	8001de0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019cc:	230b      	movs	r3, #11
 80019ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019de:	f000 ff13 	bl	8002808 <HAL_ADC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019e8:	f000 f9fa 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001a8 	.word	0x200001a8
 80019f8:	40012000 	.word	0x40012000
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_DAC_Init+0x4c>)
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <MX_DAC_Init+0x50>)
 8001a12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_DAC_Init+0x4c>)
 8001a16:	f001 faa8 	bl	8002f6a <HAL_DAC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a20:	f000 f9de 	bl	8001de0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001a24:	2324      	movs	r3, #36	; 0x24
 8001a26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_DAC_Init+0x4c>)
 8001a34:	f001 fba8 	bl	8003188 <HAL_DAC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a3e:	f000 f9cf 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001f4 	.word	0x200001f4
 8001a50:	40007400 	.word	0x40007400

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f002 f979 	bl	8003d88 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f9a0 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000008c 	.word	0x2000008c
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <MX_I2S3_Init+0x58>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ad8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001adc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_I2S3_Init+0x54>)
 8001af2:	f003 f8df 	bl	8004cb4 <HAL_I2S_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001afc:	f000 f970 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000600 	.word	0x20000600
 8001b08:	40003c00 	.word	0x40003c00

08001b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	463b      	mov	r3, r7
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21-1;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b32:	2214      	movs	r2, #20
 8001b34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b3e:	2213      	movs	r2, #19
 8001b40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4e:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b50:	f004 fc0a 	bl	8006368 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b5a:	f000 f941 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b6c:	f004 fdbc 	bl	80066e8 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b76:	f000 f933 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b88:	f004 ffd8 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b92:	f000 f925 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000568 	.word	0x20000568

08001ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_USART2_UART_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	f005 f83e 	bl	8006c5c <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f8fb 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200005b0 	.word	0x200005b0
 8001bf4:	40004400 	.word	0x40004400

08001bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_DMA_Init+0x78>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2010      	movs	r0, #16
 8001c3c:	f001 f95f 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c40:	2010      	movs	r0, #16
 8001c42:	f001 f978 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	202f      	movs	r0, #47	; 0x2f
 8001c4c:	f001 f957 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c50:	202f      	movs	r0, #47	; 0x2f
 8001c52:	f001 f970 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2038      	movs	r0, #56	; 0x38
 8001c5c:	f001 f94f 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c60:	2038      	movs	r0, #56	; 0x38
 8001c62:	f001 f968 	bl	8002f36 <HAL_NVIC_EnableIRQ>

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a33      	ldr	r2, [pc, #204]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_GPIO_Init+0x108>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d16:	2200      	movs	r2, #0
 8001d18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001d1c:	4818      	ldr	r0, [pc, #96]	; (8001d80 <MX_GPIO_Init+0x10c>)
 8001d1e:	f002 f819 	bl	8003d54 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4813      	ldr	r0, [pc, #76]	; (8001d84 <MX_GPIO_Init+0x110>)
 8001d38:	f001 fe70 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480e      	ldr	r0, [pc, #56]	; (8001d88 <MX_GPIO_Init+0x114>)
 8001d50:	f001 fe64 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d54:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d58:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_GPIO_Init+0x10c>)
 8001d6e:	f001 fe55 	bl	8003a1c <HAL_GPIO_Init>

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
//
//		i_t++;
//		if(i_t >= sample_N) i_t = 0;
//	}

}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

	ADC_isHalfCplt = 1;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000080 	.word	0x20000080

08001dc0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

	ADC_isCplt = 1;
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x1c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000081 	.word	0x20000081

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_MspInit+0x4c>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_MspInit+0x4c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f001 f85c 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d157      	bne.n	8001f0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e96:	2302      	movs	r3, #2
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481d      	ldr	r0, [pc, #116]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001eaa:	f001 fdb7 	bl	8003a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_ADC_MspInit+0xec>)
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ecc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ed0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef2:	480c      	ldr	r0, [pc, #48]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001ef4:	f001 fa22 	bl	800333c <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001efe:	f7ff ff6f 	bl	8001de0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012000 	.word	0x40012000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020800 	.word	0x40020800
 8001f24:	20000208 	.word	0x20000208
 8001f28:	40026410 	.word	0x40026410

08001f2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <HAL_DAC_MspInit+0xdc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d158      	bne.n	8002000 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_DAC_MspInit+0xe0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f86:	2310      	movs	r3, #16
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <HAL_DAC_MspInit+0xe4>)
 8001f9a:	f001 fd3f 	bl	8003a1c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_DAC_MspInit+0xec>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fa6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001fe6:	f001 f9a9 	bl	800333c <HAL_DMA_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001ff0:	f7ff fef6 	bl	8001de0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_DAC_MspInit+0xe8>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40007400 	.word	0x40007400
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	200000e8 	.word	0x200000e8
 8002018:	40026088 	.word	0x40026088

0800201c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_I2C_MspInit+0x84>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800205a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002060:	2312      	movs	r3, #18
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002064:	2301      	movs	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206c:	2304      	movs	r3, #4
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <HAL_I2C_MspInit+0x8c>)
 8002078:	f001 fcd0 	bl	8003a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 8002086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_I2C_MspInit+0x88>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40005400 	.word	0x40005400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08e      	sub	sp, #56	; 0x38
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_I2S_MspInit+0x164>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	f040 8095 	bne.w	8002208 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80020de:	2301      	movs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fffa 	bl	80060e8 <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80020fa:	f7ff fe71 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_I2S_MspInit+0x168>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_I2S_MspInit+0x168>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_I2S_MspInit+0x168>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002152:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002164:	2306      	movs	r3, #6
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	482a      	ldr	r0, [pc, #168]	; (8002218 <HAL_I2S_MspInit+0x16c>)
 8002170:	f001 fc54 	bl	8003a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002186:	2306      	movs	r3, #6
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <HAL_I2S_MspInit+0x170>)
 8002192:	f001 fc43 	bl	8003a1c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_I2S_MspInit+0x174>)
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <HAL_I2S_MspInit+0x178>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_I2S_MspInit+0x174>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021bc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021cc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021d6:	2204      	movs	r2, #4
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021dc:	2203      	movs	r2, #3
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <HAL_I2S_MspInit+0x174>)
 80021ee:	f001 f8a5 	bl	800333c <HAL_DMA_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80021f8:	f7ff fdf2 	bl	8001de0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_I2S_MspInit+0x174>)
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
 8002202:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_I2S_MspInit+0x174>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40003c00 	.word	0x40003c00
 8002214:	40023800 	.word	0x40023800
 8002218:	40020800 	.word	0x40020800
 800221c:	40020000 	.word	0x40020000
 8002220:	20000148 	.word	0x20000148
 8002224:	400260b8 	.word	0x400260b8

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d115      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_TIM_Base_MspInit+0x48>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_TIM_Base_MspInit+0x48>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_TIM_Base_MspInit+0x48>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	201c      	movs	r0, #28
 800225c:	f000 fe4f 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002260:	201c      	movs	r0, #28
 8002262:	f000 fe68 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_UART_MspInit+0x84>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12b      	bne.n	80022ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_UART_MspInit+0x88>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_UART_MspInit+0x88>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_UART_MspInit+0x88>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_UART_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_UART_MspInit+0x88>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_UART_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ce:	230c      	movs	r3, #12
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022de:	2307      	movs	r3, #7
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_UART_MspInit+0x8c>)
 80022ea:	f001 fb97 	bl	8003a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40004400 	.word	0x40004400
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <NMI_Handler+0x4>

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler+0x4>

08002316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <UsageFault_Handler+0x4>

08002322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002350:	f000 f8b8 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <DMA1_Stream5_IRQHandler+0x10>)
 800235e:	f001 f8f3 	bl	8003548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200000e8 	.word	0x200000e8

0800236c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM2_IRQHandler+0x10>)
 8002372:	f004 f8b1 	bl	80064d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000568 	.word	0x20000568

08002380 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA1_Stream7_IRQHandler+0x10>)
 8002386:	f001 f8df 	bl	8003548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000148 	.word	0x20000148

08002394 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <DMA2_Stream0_IRQHandler+0x10>)
 800239a:	f001 f8d5 	bl	8003548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000208 	.word	0x20000208

080023a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SystemInit+0x20>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <SystemInit+0x20>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f6:	f7ff ffd7 	bl	80023a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f004 fe45 	bl	8007088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff f8c9 	bl	8001594 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002410:	08008390 	.word	0x08008390
  ldr r2, =_sbss
 8002414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002418:	20000650 	.word	0x20000650

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 fd4d 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff fcca 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd65 	bl	8002f52 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a0:	f000 fd2d 	bl	8002efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008
 80024e8:	2000064c 	.word	0x2000064c

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000064c 	.word	0x2000064c

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e033      	b.n	80025ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fc66 	bl	8001e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002592:	f023 0302 	bic.w	r3, r3, #2
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa54 	bl	8002a4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	e001      	b.n	80025c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Start_DMA+0x1e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0e9      	b.n	80027c6 <HAL_ADC_Start_DMA+0x1f2>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d018      	beq.n	800263a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002618:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_ADC_Start_DMA+0x1fc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_ADC_Start_DMA+0x200>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9a      	lsrs	r2, r3, #18
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800262c:	e002      	b.n	8002634 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3b01      	subs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002648:	d107      	bne.n	800265a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002658:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	f040 80a1 	bne.w	80027ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002694:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a8:	d106      	bne.n	80026b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f023 0206 	bic.w	r2, r3, #6
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
 80026b6:	e002      	b.n	80026be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <HAL_ADC_Start_DMA+0x204>)
 80026c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	4a43      	ldr	r2, [pc, #268]	; (80027dc <HAL_ADC_Start_DMA+0x208>)
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	4a42      	ldr	r2, [pc, #264]	; (80027e0 <HAL_ADC_Start_DMA+0x20c>)
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <HAL_ADC_Start_DMA+0x210>)
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	334c      	adds	r3, #76	; 0x4c
 8002716:	4619      	mov	r1, r3
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f000 febc 	bl	8003498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12a      	bne.n	8002782 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_ADC_Start_DMA+0x214>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d015      	beq.n	8002762 <HAL_ADC_Start_DMA+0x18e>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_ADC_Start_DMA+0x218>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d105      	bne.n	800274c <HAL_ADC_Start_DMA+0x178>
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_ADC_Start_DMA+0x204>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_ADC_Start_DMA+0x21c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d136      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_ADC_Start_DMA+0x204>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d130      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d129      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e020      	b.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_ADC_Start_DMA+0x214>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d11b      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	e00b      	b.n	80027c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	40012300 	.word	0x40012300
 80027dc:	08002c45 	.word	0x08002c45
 80027e0:	08002cff 	.word	0x08002cff
 80027e4:	08002d1b 	.word	0x08002d1b
 80027e8:	40012000 	.word	0x40012000
 80027ec:	40012100 	.word	0x40012100
 80027f0:	40012200 	.word	0x40012200

080027f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1c>
 8002820:	2302      	movs	r3, #2
 8002822:	e105      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x228>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b09      	cmp	r3, #9
 8002832:	d925      	bls.n	8002880 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	2207      	movs	r2, #7
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43da      	mvns	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	400a      	ands	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	4603      	mov	r3, r0
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4403      	add	r3, r0
 8002872:	3b1e      	subs	r3, #30
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e022      	b.n	80028c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	2207      	movs	r2, #7
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	400a      	ands	r2, r1
 80028a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6919      	ldr	r1, [r3, #16]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4403      	add	r3, r0
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d824      	bhi.n	8002918 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	221f      	movs	r2, #31
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b05      	subs	r3, #5
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	635a      	str	r2, [r3, #52]	; 0x34
 8002916:	e04c      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d824      	bhi.n	800296a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43da      	mvns	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	400a      	ands	r2, r1
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3b23      	subs	r3, #35	; 0x23
 800295c:	fa00 f203 	lsl.w	r2, r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
 8002968:	e023      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b41      	subs	r3, #65	; 0x41
 800297c:	221f      	movs	r2, #31
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	400a      	ands	r2, r1
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	3b41      	subs	r3, #65	; 0x41
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_ADC_ConfigChannel+0x234>)
 80029b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_ADC_ConfigChannel+0x238>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d109      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1cc>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_ADC_ConfigChannel+0x238>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d003      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x1e6>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b11      	cmp	r3, #17
 80029ec:	d11b      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_ADC_ConfigChannel+0x23c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_ADC_ConfigChannel+0x240>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9a      	lsrs	r2, r3, #18
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40012300 	.word	0x40012300
 8002a40:	40012000 	.word	0x40012000
 8002a44:	20000000 	.word	0x20000000
 8002a48:	431bde83 	.word	0x431bde83

08002a4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <ADC_Init+0x1f0>)
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	021a      	lsls	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <ADC_Init+0x1f4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	e00f      	b.n	8002b4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0202 	bic.w	r2, r2, #2
 8002b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
 8002b64:	005a      	lsls	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	035a      	lsls	r2, r3, #13
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e007      	b.n	8002bc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	051a      	lsls	r2, r3, #20
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c02:	025a      	lsls	r2, r3, #9
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	029a      	lsls	r2, r3, #10
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40012300 	.word	0x40012300
 8002c40:	0f000001 	.word	0x0f000001

08002c44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d13c      	bne.n	8002cd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12b      	bne.n	8002cd0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d127      	bne.n	8002cd0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d119      	bne.n	8002cd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0220 	bic.w	r2, r2, #32
 8002caa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff f875 	bl	8001dc0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cd6:	e00e      	b.n	8002cf6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fd85 	bl	80027f4 <HAL_ADC_ErrorCallback>
}
 8002cea:	e004      	b.n	8002cf6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff f847 	bl	8001da0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f043 0204 	orr.w	r2, r3, #4
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff fd5a 	bl	80027f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff3e 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff8e 	bl	8002e3c <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5d 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff31 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa2 	bl	8002ea4 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e014      	b.n	8002fa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fe ffcd 	bl	8001f2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	795b      	ldrb	r3, [r3, #5]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DAC_Start_DMA+0x22>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0ab      	b.n	800312a <HAL_DAC_Start_DMA+0x17a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12f      	bne.n	8003044 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_DAC_Start_DMA+0x184>)
 8002fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_DAC_Start_DMA+0x188>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <HAL_DAC_Start_DMA+0x18c>)
 8002ffa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d013      	beq.n	800303a <HAL_DAC_Start_DMA+0x8a>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d845      	bhi.n	80030a4 <HAL_DAC_Start_DMA+0xf4>
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_DAC_Start_DMA+0x76>
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d005      	beq.n	8003030 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003024:	e03e      	b.n	80030a4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	613b      	str	r3, [r7, #16]
        break;
 800302e:	e03c      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	613b      	str	r3, [r7, #16]
        break;
 8003038:	e037      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3310      	adds	r3, #16
 8003040:	613b      	str	r3, [r7, #16]
        break;
 8003042:	e032      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_DAC_Start_DMA+0x190>)
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_DAC_Start_DMA+0x194>)
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <HAL_DAC_Start_DMA+0x198>)
 800305a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800306a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b08      	cmp	r3, #8
 8003070:	d013      	beq.n	800309a <HAL_DAC_Start_DMA+0xea>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d817      	bhi.n	80030a8 <HAL_DAC_Start_DMA+0xf8>
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_DAC_Start_DMA+0xd6>
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d005      	beq.n	8003090 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003084:	e010      	b.n	80030a8 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	613b      	str	r3, [r7, #16]
        break;
 800308e:	e00c      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3318      	adds	r3, #24
 8003096:	613b      	str	r3, [r7, #16]
        break;
 8003098:	e007      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	331c      	adds	r3, #28
 80030a0:	613b      	str	r3, [r7, #16]
        break;
 80030a2:	e002      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <HAL_DAC_Start_DMA+0xfa>
        break;
 80030a8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6898      	ldr	r0, [r3, #8]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	f000 f9e5 	bl	8003498 <HAL_DMA_Start_IT>
 80030ce:	4603      	mov	r3, r0
 80030d0:	75fb      	strb	r3, [r7, #23]
 80030d2:	e010      	b.n	80030f6 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68d8      	ldr	r0, [r3, #12]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	f000 f9d3 	bl	8003498 <HAL_DMA_Start_IT>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e005      	b.n	8003128 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003128:	7dfb      	ldrb	r3, [r7, #23]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	08003227 	.word	0x08003227
 8003138:	08003249 	.word	0x08003249
 800313c:	08003265 	.word	0x08003265
 8003140:	080032cf 	.word	0x080032cf
 8003144:	080032f1 	.word	0x080032f1
 8003148:	0800330d 	.word	0x0800330d

0800314c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	795b      	ldrb	r3, [r3, #5]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_DAC_ConfigChannel+0x18>
 800319c:	2302      	movs	r3, #2
 800319e:	e03c      	b.n	800321a <HAL_DAC_ConfigChannel+0x92>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2202      	movs	r2, #2
 80031aa:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4013      	ands	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	22c0      	movs	r2, #192	; 0xc0
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ff89 	bl	800314c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	711a      	strb	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff82 	bl	8003160 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff ff78 	bl	8003174 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	711a      	strb	r2, [r3, #4]
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff ffd8 	bl	8003292 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	711a      	strb	r2, [r3, #4]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff ffd1 	bl	80032a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff ffc7 	bl	80032ba <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	711a      	strb	r2, [r3, #4]
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff f8d0 	bl	80024ec <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e099      	b.n	800348c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003378:	e00f      	b.n	800339a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337a:	f7ff f8b7 	bl	80024ec <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b05      	cmp	r3, #5
 8003386:	d908      	bls.n	800339a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e078      	b.n	800348c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e8      	bne.n	800337a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_DMA_Init+0x158>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d107      	bne.n	8003404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4313      	orrs	r3, r2
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b04      	cmp	r3, #4
 800342c:	d117      	bne.n	800345e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa6f 	bl	8003924 <DMA_CheckFifoParam>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800345a:	2301      	movs	r3, #1
 800345c:	e016      	b.n	800348c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa26 	bl	80038b8 <DMA_CalcBaseAndBitshift>
 800346c:	4603      	mov	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	223f      	movs	r2, #63	; 0x3f
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	f010803f 	.word	0xf010803f

08003498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_DMA_Start_IT+0x26>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e040      	b.n	8003540 <HAL_DMA_Start_IT+0xa8>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d12f      	bne.n	8003532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f9b8 	bl	800385c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	223f      	movs	r2, #63	; 0x3f
 80034f2:	409a      	lsls	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0216 	orr.w	r2, r2, #22
 8003506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0208 	orr.w	r2, r2, #8
 800351e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e005      	b.n	800353e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_DMA_IRQHandler+0x258>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a92      	ldr	r2, [pc, #584]	; (80037a4 <HAL_DMA_IRQHandler+0x25c>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	2208      	movs	r2, #8
 8003574:	409a      	lsls	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2208      	movs	r2, #8
 80035a2:	409a      	lsls	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	2201      	movs	r2, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d012      	beq.n	80035ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	2201      	movs	r2, #1
 80035d8:	409a      	lsls	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2204      	movs	r2, #4
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	2204      	movs	r2, #4
 800360e:	409a      	lsls	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2210      	movs	r2, #16
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d043      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d03c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	2210      	movs	r2, #16
 8003644:	409a      	lsls	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d018      	beq.n	800368a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d024      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e01f      	b.n	80036b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
 8003688:	e016      	b.n	80036b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0208 	bic.w	r2, r2, #8
 80036a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2220      	movs	r2, #32
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 808e 	beq.w	80037e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	2220      	movs	r2, #32
 80036e0:	409a      	lsls	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d136      	bne.n	8003760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0216 	bic.w	r2, r2, #22
 8003700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_DMA_IRQHandler+0x1da>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	223f      	movs	r2, #63	; 0x3f
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07d      	beq.n	8003852 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
        }
        return;
 800375e:	e078      	b.n	8003852 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01c      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	2b00      	cmp	r3, #0
 8003782:	d030      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
 800378c:	e02b      	b.n	80037e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d027      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
 800379e:	e022      	b.n	80037e6 <HAL_DMA_IRQHandler+0x29e>
 80037a0:	20000000 	.word	0x20000000
 80037a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0210 	bic.w	r2, r2, #16
 80037c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d032      	beq.n	8003854 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2205      	movs	r2, #5
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d307      	bcc.n	800382e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f2      	bne.n	8003812 <HAL_DMA_IRQHandler+0x2ca>
 800382c:	e000      	b.n	8003830 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800382e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e000      	b.n	8003854 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003852:	bf00      	nop
    }
  }
}
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d108      	bne.n	800389c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800389a:	e007      	b.n	80038ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	3b10      	subs	r3, #16
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <DMA_CalcBaseAndBitshift+0x64>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038d2:	4a13      	ldr	r2, [pc, #76]	; (8003920 <DMA_CalcBaseAndBitshift+0x68>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d909      	bls.n	80038fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	1d1a      	adds	r2, r3, #4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58
 80038f8:	e007      	b.n	800390a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	aaaaaaab 	.word	0xaaaaaaab
 8003920:	080081a0 	.word	0x080081a0

08003924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11f      	bne.n	800397e <DMA_CheckFifoParam+0x5a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d856      	bhi.n	80039f2 <DMA_CheckFifoParam+0xce>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <DMA_CheckFifoParam+0x28>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	0800395d 	.word	0x0800395d
 8003950:	0800396f 	.word	0x0800396f
 8003954:	0800395d 	.word	0x0800395d
 8003958:	080039f3 	.word	0x080039f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d046      	beq.n	80039f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396c:	e043      	b.n	80039f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003976:	d140      	bne.n	80039fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397c:	e03d      	b.n	80039fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003986:	d121      	bne.n	80039cc <DMA_CheckFifoParam+0xa8>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d837      	bhi.n	80039fe <DMA_CheckFifoParam+0xda>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <DMA_CheckFifoParam+0x70>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039ab 	.word	0x080039ab
 800399c:	080039a5 	.word	0x080039a5
 80039a0:	080039bd 	.word	0x080039bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e030      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d025      	beq.n	8003a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ba:	e022      	b.n	8003a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c4:	d11f      	bne.n	8003a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ca:	e01c      	b.n	8003a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d903      	bls.n	80039da <DMA_CheckFifoParam+0xb6>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d003      	beq.n	80039e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039d8:	e018      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
      break;
 80039de:	e015      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      break;
 80039f0:	e00b      	b.n	8003a0a <DMA_CheckFifoParam+0xe6>
      break;
 80039f2:	bf00      	nop
 80039f4:	e00a      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e008      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e006      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e004      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <DMA_CheckFifoParam+0xe8>
      break;
 8003a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop

08003a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e16b      	b.n	8003d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	f040 815a 	bne.w	8003d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d005      	beq.n	8003a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d130      	bne.n	8003ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 0201 	and.w	r2, r3, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d017      	beq.n	8003b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d123      	bne.n	8003b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	08da      	lsrs	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3208      	adds	r2, #8
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80b4 	beq.w	8003d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <HAL_GPIO_Init+0x30c>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_GPIO_Init+0x30c>)
 8003bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <HAL_GPIO_Init+0x30c>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_GPIO_Init+0x310>)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_GPIO_Init+0x314>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x226>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a51      	ldr	r2, [pc, #324]	; (8003d34 <HAL_GPIO_Init+0x318>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x222>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <HAL_GPIO_Init+0x31c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x21e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4f      	ldr	r2, [pc, #316]	; (8003d3c <HAL_GPIO_Init+0x320>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x21a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <HAL_GPIO_Init+0x324>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x216>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_GPIO_Init+0x328>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x212>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4c      	ldr	r2, [pc, #304]	; (8003d48 <HAL_GPIO_Init+0x32c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x20e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4b      	ldr	r2, [pc, #300]	; (8003d4c <HAL_GPIO_Init+0x330>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x20a>
 8003c22:	2307      	movs	r3, #7
 8003c24:	e00e      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c26:	2308      	movs	r3, #8
 8003c28:	e00c      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c2a:	2306      	movs	r3, #6
 8003c2c:	e00a      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c2e:	2305      	movs	r3, #5
 8003c30:	e008      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c36:	2303      	movs	r3, #3
 8003c38:	e004      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c42:	2300      	movs	r3, #0
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f002 0203 	and.w	r2, r2, #3
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c54:	4935      	ldr	r1, [pc, #212]	; (8003d2c <HAL_GPIO_Init+0x310>)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c86:	4a32      	ldr	r2, [pc, #200]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	f67f ae90 	bls.w	8003a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	; 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d70:	e003      	b.n	8003d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e12b      	b.n	8003ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe f934 	bl	800201c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dec:	f002 f954 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a81      	ldr	r2, [pc, #516]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d807      	bhi.n	8003e0c <HAL_I2C_Init+0x84>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_I2C_Init+0x278>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bf94      	ite	ls
 8003e04:	2301      	movls	r3, #1
 8003e06:	2300      	movhi	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e006      	b.n	8003e1a <HAL_I2C_Init+0x92>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a7d      	ldr	r2, [pc, #500]	; (8004004 <HAL_I2C_Init+0x27c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bf94      	ite	ls
 8003e14:	2301      	movls	r3, #1
 8003e16:	2300      	movhi	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0e7      	b.n	8003ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a78      	ldr	r2, [pc, #480]	; (8004008 <HAL_I2C_Init+0x280>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a6a      	ldr	r2, [pc, #424]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d802      	bhi.n	8003e5c <HAL_I2C_Init+0xd4>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	e009      	b.n	8003e70 <HAL_I2C_Init+0xe8>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a69      	ldr	r2, [pc, #420]	; (800400c <HAL_I2C_Init+0x284>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	3301      	adds	r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	495c      	ldr	r1, [pc, #368]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d819      	bhi.n	8003ec4 <HAL_I2C_Init+0x13c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e59      	subs	r1, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_I2C_Init+0x138>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e59      	subs	r1, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebe:	e051      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	e04f      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d111      	bne.n	8003ef0 <HAL_I2C_Init+0x168>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e012      	b.n	8003f16 <HAL_I2C_Init+0x18e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e58      	subs	r0, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	0099      	lsls	r1, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Init+0x196>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e022      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10e      	bne.n	8003f44 <HAL_I2C_Init+0x1bc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1e58      	subs	r0, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	440b      	add	r3, r1
 8003f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f42:	e00f      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	0099      	lsls	r1, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	6809      	ldr	r1, [r1, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6911      	ldr	r1, [r2, #16]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	000186a0 	.word	0x000186a0
 8004000:	001e847f 	.word	0x001e847f
 8004004:	003d08ff 	.word	0x003d08ff
 8004008:	431bde83 	.word	0x431bde83
 800400c:	10624dd3 	.word	0x10624dd3

08004010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	461a      	mov	r2, r3
 800401c:	460b      	mov	r3, r1
 800401e:	817b      	strh	r3, [r7, #10]
 8004020:	4613      	mov	r3, r2
 8004022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7fe fa62 	bl	80024ec <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b20      	cmp	r3, #32
 8004034:	f040 80e0 	bne.w	80041f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2319      	movs	r3, #25
 800403e:	2201      	movs	r2, #1
 8004040:	4970      	ldr	r1, [pc, #448]	; (8004204 <HAL_I2C_Master_Transmit+0x1f4>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fc58 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	e0d3      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_I2C_Master_Transmit+0x50>
 800405c:	2302      	movs	r3, #2
 800405e:	e0cc      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d007      	beq.n	8004086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2210      	movs	r2, #16
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	893a      	ldrh	r2, [r7, #8]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a50      	ldr	r2, [pc, #320]	; (8004208 <HAL_I2C_Master_Transmit+0x1f8>)
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fac2 	bl	8004658 <I2C_MasterRequestWrite>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e08d      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040f4:	e066      	b.n	80041c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fcd2 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00d      	beq.n	8004122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b04      	cmp	r3, #4
 800410c:	d107      	bne.n	800411e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06b      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d11b      	bne.n	8004198 <HAL_I2C_Master_Transmit+0x188>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d017      	beq.n	8004198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	6a39      	ldr	r1, [r7, #32]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fcc2 	bl	8004b26 <I2C_WaitOnBTFFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00d      	beq.n	80041c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d107      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01a      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d194      	bne.n	80040f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	00100002 	.word	0x00100002
 8004208:	ffff0000 	.word	0xffff0000

0800420c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	461a      	mov	r2, r3
 8004218:	460b      	mov	r3, r1
 800421a:	817b      	strh	r3, [r7, #10]
 800421c:	4613      	mov	r3, r2
 800421e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004220:	f7fe f964 	bl	80024ec <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	f040 820b 	bne.w	800464a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2319      	movs	r3, #25
 800423a:	2201      	movs	r2, #1
 800423c:	497c      	ldr	r1, [pc, #496]	; (8004430 <HAL_I2C_Master_Receive+0x224>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb5a 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
 800424c:	e1fe      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_I2C_Master_Receive+0x50>
 8004258:	2302      	movs	r3, #2
 800425a:	e1f7      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d007      	beq.n	8004282 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2222      	movs	r2, #34	; 0x22
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	893a      	ldrh	r2, [r7, #8]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <HAL_I2C_Master_Receive+0x228>)
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042c4:	8979      	ldrh	r1, [r7, #10]
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fa46 	bl	800475c <I2C_MasterRequestRead>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1b8      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e18c      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b01      	cmp	r3, #1
 8004310:	d11b      	bne.n	800434a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e16c      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	2b02      	cmp	r3, #2
 8004350:	d11b      	bne.n	800438a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	e14c      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043b0:	e138      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	f200 80f1 	bhi.w	800459e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d123      	bne.n	800440c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fbed 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e139      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440a:	e10b      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	2b02      	cmp	r3, #2
 8004412:	d14e      	bne.n	80044b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	4906      	ldr	r1, [pc, #24]	; (8004438 <HAL_I2C_Master_Receive+0x22c>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fa6a 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e10e      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
 800442e:	bf00      	nop
 8004430:	00100002 	.word	0x00100002
 8004434:	ffff0000 	.word	0xffff0000
 8004438:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b0:	e0b8      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2200      	movs	r2, #0
 80044ba:	4966      	ldr	r1, [pc, #408]	; (8004654 <HAL_I2C_Master_Receive+0x448>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fa1b 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0bf      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2200      	movs	r2, #0
 8004516:	494f      	ldr	r1, [pc, #316]	; (8004654 <HAL_I2C_Master_Receive+0x448>)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f9ed 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e091      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800459c:	e042      	b.n	8004624 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fb00 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e04c      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d118      	bne.n	8004624 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	f47f aec2 	bne.w	80043b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800464a:	2302      	movs	r3, #2
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010004 	.word	0x00010004

08004658 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	460b      	mov	r3, r1
 8004666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d006      	beq.n	8004682 <I2C_MasterRequestWrite+0x2a>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d003      	beq.n	8004682 <I2C_MasterRequestWrite+0x2a>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004680:	d108      	bne.n	8004694 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e00b      	b.n	80046ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b12      	cmp	r3, #18
 800469a:	d107      	bne.n	80046ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f91d 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d103      	bne.n	80046dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e035      	b.n	800474c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e8:	d108      	bne.n	80046fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f8:	611a      	str	r2, [r3, #16]
 80046fa:	e01b      	b.n	8004734 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	11db      	asrs	r3, r3, #7
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0306 	and.w	r3, r3, #6
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f063 030f 	orn	r3, r3, #15
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	490e      	ldr	r1, [pc, #56]	; (8004754 <I2C_MasterRequestWrite+0xfc>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f943 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e010      	b.n	800474c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800472a:	897b      	ldrh	r3, [r7, #10]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4907      	ldr	r1, [pc, #28]	; (8004758 <I2C_MasterRequestWrite+0x100>)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f933 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	00010008 	.word	0x00010008
 8004758:	00010002 	.word	0x00010002

0800475c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	460b      	mov	r3, r1
 800476a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d006      	beq.n	8004796 <I2C_MasterRequestRead+0x3a>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d003      	beq.n	8004796 <I2C_MasterRequestRead+0x3a>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004794:	d108      	bne.n	80047a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e00b      	b.n	80047c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	2b11      	cmp	r3, #17
 80047ae:	d107      	bne.n	80047c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f893 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	d103      	bne.n	80047f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e079      	b.n	80048e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fc:	d108      	bne.n	8004810 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047fe:	897b      	ldrh	r3, [r7, #10]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	e05f      	b.n	80048d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	11db      	asrs	r3, r3, #7
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0306 	and.w	r3, r3, #6
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f063 030f 	orn	r3, r3, #15
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4930      	ldr	r1, [pc, #192]	; (80048f0 <I2C_MasterRequestRead+0x194>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f8b9 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e054      	b.n	80048e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4929      	ldr	r1, [pc, #164]	; (80048f4 <I2C_MasterRequestRead+0x198>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f8a9 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e044      	b.n	80048e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004882:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f831 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048aa:	d103      	bne.n	80048b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e017      	b.n	80048e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030e 	orn	r3, r3, #14
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4907      	ldr	r1, [pc, #28]	; (80048f4 <I2C_MasterRequestRead+0x198>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f865 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010008 	.word	0x00010008
 80048f4:	00010002 	.word	0x00010002

080048f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004908:	e025      	b.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004910:	d021      	beq.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fd fdeb 	bl	80024ec <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e023      	b.n	800499e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10d      	bne.n	800497c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	43da      	mvns	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	e00c      	b.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d0b6      	beq.n	800490a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b4:	e051      	b.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d123      	bne.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e046      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a14:	d021      	beq.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fd fd69 	bl	80024ec <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e020      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e00b      	b.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d18d      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f8ce 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e02d      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac8:	d021      	beq.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fd fd0f 	bl	80024ec <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d1ca      	bne.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b32:	e02d      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f88d 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e02d      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4a:	d021      	beq.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4c:	f7fd fcce 	bl	80024ec <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d116      	bne.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d1ca      	bne.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb4:	e042      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d119      	bne.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e029      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fd fc78 	bl	80024ec <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d1b5      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d11b      	bne.n	8004ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e128      	b.n	8004f18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a90      	ldr	r2, [pc, #576]	; (8004f20 <HAL_I2S_Init+0x26c>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fd f9e3 	bl	80020ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d060      	beq.n	8004dd4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e001      	b.n	8004d24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d802      	bhi.n	8004d32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004d32:	2001      	movs	r0, #1
 8004d34:	f001 faba 	bl	80062ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004d38:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d42:	d125      	bne.n	8004d90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d010      	beq.n	8004d6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	3305      	adds	r3, #5
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e01f      	b.n	8004dae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	3305      	adds	r3, #5
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	e00e      	b.n	8004dae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	461a      	mov	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	3305      	adds	r3, #5
 8004dac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4a5c      	ldr	r2, [pc, #368]	; (8004f24 <HAL_I2S_Init+0x270>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	08db      	lsrs	r3, r3, #3
 8004db8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d902      	bls.n	8004de8 <HAL_I2S_Init+0x134>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2bff      	cmp	r3, #255	; 0xff
 8004de6:	d907      	bls.n	8004df8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e08f      	b.n	8004f18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	ea42 0103 	orr.w	r1, r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6851      	ldr	r1, [r2, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68d2      	ldr	r2, [r2, #12]
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6992      	ldr	r2, [r2, #24]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d161      	bne.n	8004f08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_I2S_Init+0x274>)
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_I2S_Init+0x1a4>
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e56:	e001      	b.n	8004e5c <HAL_I2S_Init+0x1a8>
 8004e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	4932      	ldr	r1, [pc, #200]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2S_Init+0x1b8>
 8004e68:	4a31      	ldr	r2, [pc, #196]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e6a:	e001      	b.n	8004e70 <HAL_I2S_Init+0x1bc>
 8004e6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004e70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e74:	f023 030f 	bic.w	r3, r3, #15
 8004e78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_I2S_Init+0x1d4>
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e86:	e001      	b.n	8004e8c <HAL_I2S_Init+0x1d8>
 8004e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_I2S_Init+0x1ea>
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004e9c:	e001      	b.n	8004ea2 <HAL_I2S_Init+0x1ee>
 8004e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eae:	d003      	beq.n	8004eb8 <HAL_I2S_Init+0x204>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e001      	b.n	8004ec4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ef0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <HAL_I2S_Init+0x278>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_I2S_Init+0x24c>
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_I2S_Init+0x27c>)
 8004efe:	e001      	b.n	8004f04 <HAL_I2S_Init+0x250>
 8004f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f04:	897a      	ldrh	r2, [r7, #10]
 8004f06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08005239 	.word	0x08005239
 8004f24:	cccccccd 	.word	0xcccccccd
 8004f28:	0800534d 	.word	0x0800534d
 8004f2c:	40003800 	.word	0x40003800
 8004f30:	40003400 	.word	0x40003400

08004f34 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_I2S_Transmit_DMA+0x1a>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e08e      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2S_Transmit_DMA+0x2e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e086      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d005      	beq.n	8004f82 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e076      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2203      	movs	r2, #3
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d002      	beq.n	8004fae <HAL_I2S_Transmit_DMA+0x7a>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d10a      	bne.n	8004fc4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc2:	e005      	b.n	8004fd0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_I2S_Transmit_DMA+0x144>)
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_I2S_Transmit_DMA+0x148>)
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <HAL_I2S_Transmit_DMA+0x14c>)
 8004fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ff0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ff8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005000:	f7fe fa4a 	bl	8003498 <HAL_DMA_Start_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00f      	beq.n	800502a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e022      	b.n	8005070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005046:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0202 	orr.w	r2, r2, #2
 8005064:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	08005117 	.word	0x08005117
 800507c:	080050d5 	.word	0x080050d5
 8005080:	08005133 	.word	0x08005133

08005084 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0202 	bic.w	r2, r2, #2
 80050f8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ffc5 	bl	8005098 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ffad 	bl	8005084 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0203 	bic.w	r2, r2, #3
 800514e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005168:	f043 0208 	orr.w	r2, r3, #8
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ffa5 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10e      	bne.n	80051d2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ff63 	bl	8005098 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	b292      	uxth	r2, r2
 80051ee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10e      	bne.n	8005230 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005220:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff ff3e 	bl	80050ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b04      	cmp	r3, #4
 8005252:	d13a      	bne.n	80052ca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d109      	bne.n	8005272 <I2S_IRQHandler+0x3a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d102      	bne.n	8005272 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ffb4 	bl	80051da <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d126      	bne.n	80052ca <I2S_IRQHandler+0x92>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d11f      	bne.n	80052ca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005298:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	f043 0202 	orr.w	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fefb 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d136      	bne.n	8005344 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d109      	bne.n	80052f4 <I2S_IRQHandler+0xbc>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d102      	bne.n	80052f4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff45 	bl	800517e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d122      	bne.n	8005344 <I2S_IRQHandler+0x10c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b20      	cmp	r3, #32
 800530a:	d11b      	bne.n	8005344 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800531a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	f043 0204 	orr.w	r2, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff febe 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005344:	bf00      	nop
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4aa2      	ldr	r2, [pc, #648]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005366:	4ba2      	ldr	r3, [pc, #648]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005368:	e001      	b.n	800536e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800536a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a9b      	ldr	r2, [pc, #620]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d101      	bne.n	8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005384:	4b9a      	ldr	r3, [pc, #616]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005386:	e001      	b.n	800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d004      	beq.n	80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 8099 	bne.w	80054d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d107      	bne.n	80053be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f925 	bl	8005608 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9c8 	bl	8005768 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d13a      	bne.n	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d035      	beq.n	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a7e      	ldr	r2, [pc, #504]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80053f6:	4b7e      	ldr	r3, [pc, #504]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053f8:	e001      	b.n	80053fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80053fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4979      	ldr	r1, [pc, #484]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005406:	428b      	cmp	r3, r1
 8005408:	d101      	bne.n	800540e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800540a:	4b79      	ldr	r3, [pc, #484]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800540c:	e001      	b.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800540e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005416:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005426:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f043 0202 	orr.w	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fe34 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b08      	cmp	r3, #8
 8005460:	f040 80be 	bne.w	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80b8 	beq.w	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800547e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a59      	ldr	r2, [pc, #356]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800548c:	e001      	b.n	8005492 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800548e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4954      	ldr	r1, [pc, #336]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800549a:	428b      	cmp	r3, r1
 800549c:	d101      	bne.n	80054a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800549e:	4b54      	ldr	r3, [pc, #336]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054a0:	e001      	b.n	80054a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80054a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fdf6 	bl	80050c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054d4:	e084      	b.n	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8be 	bl	800566c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8fd 	bl	8005704 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d12f      	bne.n	8005574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02a      	beq.n	8005574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800552c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2e      	ldr	r2, [pc, #184]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005538:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800553a:	e001      	b.n	8005540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800553c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4929      	ldr	r1, [pc, #164]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005548:	428b      	cmp	r3, r1
 800554a:	d101      	bne.n	8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800554e:	e001      	b.n	8005554 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005558:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f043 0202 	orr.w	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fda6 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b08      	cmp	r3, #8
 800557c:	d131      	bne.n	80055e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02c      	beq.n	80055e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005594:	e001      	b.n	800559a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4912      	ldr	r1, [pc, #72]	; (80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055a2:	428b      	cmp	r3, r1
 80055a4:	d101      	bne.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055a8:	e001      	b.n	80055ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80055aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	f043 0204 	orr.w	r2, r3, #4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fd71 	bl	80050c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055de:	e000      	b.n	80055e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055e0:	bf00      	nop
}
 80055e2:	bf00      	nop
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40003800 	.word	0x40003800
 80055f0:	40003400 	.word	0x40003400

080055f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	1c99      	adds	r1, r3, #2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6251      	str	r1, [r2, #36]	; 0x24
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d113      	bne.n	8005662 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005648:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ffc9 	bl	80055f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c99      	adds	r1, r3, #2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6251      	str	r1, [r2, #36]	; 0x24
 800567e:	8819      	ldrh	r1, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <I2SEx_TxISR_I2SExt+0x90>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <I2SEx_TxISR_I2SExt+0x22>
 800568a:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <I2SEx_TxISR_I2SExt+0x94>)
 800568c:	e001      	b.n	8005692 <I2SEx_TxISR_I2SExt+0x26>
 800568e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005692:	460a      	mov	r2, r1
 8005694:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d121      	bne.n	80056f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a12      	ldr	r2, [pc, #72]	; (80056fc <I2SEx_TxISR_I2SExt+0x90>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <I2SEx_TxISR_I2SExt+0x50>
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <I2SEx_TxISR_I2SExt+0x94>)
 80056ba:	e001      	b.n	80056c0 <I2SEx_TxISR_I2SExt+0x54>
 80056bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	490d      	ldr	r1, [pc, #52]	; (80056fc <I2SEx_TxISR_I2SExt+0x90>)
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d101      	bne.n	80056d0 <I2SEx_TxISR_I2SExt+0x64>
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <I2SEx_TxISR_I2SExt+0x94>)
 80056ce:	e001      	b.n	80056d4 <I2SEx_TxISR_I2SExt+0x68>
 80056d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff81 	bl	80055f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40003800 	.word	0x40003800
 8005700:	40003400 	.word	0x40003400

08005704 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68d8      	ldr	r0, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	1c99      	adds	r1, r3, #2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800571c:	b282      	uxth	r2, r0
 800571e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d113      	bne.n	8005760 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005746:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff4a 	bl	80055f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <I2SEx_RxISR_I2SExt+0x90>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <I2SEx_RxISR_I2SExt+0x16>
 800577a:	4b20      	ldr	r3, [pc, #128]	; (80057fc <I2SEx_RxISR_I2SExt+0x94>)
 800577c:	e001      	b.n	8005782 <I2SEx_RxISR_I2SExt+0x1a>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005782:	68d8      	ldr	r0, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	1c99      	adds	r1, r3, #2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800578e:	b282      	uxth	r2, r0
 8005790:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d121      	bne.n	80057ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <I2SEx_RxISR_I2SExt+0x90>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <I2SEx_RxISR_I2SExt+0x50>
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <I2SEx_RxISR_I2SExt+0x94>)
 80057b6:	e001      	b.n	80057bc <I2SEx_RxISR_I2SExt+0x54>
 80057b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	490d      	ldr	r1, [pc, #52]	; (80057f8 <I2SEx_RxISR_I2SExt+0x90>)
 80057c4:	428b      	cmp	r3, r1
 80057c6:	d101      	bne.n	80057cc <I2SEx_RxISR_I2SExt+0x64>
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <I2SEx_RxISR_I2SExt+0x94>)
 80057ca:	e001      	b.n	80057d0 <I2SEx_RxISR_I2SExt+0x68>
 80057cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff03 	bl	80055f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40003800 	.word	0x40003800
 80057fc:	40003400 	.word	0x40003400

08005800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e264      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d075      	beq.n	800590a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	4ba3      	ldr	r3, [pc, #652]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b04      	cmp	r3, #4
 8005828:	d00c      	beq.n	8005844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800582a:	4ba0      	ldr	r3, [pc, #640]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005832:	2b08      	cmp	r3, #8
 8005834:	d112      	bne.n	800585c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005836:	4b9d      	ldr	r3, [pc, #628]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005842:	d10b      	bne.n	800585c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	4b99      	ldr	r3, [pc, #612]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05b      	beq.n	8005908 <HAL_RCC_OscConfig+0x108>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d157      	bne.n	8005908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e23f      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d106      	bne.n	8005874 <HAL_RCC_OscConfig+0x74>
 8005866:	4b91      	ldr	r3, [pc, #580]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a90      	ldr	r2, [pc, #576]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800586c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e01d      	b.n	80058b0 <HAL_RCC_OscConfig+0xb0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x98>
 800587e:	4b8b      	ldr	r3, [pc, #556]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a8a      	ldr	r2, [pc, #552]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0xb0>
 8005898:	4b84      	ldr	r3, [pc, #528]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a83      	ldr	r2, [pc, #524]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b81      	ldr	r3, [pc, #516]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a80      	ldr	r2, [pc, #512]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fc fe18 	bl	80024ec <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fc fe14 	bl	80024ec <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e204      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b76      	ldr	r3, [pc, #472]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0xc0>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fc fe04 	bl	80024ec <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fc fe00 	bl	80024ec <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1f0      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0xe8>
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d063      	beq.n	80059de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	4b65      	ldr	r3, [pc, #404]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b62      	ldr	r3, [pc, #392]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592e:	4b5f      	ldr	r3, [pc, #380]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x152>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1c4      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b56      	ldr	r3, [pc, #344]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4952      	ldr	r1, [pc, #328]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e03a      	b.n	80059de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b4f      	ldr	r3, [pc, #316]	; (8005ab0 <HAL_RCC_OscConfig+0x2b0>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fc fdb9 	bl	80024ec <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800597e:	f7fc fdb5 	bl	80024ec <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1a5      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	4b46      	ldr	r3, [pc, #280]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599c:	4b43      	ldr	r3, [pc, #268]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4940      	ldr	r1, [pc, #256]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	e015      	b.n	80059de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b2:	4b3f      	ldr	r3, [pc, #252]	; (8005ab0 <HAL_RCC_OscConfig+0x2b0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fc fd98 	bl	80024ec <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c0:	f7fc fd94 	bl	80024ec <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e184      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	4b36      	ldr	r3, [pc, #216]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d030      	beq.n	8005a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f2:	4b30      	ldr	r3, [pc, #192]	; (8005ab4 <HAL_RCC_OscConfig+0x2b4>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f8:	f7fc fd78 	bl	80024ec <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a00:	f7fc fd74 	bl	80024ec <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e164      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x200>
 8005a1e:	e015      	b.n	8005a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a20:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <HAL_RCC_OscConfig+0x2b4>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a26:	f7fc fd61 	bl	80024ec <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2e:	f7fc fd5d 	bl	80024ec <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e14d      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80a0 	beq.w	8005b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10f      	bne.n	8005a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_OscConfig+0x2b8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d121      	bne.n	8005ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <HAL_RCC_OscConfig+0x2b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <HAL_RCC_OscConfig+0x2b8>)
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa2:	f7fc fd23 	bl	80024ec <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa8:	e011      	b.n	8005ace <HAL_RCC_OscConfig+0x2ce>
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	42470000 	.word	0x42470000
 8005ab4:	42470e80 	.word	0x42470e80
 8005ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abc:	f7fc fd16 	bl	80024ec <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e106      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCC_OscConfig+0x4e4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCC_OscConfig+0x2f0>
 8005ae2:	4b81      	ldr	r3, [pc, #516]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a80      	ldr	r2, [pc, #512]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
 8005aee:	e01c      	b.n	8005b2a <HAL_RCC_OscConfig+0x32a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d10c      	bne.n	8005b12 <HAL_RCC_OscConfig+0x312>
 8005af8:	4b7b      	ldr	r3, [pc, #492]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a7a      	ldr	r2, [pc, #488]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005afe:	f043 0304 	orr.w	r3, r3, #4
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	4b78      	ldr	r3, [pc, #480]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a77      	ldr	r2, [pc, #476]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b10:	e00b      	b.n	8005b2a <HAL_RCC_OscConfig+0x32a>
 8005b12:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a74      	ldr	r2, [pc, #464]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1e:	4b72      	ldr	r3, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a71      	ldr	r2, [pc, #452]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d015      	beq.n	8005b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fc fcdb 	bl	80024ec <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b3a:	f7fc fcd7 	bl	80024ec <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e0c5      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b50:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0ee      	beq.n	8005b3a <HAL_RCC_OscConfig+0x33a>
 8005b5c:	e014      	b.n	8005b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5e:	f7fc fcc5 	bl	80024ec <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fc fcc1 	bl	80024ec <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0af      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b7c:	4b5a      	ldr	r3, [pc, #360]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ee      	bne.n	8005b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d105      	bne.n	8005b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b8e:	4b56      	ldr	r3, [pc, #344]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a55      	ldr	r2, [pc, #340]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 809b 	beq.w	8005cda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d05c      	beq.n	8005c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d141      	bne.n	8005c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb8:	4b4c      	ldr	r3, [pc, #304]	; (8005cec <HAL_RCC_OscConfig+0x4ec>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbe:	f7fc fc95 	bl	80024ec <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fc fc91 	bl	80024ec <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e081      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd8:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	019b      	lsls	r3, r3, #6
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	061b      	lsls	r3, r3, #24
 8005c08:	4937      	ldr	r1, [pc, #220]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c0e:	4b37      	ldr	r3, [pc, #220]	; (8005cec <HAL_RCC_OscConfig+0x4ec>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fc fc6a 	bl	80024ec <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fc fc66 	bl	80024ec <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e056      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x41c>
 8005c3a:	e04e      	b.n	8005cda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_RCC_OscConfig+0x4ec>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c42:	f7fc fc53 	bl	80024ec <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4a:	f7fc fc4f 	bl	80024ec <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e03f      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5c:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f0      	bne.n	8005c4a <HAL_RCC_OscConfig+0x44a>
 8005c68:	e037      	b.n	8005cda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e032      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <HAL_RCC_OscConfig+0x4e8>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d028      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d121      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d11a      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40007000 	.word	0x40007000
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	42470060 	.word	0x42470060

08005cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0cc      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b68      	ldr	r3, [pc, #416]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d90c      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b65      	ldr	r3, [pc, #404]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0b8      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a58      	ldr	r2, [pc, #352]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d5c:	4b53      	ldr	r3, [pc, #332]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4a52      	ldr	r2, [pc, #328]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b50      	ldr	r3, [pc, #320]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	494d      	ldr	r1, [pc, #308]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d044      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	4b47      	ldr	r3, [pc, #284]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d119      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e07f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e06f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbe:	4b3b      	ldr	r3, [pc, #236]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e067      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 0203 	bic.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4934      	ldr	r1, [pc, #208]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de0:	f7fc fb84 	bl	80024ec <HAL_GetTick>
 8005de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de8:	f7fc fb80 	bl	80024ec <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e04f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 020c 	and.w	r2, r3, #12
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d1eb      	bne.n	8005de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d20c      	bcs.n	8005e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e032      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e44:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4916      	ldr	r1, [pc, #88]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	490e      	ldr	r1, [pc, #56]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e76:	f000 f821 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	490a      	ldr	r1, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e88:	5ccb      	ldrb	r3, [r1, r3]
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fc fae4 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40023c00 	.word	0x40023c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	08008188 	.word	0x08008188
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	20000004 	.word	0x20000004

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ed4:	4b67      	ldr	r3, [pc, #412]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 030c 	and.w	r3, r3, #12
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d00d      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x40>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	f200 80bd 	bhi.w	8006060 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eee:	e0b7      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef0:	4b61      	ldr	r3, [pc, #388]	; (8006078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ef2:	60bb      	str	r3, [r7, #8]
       break;
 8005ef4:	e0b7      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ef6:	4b61      	ldr	r3, [pc, #388]	; (800607c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ef8:	60bb      	str	r3, [r7, #8]
      break;
 8005efa:	e0b4      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005efc:	4b5d      	ldr	r3, [pc, #372]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f06:	4b5b      	ldr	r3, [pc, #364]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04d      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f12:	4b58      	ldr	r3, [pc, #352]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	ea02 0800 	and.w	r8, r2, r0
 8005f2a:	ea03 0901 	and.w	r9, r3, r1
 8005f2e:	4640      	mov	r0, r8
 8005f30:	4649      	mov	r1, r9
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	014b      	lsls	r3, r1, #5
 8005f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f40:	0142      	lsls	r2, r0, #5
 8005f42:	4610      	mov	r0, r2
 8005f44:	4619      	mov	r1, r3
 8005f46:	ebb0 0008 	subs.w	r0, r0, r8
 8005f4a:	eb61 0109 	sbc.w	r1, r1, r9
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	018b      	lsls	r3, r1, #6
 8005f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f5c:	0182      	lsls	r2, r0, #6
 8005f5e:	1a12      	subs	r2, r2, r0
 8005f60:	eb63 0301 	sbc.w	r3, r3, r1
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	00d9      	lsls	r1, r3, #3
 8005f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f72:	00d0      	lsls	r0, r2, #3
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	eb12 0208 	adds.w	r2, r2, r8
 8005f7c:	eb43 0309 	adc.w	r3, r3, r9
 8005f80:	f04f 0000 	mov.w	r0, #0
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	0259      	lsls	r1, r3, #9
 8005f8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f8e:	0250      	lsls	r0, r2, #9
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	f7fa fdb0 	bl	8000b04 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4613      	mov	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e04a      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	099b      	lsrs	r3, r3, #6
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005fbe:	f04f 0100 	mov.w	r1, #0
 8005fc2:	ea02 0400 	and.w	r4, r2, r0
 8005fc6:	ea03 0501 	and.w	r5, r3, r1
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	014b      	lsls	r3, r1, #5
 8005fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fdc:	0142      	lsls	r2, r0, #5
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	1b00      	subs	r0, r0, r4
 8005fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	018b      	lsls	r3, r1, #6
 8005ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ff6:	0182      	lsls	r2, r0, #6
 8005ff8:	1a12      	subs	r2, r2, r0
 8005ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8005ffe:	f04f 0000 	mov.w	r0, #0
 8006002:	f04f 0100 	mov.w	r1, #0
 8006006:	00d9      	lsls	r1, r3, #3
 8006008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800600c:	00d0      	lsls	r0, r2, #3
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	1912      	adds	r2, r2, r4
 8006014:	eb45 0303 	adc.w	r3, r5, r3
 8006018:	f04f 0000 	mov.w	r0, #0
 800601c:	f04f 0100 	mov.w	r1, #0
 8006020:	0299      	lsls	r1, r3, #10
 8006022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006026:	0290      	lsls	r0, r2, #10
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	461a      	mov	r2, r3
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	f7fa fd64 	bl	8000b04 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	3301      	adds	r3, #1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	60bb      	str	r3, [r7, #8]
      break;
 800605e:	e002      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006062:	60bb      	str	r3, [r7, #8]
      break;
 8006064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006066:	68bb      	ldr	r3, [r7, #8]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400
 800607c:	007a1200 	.word	0x007a1200

08006080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <HAL_RCC_GetHCLKFreq+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000000 	.word	0x20000000

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0a9b      	lsrs	r3, r3, #10
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4903      	ldr	r1, [pc, #12]	; (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40023800 	.word	0x40023800
 80060bc:	08008198 	.word	0x08008198

080060c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060c4:	f7ff ffdc 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	0b5b      	lsrs	r3, r3, #13
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4903      	ldr	r1, [pc, #12]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40023800 	.word	0x40023800
 80060e4:	08008198 	.word	0x08008198

080060e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800610c:	2b00      	cmp	r3, #0
 800610e:	d035      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006110:	4b62      	ldr	r3, [pc, #392]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006116:	f7fc f9e9 	bl	80024ec <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800611e:	f7fc f9e5 	bl	80024ec <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e0b0      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006130:	4b5b      	ldr	r3, [pc, #364]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f0      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	019a      	lsls	r2, r3, #6
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	071b      	lsls	r3, r3, #28
 8006148:	4955      	ldr	r1, [pc, #340]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006150:	4b52      	ldr	r3, [pc, #328]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006152:	2201      	movs	r2, #1
 8006154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006156:	f7fc f9c9 	bl	80024ec <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800615e:	f7fc f9c5 	bl	80024ec <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e090      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006170:	4b4b      	ldr	r3, [pc, #300]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0f0      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8083 	beq.w	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4b44      	ldr	r3, [pc, #272]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	4a43      	ldr	r2, [pc, #268]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006198:	6413      	str	r3, [r2, #64]	; 0x40
 800619a:	4b41      	ldr	r3, [pc, #260]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061a6:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3e      	ldr	r2, [pc, #248]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061b2:	f7fc f99b 	bl	80024ec <HAL_GetTick>
 80061b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fc f997 	bl	80024ec <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e062      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061d8:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02f      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d028      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061f6:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006200:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006206:	4b28      	ldr	r3, [pc, #160]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800620c:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006212:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d114      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800621e:	f7fc f965 	bl	80024ec <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006224:	e00a      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006226:	f7fc f961 	bl	80024ec <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f241 3288 	movw	r2, #5000	; 0x1388
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e02a      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ee      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006254:	d10d      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626a:	490d      	ldr	r1, [pc, #52]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]
 8006270:	e005      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006278:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800627c:	6093      	str	r3, [r2, #8]
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628a:	4905      	ldr	r1, [pc, #20]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800628c:	4313      	orrs	r3, r2
 800628e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	42470068 	.word	0x42470068
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470e40 	.word	0x42470e40

080062ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d13e      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80062ca:	4b23      	ldr	r3, [pc, #140]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d12f      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80062e0:	4b1e      	ldr	r3, [pc, #120]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062e2:	617b      	str	r3, [r7, #20]
          break;
 80062e4:	e02f      	b.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f2:	d108      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062f4:	4b18      	ldr	r3, [pc, #96]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e007      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006310:	fbb2 f3f3 	udiv	r3, r2, r3
 8006314:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006316:	4b10      	ldr	r3, [pc, #64]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631c:	099b      	lsrs	r3, r3, #6
 800631e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006330:	0f1b      	lsrs	r3, r3, #28
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]
          break;
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
          break;
 8006344:	bf00      	nop
        }
      }
      break;
 8006346:	bf00      	nop
    }
  }
  return frequency;
 8006348:	697b      	ldr	r3, [r7, #20]
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40023800 	.word	0x40023800
 800635c:	00bb8000 	.word	0x00bb8000
 8006360:	007a1200 	.word	0x007a1200
 8006364:	00f42400 	.word	0x00f42400

08006368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e041      	b.n	80063fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fb ff4a 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fa8e 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e046      	b.n	80064ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	; (80064bc <HAL_TIM_Base_Start+0xb4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d01d      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <HAL_TIM_Base_Start+0xb8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <HAL_TIM_Base_Start+0xbc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <HAL_TIM_Base_Start+0xc0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <HAL_TIM_Base_Start+0xc4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_TIM_Base_Start+0xc8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <HAL_TIM_Base_Start+0xcc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d111      	bne.n	800649c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d010      	beq.n	80064ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	e007      	b.n	80064ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0202 	mvn.w	r2, #2
 8006504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9b5 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9a7 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f9b8 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b04      	cmp	r3, #4
 8006540:	d122      	bne.n	8006588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d11b      	bne.n	8006588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0204 	mvn.w	r2, #4
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f98b 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f97d 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f98e 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b08      	cmp	r3, #8
 8006594:	d122      	bne.n	80065dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d11b      	bne.n	80065dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0208 	mvn.w	r2, #8
 80065ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2204      	movs	r2, #4
 80065b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f961 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 80065c8:	e005      	b.n	80065d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f953 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f964 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d122      	bne.n	8006630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d11b      	bne.n	8006630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0210 	mvn.w	r2, #16
 8006600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2208      	movs	r2, #8
 8006606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f937 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 800661c:	e005      	b.n	800662a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f929 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f93a 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10e      	bne.n	800665c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0201 	mvn.w	r2, #1
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb fb98 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fae0 	bl	8006c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d10e      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d107      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8ff 	bl	80068b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d10e      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0220 	mvn.w	r2, #32
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 faaa 	bl	8006c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_ConfigClockSource+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e0b4      	b.n	800686e <HAL_TIM_ConfigClockSource+0x186>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673c:	d03e      	beq.n	80067bc <HAL_TIM_ConfigClockSource+0xd4>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006742:	f200 8087 	bhi.w	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	f000 8086 	beq.w	800685a <HAL_TIM_ConfigClockSource+0x172>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	d87f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b70      	cmp	r3, #112	; 0x70
 8006756:	d01a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xa6>
 8006758:	2b70      	cmp	r3, #112	; 0x70
 800675a:	d87b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b60      	cmp	r3, #96	; 0x60
 800675e:	d050      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x11a>
 8006760:	2b60      	cmp	r3, #96	; 0x60
 8006762:	d877      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006764:	2b50      	cmp	r3, #80	; 0x50
 8006766:	d03c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006768:	2b50      	cmp	r3, #80	; 0x50
 800676a:	d873      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d058      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x13a>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d86f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006774:	2b30      	cmp	r3, #48	; 0x30
 8006776:	d064      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006778:	2b30      	cmp	r3, #48	; 0x30
 800677a:	d86b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d060      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d867      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d05c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d05a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	e062      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f000 f9ad 	bl	8006afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
      break;
 80067ba:	e04f      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f000 f996 	bl	8006afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067de:	609a      	str	r2, [r3, #8]
      break;
 80067e0:	e03c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 f90a 	bl	8006a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2150      	movs	r1, #80	; 0x50
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f963 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 8006800:	e02c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	461a      	mov	r2, r3
 8006810:	f000 f929 	bl	8006a66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2160      	movs	r1, #96	; 0x60
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f953 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 8006820:	e01c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	461a      	mov	r2, r3
 8006830:	f000 f8ea 	bl	8006a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f943 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 8006840:	e00c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 f93a 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 8006852:	e003      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e000      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800685a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a40      	ldr	r2, [pc, #256]	; (80069dc <TIM_Base_SetConfig+0x114>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3d      	ldr	r2, [pc, #244]	; (80069e0 <TIM_Base_SetConfig+0x118>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <TIM_Base_SetConfig+0x11c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <TIM_Base_SetConfig+0x120>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3a      	ldr	r2, [pc, #232]	; (80069ec <TIM_Base_SetConfig+0x124>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2f      	ldr	r2, [pc, #188]	; (80069dc <TIM_Base_SetConfig+0x114>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d027      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <TIM_Base_SetConfig+0x118>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d023      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <TIM_Base_SetConfig+0x11c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01f      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <TIM_Base_SetConfig+0x120>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a29      	ldr	r2, [pc, #164]	; (80069ec <TIM_Base_SetConfig+0x124>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d017      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a28      	ldr	r2, [pc, #160]	; (80069f0 <TIM_Base_SetConfig+0x128>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <TIM_Base_SetConfig+0x12c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <TIM_Base_SetConfig+0x130>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a25      	ldr	r2, [pc, #148]	; (80069fc <TIM_Base_SetConfig+0x134>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <TIM_Base_SetConfig+0x138>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <TIM_Base_SetConfig+0x13c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <TIM_Base_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <TIM_Base_SetConfig+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40010400 	.word	0x40010400
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800
 80069fc:	40001800 	.word	0x40001800
 8006a00:	40001c00 	.word	0x40001c00
 8006a04:	40002000 	.word	0x40002000

08006a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 030a 	bic.w	r3, r3, #10
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b087      	sub	sp, #28
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0210 	bic.w	r2, r3, #16
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f043 0307 	orr.w	r3, r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	021a      	lsls	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e05a      	b.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba0:	d01d      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1d      	ldr	r2, [pc, #116]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40001800 	.word	0x40001800

08006c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e03f      	b.n	8006cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb faf6 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f829 	bl	8006cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695a      	ldr	r2, [r3, #20]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	b09f      	sub	sp, #124	; 0x7c
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	68d9      	ldr	r1, [r3, #12]
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	ea40 0301 	orr.w	r3, r0, r1
 8006d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d3c:	f021 010c 	bic.w	r1, r1, #12
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d46:	430b      	orrs	r3, r1
 8006d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	6999      	ldr	r1, [r3, #24]
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	ea40 0301 	orr.w	r3, r0, r1
 8006d60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4bc5      	ldr	r3, [pc, #788]	; (800707c <UART_SetConfig+0x384>)
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d004      	beq.n	8006d76 <UART_SetConfig+0x7e>
 8006d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4bc3      	ldr	r3, [pc, #780]	; (8007080 <UART_SetConfig+0x388>)
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d103      	bne.n	8006d7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d76:	f7ff f9a3 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 8006d7a:	6778      	str	r0, [r7, #116]	; 0x74
 8006d7c:	e002      	b.n	8006d84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7e:	f7ff f98b 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8006d82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8c:	f040 80b6 	bne.w	8006efc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d92:	461c      	mov	r4, r3
 8006d94:	f04f 0500 	mov.w	r5, #0
 8006d98:	4622      	mov	r2, r4
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	1891      	adds	r1, r2, r2
 8006d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8006da0:	415b      	adcs	r3, r3
 8006da2:	647b      	str	r3, [r7, #68]	; 0x44
 8006da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da8:	1912      	adds	r2, r2, r4
 8006daa:	eb45 0303 	adc.w	r3, r5, r3
 8006dae:	f04f 0000 	mov.w	r0, #0
 8006db2:	f04f 0100 	mov.w	r1, #0
 8006db6:	00d9      	lsls	r1, r3, #3
 8006db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dbc:	00d0      	lsls	r0, r2, #3
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	1911      	adds	r1, r2, r4
 8006dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8006dc6:	416b      	adcs	r3, r5
 8006dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006de4:	f7f9 fe8e 	bl	8000b04 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4ba5      	ldr	r3, [pc, #660]	; (8007084 <UART_SetConfig+0x38c>)
 8006dee:	fba3 2302 	umull	r2, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	011e      	lsls	r6, r3, #4
 8006df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df8:	461c      	mov	r4, r3
 8006dfa:	f04f 0500 	mov.w	r5, #0
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	6339      	str	r1, [r7, #48]	; 0x30
 8006e06:	415b      	adcs	r3, r3
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e0e:	1912      	adds	r2, r2, r4
 8006e10:	eb45 0303 	adc.w	r3, r5, r3
 8006e14:	f04f 0000 	mov.w	r0, #0
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	00d9      	lsls	r1, r3, #3
 8006e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e22:	00d0      	lsls	r0, r2, #3
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	1911      	adds	r1, r2, r4
 8006e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e2c:	416b      	adcs	r3, r5
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e4a:	f7f9 fe5b 	bl	8000b04 <__aeabi_uldivmod>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4b8c      	ldr	r3, [pc, #560]	; (8007084 <UART_SetConfig+0x38c>)
 8006e54:	fba3 1302 	umull	r1, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	2164      	movs	r1, #100	; 0x64
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	3332      	adds	r3, #50	; 0x32
 8006e66:	4a87      	ldr	r2, [pc, #540]	; (8007084 <UART_SetConfig+0x38c>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e74:	441e      	add	r6, r3
 8006e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f04f 0100 	mov.w	r1, #0
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	1894      	adds	r4, r2, r2
 8006e84:	623c      	str	r4, [r7, #32]
 8006e86:	415b      	adcs	r3, r3
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e8e:	1812      	adds	r2, r2, r0
 8006e90:	eb41 0303 	adc.w	r3, r1, r3
 8006e94:	f04f 0400 	mov.w	r4, #0
 8006e98:	f04f 0500 	mov.w	r5, #0
 8006e9c:	00dd      	lsls	r5, r3, #3
 8006e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ea2:	00d4      	lsls	r4, r2, #3
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	1814      	adds	r4, r2, r0
 8006eaa:	653c      	str	r4, [r7, #80]	; 0x50
 8006eac:	414b      	adcs	r3, r1
 8006eae:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	61b9      	str	r1, [r7, #24]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006eca:	f7f9 fe1b 	bl	8000b04 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b6c      	ldr	r3, [pc, #432]	; (8007084 <UART_SetConfig+0x38c>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a67      	ldr	r2, [pc, #412]	; (8007084 <UART_SetConfig+0x38c>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 0207 	and.w	r2, r3, #7
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4432      	add	r2, r6
 8006ef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006efa:	e0b9      	b.n	8007070 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006efe:	461c      	mov	r4, r3
 8006f00:	f04f 0500 	mov.w	r5, #0
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	1891      	adds	r1, r2, r2
 8006f0a:	6139      	str	r1, [r7, #16]
 8006f0c:	415b      	adcs	r3, r3
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f14:	1912      	adds	r2, r2, r4
 8006f16:	eb45 0303 	adc.w	r3, r5, r3
 8006f1a:	f04f 0000 	mov.w	r0, #0
 8006f1e:	f04f 0100 	mov.w	r1, #0
 8006f22:	00d9      	lsls	r1, r3, #3
 8006f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f28:	00d0      	lsls	r0, r2, #3
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	eb12 0804 	adds.w	r8, r2, r4
 8006f32:	eb43 0905 	adc.w	r9, r3, r5
 8006f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	008b      	lsls	r3, r1, #2
 8006f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f4e:	0082      	lsls	r2, r0, #2
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fdd6 	bl	8000b04 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4b49      	ldr	r3, [pc, #292]	; (8007084 <UART_SetConfig+0x38c>)
 8006f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	011e      	lsls	r6, r3, #4
 8006f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f04f 0100 	mov.w	r1, #0
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	1894      	adds	r4, r2, r2
 8006f74:	60bc      	str	r4, [r7, #8]
 8006f76:	415b      	adcs	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7e:	1812      	adds	r2, r2, r0
 8006f80:	eb41 0303 	adc.w	r3, r1, r3
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	f04f 0500 	mov.w	r5, #0
 8006f8c:	00dd      	lsls	r5, r3, #3
 8006f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f92:	00d4      	lsls	r4, r2, #3
 8006f94:	4622      	mov	r2, r4
 8006f96:	462b      	mov	r3, r5
 8006f98:	1814      	adds	r4, r2, r0
 8006f9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f04f 0100 	mov.w	r1, #0
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	008b      	lsls	r3, r1, #2
 8006fb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fb8:	0082      	lsls	r2, r0, #2
 8006fba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fbe:	f7f9 fda1 	bl	8000b04 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <UART_SetConfig+0x38c>)
 8006fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	3332      	adds	r3, #50	; 0x32
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <UART_SetConfig+0x38c>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe6:	441e      	add	r6, r3
 8006fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fea:	4618      	mov	r0, r3
 8006fec:	f04f 0100 	mov.w	r1, #0
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	1894      	adds	r4, r2, r2
 8006ff6:	603c      	str	r4, [r7, #0]
 8006ff8:	415b      	adcs	r3, r3
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007000:	1812      	adds	r2, r2, r0
 8007002:	eb41 0303 	adc.w	r3, r1, r3
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	f04f 0500 	mov.w	r5, #0
 800700e:	00dd      	lsls	r5, r3, #3
 8007010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007014:	00d4      	lsls	r4, r2, #3
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	eb12 0a00 	adds.w	sl, r2, r0
 800701e:	eb43 0b01 	adc.w	fp, r3, r1
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4618      	mov	r0, r3
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	008b      	lsls	r3, r1, #2
 8007036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800703a:	0082      	lsls	r2, r0, #2
 800703c:	4650      	mov	r0, sl
 800703e:	4659      	mov	r1, fp
 8007040:	f7f9 fd60 	bl	8000b04 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <UART_SetConfig+0x38c>)
 800704a:	fba3 1302 	umull	r1, r3, r3, r2
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2164      	movs	r1, #100	; 0x64
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	3332      	adds	r3, #50	; 0x32
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <UART_SetConfig+0x38c>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4432      	add	r2, r6
 800706e:	609a      	str	r2, [r3, #8]
}
 8007070:	bf00      	nop
 8007072:	377c      	adds	r7, #124	; 0x7c
 8007074:	46bd      	mov	sp, r7
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	bf00      	nop
 800707c:	40011000 	.word	0x40011000
 8007080:	40011400 	.word	0x40011400
 8007084:	51eb851f 	.word	0x51eb851f

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4d0d      	ldr	r5, [pc, #52]	; (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	; (80070c4 <__libc_init_array+0x3c>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2600      	movs	r6, #0
 8007094:	42a6      	cmp	r6, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4d0b      	ldr	r5, [pc, #44]	; (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	; (80070cc <__libc_init_array+0x44>)
 800709c:	f001 f866 	bl	800816c <_init>
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2600      	movs	r6, #0
 80070a6:	42a6      	cmp	r6, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ba:	4798      	blx	r3
 80070bc:	3601      	adds	r6, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	08008388 	.word	0x08008388
 80070c4:	08008388 	.word	0x08008388
 80070c8:	08008388 	.word	0x08008388
 80070cc:	0800838c 	.word	0x0800838c

080070d0 <memcpy>:
 80070d0:	440a      	add	r2, r1
 80070d2:	4291      	cmp	r1, r2
 80070d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070d8:	d100      	bne.n	80070dc <memcpy+0xc>
 80070da:	4770      	bx	lr
 80070dc:	b510      	push	{r4, lr}
 80070de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e6:	4291      	cmp	r1, r2
 80070e8:	d1f9      	bne.n	80070de <memcpy+0xe>
 80070ea:	bd10      	pop	{r4, pc}

080070ec <memset>:
 80070ec:	4402      	add	r2, r0
 80070ee:	4603      	mov	r3, r0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <memset+0xa>
 80070f4:	4770      	bx	lr
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <memset+0x4>
 80070fc:	0000      	movs	r0, r0
	...

08007100 <sin>:
 8007100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007102:	ec53 2b10 	vmov	r2, r3, d0
 8007106:	4826      	ldr	r0, [pc, #152]	; (80071a0 <sin+0xa0>)
 8007108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800710c:	4281      	cmp	r1, r0
 800710e:	dc07      	bgt.n	8007120 <sin+0x20>
 8007110:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007198 <sin+0x98>
 8007114:	2000      	movs	r0, #0
 8007116:	f000 fe5b 	bl	8007dd0 <__kernel_sin>
 800711a:	ec51 0b10 	vmov	r0, r1, d0
 800711e:	e007      	b.n	8007130 <sin+0x30>
 8007120:	4820      	ldr	r0, [pc, #128]	; (80071a4 <sin+0xa4>)
 8007122:	4281      	cmp	r1, r0
 8007124:	dd09      	ble.n	800713a <sin+0x3a>
 8007126:	ee10 0a10 	vmov	r0, s0
 800712a:	4619      	mov	r1, r3
 800712c:	f7f9 f850 	bl	80001d0 <__aeabi_dsub>
 8007130:	ec41 0b10 	vmov	d0, r0, r1
 8007134:	b005      	add	sp, #20
 8007136:	f85d fb04 	ldr.w	pc, [sp], #4
 800713a:	4668      	mov	r0, sp
 800713c:	f000 f834 	bl	80071a8 <__ieee754_rem_pio2>
 8007140:	f000 0003 	and.w	r0, r0, #3
 8007144:	2801      	cmp	r0, #1
 8007146:	d008      	beq.n	800715a <sin+0x5a>
 8007148:	2802      	cmp	r0, #2
 800714a:	d00d      	beq.n	8007168 <sin+0x68>
 800714c:	b9d0      	cbnz	r0, 8007184 <sin+0x84>
 800714e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007152:	ed9d 0b00 	vldr	d0, [sp]
 8007156:	2001      	movs	r0, #1
 8007158:	e7dd      	b.n	8007116 <sin+0x16>
 800715a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800715e:	ed9d 0b00 	vldr	d0, [sp]
 8007162:	f000 fa2d 	bl	80075c0 <__kernel_cos>
 8007166:	e7d8      	b.n	800711a <sin+0x1a>
 8007168:	ed9d 1b02 	vldr	d1, [sp, #8]
 800716c:	ed9d 0b00 	vldr	d0, [sp]
 8007170:	2001      	movs	r0, #1
 8007172:	f000 fe2d 	bl	8007dd0 <__kernel_sin>
 8007176:	ec53 2b10 	vmov	r2, r3, d0
 800717a:	ee10 0a10 	vmov	r0, s0
 800717e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007182:	e7d5      	b.n	8007130 <sin+0x30>
 8007184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007188:	ed9d 0b00 	vldr	d0, [sp]
 800718c:	f000 fa18 	bl	80075c0 <__kernel_cos>
 8007190:	e7f1      	b.n	8007176 <sin+0x76>
 8007192:	bf00      	nop
 8007194:	f3af 8000 	nop.w
	...
 80071a0:	3fe921fb 	.word	0x3fe921fb
 80071a4:	7fefffff 	.word	0x7fefffff

080071a8 <__ieee754_rem_pio2>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b02 	vpush	{d8}
 80071b0:	ec55 4b10 	vmov	r4, r5, d0
 80071b4:	4bca      	ldr	r3, [pc, #808]	; (80074e0 <__ieee754_rem_pio2+0x338>)
 80071b6:	b08b      	sub	sp, #44	; 0x2c
 80071b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80071bc:	4598      	cmp	r8, r3
 80071be:	4682      	mov	sl, r0
 80071c0:	9502      	str	r5, [sp, #8]
 80071c2:	dc08      	bgt.n	80071d6 <__ieee754_rem_pio2+0x2e>
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	ed80 0b00 	vstr	d0, [r0]
 80071cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80071d0:	f04f 0b00 	mov.w	fp, #0
 80071d4:	e028      	b.n	8007228 <__ieee754_rem_pio2+0x80>
 80071d6:	4bc3      	ldr	r3, [pc, #780]	; (80074e4 <__ieee754_rem_pio2+0x33c>)
 80071d8:	4598      	cmp	r8, r3
 80071da:	dc78      	bgt.n	80072ce <__ieee754_rem_pio2+0x126>
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	4ec2      	ldr	r6, [pc, #776]	; (80074e8 <__ieee754_rem_pio2+0x340>)
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x300>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	4629      	mov	r1, r5
 80071ee:	dd39      	ble.n	8007264 <__ieee754_rem_pio2+0xbc>
 80071f0:	f7f8 ffee 	bl	80001d0 <__aeabi_dsub>
 80071f4:	45b0      	cmp	r8, r6
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	d01b      	beq.n	8007234 <__ieee754_rem_pio2+0x8c>
 80071fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x308>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffe5 	bl	80001d0 <__aeabi_dsub>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	e9ca 2300 	strd	r2, r3, [sl]
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f8 ffdd 	bl	80001d0 <__aeabi_dsub>
 8007216:	a3a6      	add	r3, pc, #664	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x308>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f7f8 ffd8 	bl	80001d0 <__aeabi_dsub>
 8007220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007224:	f04f 0b01 	mov.w	fp, #1
 8007228:	4658      	mov	r0, fp
 800722a:	b00b      	add	sp, #44	; 0x2c
 800722c:	ecbd 8b02 	vpop	{d8}
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007234:	a3a0      	add	r3, pc, #640	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x310>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ffc9 	bl	80001d0 <__aeabi_dsub>
 800723e:	a3a0      	add	r3, pc, #640	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x318>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	f7f8 ffc2 	bl	80001d0 <__aeabi_dsub>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	e9ca 2300 	strd	r2, r3, [sl]
 8007254:	4620      	mov	r0, r4
 8007256:	4629      	mov	r1, r5
 8007258:	f7f8 ffba 	bl	80001d0 <__aeabi_dsub>
 800725c:	a398      	add	r3, pc, #608	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x318>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	e7db      	b.n	800721c <__ieee754_rem_pio2+0x74>
 8007264:	f7f8 ffb6 	bl	80001d4 <__adddf3>
 8007268:	45b0      	cmp	r8, r6
 800726a:	4604      	mov	r4, r0
 800726c:	460d      	mov	r5, r1
 800726e:	d016      	beq.n	800729e <__ieee754_rem_pio2+0xf6>
 8007270:	a38f      	add	r3, pc, #572	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x308>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f8 ffad 	bl	80001d4 <__adddf3>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9ca 2300 	strd	r2, r3, [sl]
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	f7f8 ffa3 	bl	80001d0 <__aeabi_dsub>
 800728a:	a389      	add	r3, pc, #548	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x308>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f8 ffa0 	bl	80001d4 <__adddf3>
 8007294:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800729c:	e7c4      	b.n	8007228 <__ieee754_rem_pio2+0x80>
 800729e:	a386      	add	r3, pc, #536	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x310>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 ff96 	bl	80001d4 <__adddf3>
 80072a8:	a385      	add	r3, pc, #532	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x318>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	f7f8 ff8f 	bl	80001d4 <__adddf3>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	e9ca 2300 	strd	r2, r3, [sl]
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f8 ff85 	bl	80001d0 <__aeabi_dsub>
 80072c6:	a37e      	add	r3, pc, #504	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x318>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	e7e0      	b.n	8007290 <__ieee754_rem_pio2+0xe8>
 80072ce:	4b87      	ldr	r3, [pc, #540]	; (80074ec <__ieee754_rem_pio2+0x344>)
 80072d0:	4598      	cmp	r8, r3
 80072d2:	f300 80d9 	bgt.w	8007488 <__ieee754_rem_pio2+0x2e0>
 80072d6:	f000 fe39 	bl	8007f4c <fabs>
 80072da:	ec55 4b10 	vmov	r4, r5, d0
 80072de:	ee10 0a10 	vmov	r0, s0
 80072e2:	a379      	add	r3, pc, #484	; (adr r3, 80074c8 <__ieee754_rem_pio2+0x320>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 f929 	bl	8000540 <__aeabi_dmul>
 80072ee:	4b80      	ldr	r3, [pc, #512]	; (80074f0 <__ieee754_rem_pio2+0x348>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	f7f8 ff6f 	bl	80001d4 <__adddf3>
 80072f6:	f7f9 fbbd 	bl	8000a74 <__aeabi_d2iz>
 80072fa:	4683      	mov	fp, r0
 80072fc:	f7f9 f8b6 	bl	800046c <__aeabi_i2d>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	ec43 2b18 	vmov	d8, r2, r3
 8007308:	a367      	add	r3, pc, #412	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x300>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f9 f917 	bl	8000540 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ff59 	bl	80001d0 <__aeabi_dsub>
 800731e:	a364      	add	r3, pc, #400	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x308>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	ec51 0b18 	vmov	r0, r1, d8
 800732c:	f7f9 f908 	bl	8000540 <__aeabi_dmul>
 8007330:	f1bb 0f1f 	cmp.w	fp, #31
 8007334:	4604      	mov	r4, r0
 8007336:	460d      	mov	r5, r1
 8007338:	dc0d      	bgt.n	8007356 <__ieee754_rem_pio2+0x1ae>
 800733a:	4b6e      	ldr	r3, [pc, #440]	; (80074f4 <__ieee754_rem_pio2+0x34c>)
 800733c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	4543      	cmp	r3, r8
 8007346:	d006      	beq.n	8007356 <__ieee754_rem_pio2+0x1ae>
 8007348:	4622      	mov	r2, r4
 800734a:	462b      	mov	r3, r5
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	f7f8 ff3e 	bl	80001d0 <__aeabi_dsub>
 8007354:	e00f      	b.n	8007376 <__ieee754_rem_pio2+0x1ce>
 8007356:	462b      	mov	r3, r5
 8007358:	4622      	mov	r2, r4
 800735a:	4630      	mov	r0, r6
 800735c:	4639      	mov	r1, r7
 800735e:	f7f8 ff37 	bl	80001d0 <__aeabi_dsub>
 8007362:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800736c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007370:	f1b8 0f10 	cmp.w	r8, #16
 8007374:	dc02      	bgt.n	800737c <__ieee754_rem_pio2+0x1d4>
 8007376:	e9ca 0100 	strd	r0, r1, [sl]
 800737a:	e039      	b.n	80073f0 <__ieee754_rem_pio2+0x248>
 800737c:	a34e      	add	r3, pc, #312	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x310>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	ec51 0b18 	vmov	r0, r1, d8
 8007386:	f7f9 f8db 	bl	8000540 <__aeabi_dmul>
 800738a:	4604      	mov	r4, r0
 800738c:	460d      	mov	r5, r1
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f8 ff1b 	bl	80001d0 <__aeabi_dsub>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4680      	mov	r8, r0
 80073a0:	4689      	mov	r9, r1
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f8 ff13 	bl	80001d0 <__aeabi_dsub>
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	f7f8 ff0f 	bl	80001d0 <__aeabi_dsub>
 80073b2:	a343      	add	r3, pc, #268	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x318>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	4604      	mov	r4, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	ec51 0b18 	vmov	r0, r1, d8
 80073c0:	f7f9 f8be 	bl	8000540 <__aeabi_dmul>
 80073c4:	4622      	mov	r2, r4
 80073c6:	462b      	mov	r3, r5
 80073c8:	f7f8 ff02 	bl	80001d0 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f8 fefa 	bl	80001d0 <__aeabi_dsub>
 80073dc:	9a03      	ldr	r2, [sp, #12]
 80073de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b31      	cmp	r3, #49	; 0x31
 80073e6:	dc24      	bgt.n	8007432 <__ieee754_rem_pio2+0x28a>
 80073e8:	e9ca 0100 	strd	r0, r1, [sl]
 80073ec:	4646      	mov	r6, r8
 80073ee:	464f      	mov	r7, r9
 80073f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80073f4:	4630      	mov	r0, r6
 80073f6:	4642      	mov	r2, r8
 80073f8:	464b      	mov	r3, r9
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f8 fee8 	bl	80001d0 <__aeabi_dsub>
 8007400:	462b      	mov	r3, r5
 8007402:	4622      	mov	r2, r4
 8007404:	f7f8 fee4 	bl	80001d0 <__aeabi_dsub>
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007410:	f6bf af0a 	bge.w	8007228 <__ieee754_rem_pio2+0x80>
 8007414:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007418:	f8ca 3004 	str.w	r3, [sl, #4]
 800741c:	f8ca 8000 	str.w	r8, [sl]
 8007420:	f8ca 0008 	str.w	r0, [sl, #8]
 8007424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007428:	f8ca 300c 	str.w	r3, [sl, #12]
 800742c:	f1cb 0b00 	rsb	fp, fp, #0
 8007430:	e6fa      	b.n	8007228 <__ieee754_rem_pio2+0x80>
 8007432:	a327      	add	r3, pc, #156	; (adr r3, 80074d0 <__ieee754_rem_pio2+0x328>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	ec51 0b18 	vmov	r0, r1, d8
 800743c:	f7f9 f880 	bl	8000540 <__aeabi_dmul>
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f8 fec0 	bl	80001d0 <__aeabi_dsub>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4606      	mov	r6, r0
 8007456:	460f      	mov	r7, r1
 8007458:	4640      	mov	r0, r8
 800745a:	4649      	mov	r1, r9
 800745c:	f7f8 feb8 	bl	80001d0 <__aeabi_dsub>
 8007460:	4622      	mov	r2, r4
 8007462:	462b      	mov	r3, r5
 8007464:	f7f8 feb4 	bl	80001d0 <__aeabi_dsub>
 8007468:	a31b      	add	r3, pc, #108	; (adr r3, 80074d8 <__ieee754_rem_pio2+0x330>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	ec51 0b18 	vmov	r0, r1, d8
 8007476:	f7f9 f863 	bl	8000540 <__aeabi_dmul>
 800747a:	4622      	mov	r2, r4
 800747c:	462b      	mov	r3, r5
 800747e:	f7f8 fea7 	bl	80001d0 <__aeabi_dsub>
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
 8007486:	e75f      	b.n	8007348 <__ieee754_rem_pio2+0x1a0>
 8007488:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <__ieee754_rem_pio2+0x350>)
 800748a:	4598      	cmp	r8, r3
 800748c:	dd36      	ble.n	80074fc <__ieee754_rem_pio2+0x354>
 800748e:	ee10 2a10 	vmov	r2, s0
 8007492:	462b      	mov	r3, r5
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f8 fe9a 	bl	80001d0 <__aeabi_dsub>
 800749c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074a0:	e9ca 0100 	strd	r0, r1, [sl]
 80074a4:	e694      	b.n	80071d0 <__ieee754_rem_pio2+0x28>
 80074a6:	bf00      	nop
 80074a8:	54400000 	.word	0x54400000
 80074ac:	3ff921fb 	.word	0x3ff921fb
 80074b0:	1a626331 	.word	0x1a626331
 80074b4:	3dd0b461 	.word	0x3dd0b461
 80074b8:	1a600000 	.word	0x1a600000
 80074bc:	3dd0b461 	.word	0x3dd0b461
 80074c0:	2e037073 	.word	0x2e037073
 80074c4:	3ba3198a 	.word	0x3ba3198a
 80074c8:	6dc9c883 	.word	0x6dc9c883
 80074cc:	3fe45f30 	.word	0x3fe45f30
 80074d0:	2e000000 	.word	0x2e000000
 80074d4:	3ba3198a 	.word	0x3ba3198a
 80074d8:	252049c1 	.word	0x252049c1
 80074dc:	397b839a 	.word	0x397b839a
 80074e0:	3fe921fb 	.word	0x3fe921fb
 80074e4:	4002d97b 	.word	0x4002d97b
 80074e8:	3ff921fb 	.word	0x3ff921fb
 80074ec:	413921fb 	.word	0x413921fb
 80074f0:	3fe00000 	.word	0x3fe00000
 80074f4:	080081a8 	.word	0x080081a8
 80074f8:	7fefffff 	.word	0x7fefffff
 80074fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007500:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007504:	ee10 0a10 	vmov	r0, s0
 8007508:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800750c:	ee10 6a10 	vmov	r6, s0
 8007510:	460f      	mov	r7, r1
 8007512:	f7f9 faaf 	bl	8000a74 <__aeabi_d2iz>
 8007516:	f7f8 ffa9 	bl	800046c <__aeabi_i2d>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007526:	f7f8 fe53 	bl	80001d0 <__aeabi_dsub>
 800752a:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <__ieee754_rem_pio2+0x40c>)
 800752c:	2200      	movs	r2, #0
 800752e:	f7f9 f807 	bl	8000540 <__aeabi_dmul>
 8007532:	460f      	mov	r7, r1
 8007534:	4606      	mov	r6, r0
 8007536:	f7f9 fa9d 	bl	8000a74 <__aeabi_d2iz>
 800753a:	f7f8 ff97 	bl	800046c <__aeabi_i2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800754a:	f7f8 fe41 	bl	80001d0 <__aeabi_dsub>
 800754e:	4b19      	ldr	r3, [pc, #100]	; (80075b4 <__ieee754_rem_pio2+0x40c>)
 8007550:	2200      	movs	r2, #0
 8007552:	f7f8 fff5 	bl	8000540 <__aeabi_dmul>
 8007556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800755a:	ad04      	add	r5, sp, #16
 800755c:	f04f 0803 	mov.w	r8, #3
 8007560:	46a9      	mov	r9, r5
 8007562:	2600      	movs	r6, #0
 8007564:	2700      	movs	r7, #0
 8007566:	4632      	mov	r2, r6
 8007568:	463b      	mov	r3, r7
 800756a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800756e:	46c3      	mov	fp, r8
 8007570:	3d08      	subs	r5, #8
 8007572:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007576:	f7f9 fa4b 	bl	8000a10 <__aeabi_dcmpeq>
 800757a:	2800      	cmp	r0, #0
 800757c:	d1f3      	bne.n	8007566 <__ieee754_rem_pio2+0x3be>
 800757e:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <__ieee754_rem_pio2+0x410>)
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2302      	movs	r3, #2
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	4622      	mov	r2, r4
 8007588:	465b      	mov	r3, fp
 800758a:	4651      	mov	r1, sl
 800758c:	4648      	mov	r0, r9
 800758e:	f000 f8df 	bl	8007750 <__kernel_rem_pio2>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	4683      	mov	fp, r0
 8007598:	f6bf ae46 	bge.w	8007228 <__ieee754_rem_pio2+0x80>
 800759c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80075a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80075ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075b0:	e73a      	b.n	8007428 <__ieee754_rem_pio2+0x280>
 80075b2:	bf00      	nop
 80075b4:	41700000 	.word	0x41700000
 80075b8:	08008228 	.word	0x08008228
 80075bc:	00000000 	.word	0x00000000

080075c0 <__kernel_cos>:
 80075c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	ec57 6b10 	vmov	r6, r7, d0
 80075c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80075cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80075d0:	ed8d 1b00 	vstr	d1, [sp]
 80075d4:	da07      	bge.n	80075e6 <__kernel_cos+0x26>
 80075d6:	ee10 0a10 	vmov	r0, s0
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f9 fa4a 	bl	8000a74 <__aeabi_d2iz>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f000 8088 	beq.w	80076f6 <__kernel_cos+0x136>
 80075e6:	4632      	mov	r2, r6
 80075e8:	463b      	mov	r3, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f8 ffa7 	bl	8000540 <__aeabi_dmul>
 80075f2:	4b51      	ldr	r3, [pc, #324]	; (8007738 <__kernel_cos+0x178>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	f7f8 ffa1 	bl	8000540 <__aeabi_dmul>
 80075fe:	a340      	add	r3, pc, #256	; (adr r3, 8007700 <__kernel_cos+0x140>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	4682      	mov	sl, r0
 8007606:	468b      	mov	fp, r1
 8007608:	4620      	mov	r0, r4
 800760a:	4629      	mov	r1, r5
 800760c:	f7f8 ff98 	bl	8000540 <__aeabi_dmul>
 8007610:	a33d      	add	r3, pc, #244	; (adr r3, 8007708 <__kernel_cos+0x148>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fddd 	bl	80001d4 <__adddf3>
 800761a:	4622      	mov	r2, r4
 800761c:	462b      	mov	r3, r5
 800761e:	f7f8 ff8f 	bl	8000540 <__aeabi_dmul>
 8007622:	a33b      	add	r3, pc, #236	; (adr r3, 8007710 <__kernel_cos+0x150>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 fdd2 	bl	80001d0 <__aeabi_dsub>
 800762c:	4622      	mov	r2, r4
 800762e:	462b      	mov	r3, r5
 8007630:	f7f8 ff86 	bl	8000540 <__aeabi_dmul>
 8007634:	a338      	add	r3, pc, #224	; (adr r3, 8007718 <__kernel_cos+0x158>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fdcb 	bl	80001d4 <__adddf3>
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	f7f8 ff7d 	bl	8000540 <__aeabi_dmul>
 8007646:	a336      	add	r3, pc, #216	; (adr r3, 8007720 <__kernel_cos+0x160>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fdc0 	bl	80001d0 <__aeabi_dsub>
 8007650:	4622      	mov	r2, r4
 8007652:	462b      	mov	r3, r5
 8007654:	f7f8 ff74 	bl	8000540 <__aeabi_dmul>
 8007658:	a333      	add	r3, pc, #204	; (adr r3, 8007728 <__kernel_cos+0x168>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fdb9 	bl	80001d4 <__adddf3>
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	f7f8 ff6b 	bl	8000540 <__aeabi_dmul>
 800766a:	4622      	mov	r2, r4
 800766c:	462b      	mov	r3, r5
 800766e:	f7f8 ff67 	bl	8000540 <__aeabi_dmul>
 8007672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007676:	4604      	mov	r4, r0
 8007678:	460d      	mov	r5, r1
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f8 ff5f 	bl	8000540 <__aeabi_dmul>
 8007682:	460b      	mov	r3, r1
 8007684:	4602      	mov	r2, r0
 8007686:	4629      	mov	r1, r5
 8007688:	4620      	mov	r0, r4
 800768a:	f7f8 fda1 	bl	80001d0 <__aeabi_dsub>
 800768e:	4b2b      	ldr	r3, [pc, #172]	; (800773c <__kernel_cos+0x17c>)
 8007690:	4598      	cmp	r8, r3
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	dc10      	bgt.n	80076ba <__kernel_cos+0xfa>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	f7f8 fd96 	bl	80001d0 <__aeabi_dsub>
 80076a4:	460b      	mov	r3, r1
 80076a6:	4926      	ldr	r1, [pc, #152]	; (8007740 <__kernel_cos+0x180>)
 80076a8:	4602      	mov	r2, r0
 80076aa:	2000      	movs	r0, #0
 80076ac:	f7f8 fd90 	bl	80001d0 <__aeabi_dsub>
 80076b0:	ec41 0b10 	vmov	d0, r0, r1
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	4b22      	ldr	r3, [pc, #136]	; (8007744 <__kernel_cos+0x184>)
 80076bc:	4920      	ldr	r1, [pc, #128]	; (8007740 <__kernel_cos+0x180>)
 80076be:	4598      	cmp	r8, r3
 80076c0:	bfcc      	ite	gt
 80076c2:	4d21      	ldrgt	r5, [pc, #132]	; (8007748 <__kernel_cos+0x188>)
 80076c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80076c8:	2400      	movs	r4, #0
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	2000      	movs	r0, #0
 80076d0:	f7f8 fd7e 	bl	80001d0 <__aeabi_dsub>
 80076d4:	4622      	mov	r2, r4
 80076d6:	4680      	mov	r8, r0
 80076d8:	4689      	mov	r9, r1
 80076da:	462b      	mov	r3, r5
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fd76 	bl	80001d0 <__aeabi_dsub>
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	f7f8 fd72 	bl	80001d0 <__aeabi_dsub>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4640      	mov	r0, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	e7da      	b.n	80076ac <__kernel_cos+0xec>
 80076f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007730 <__kernel_cos+0x170>
 80076fa:	e7db      	b.n	80076b4 <__kernel_cos+0xf4>
 80076fc:	f3af 8000 	nop.w
 8007700:	be8838d4 	.word	0xbe8838d4
 8007704:	bda8fae9 	.word	0xbda8fae9
 8007708:	bdb4b1c4 	.word	0xbdb4b1c4
 800770c:	3e21ee9e 	.word	0x3e21ee9e
 8007710:	809c52ad 	.word	0x809c52ad
 8007714:	3e927e4f 	.word	0x3e927e4f
 8007718:	19cb1590 	.word	0x19cb1590
 800771c:	3efa01a0 	.word	0x3efa01a0
 8007720:	16c15177 	.word	0x16c15177
 8007724:	3f56c16c 	.word	0x3f56c16c
 8007728:	5555554c 	.word	0x5555554c
 800772c:	3fa55555 	.word	0x3fa55555
 8007730:	00000000 	.word	0x00000000
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	3fe00000 	.word	0x3fe00000
 800773c:	3fd33332 	.word	0x3fd33332
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	3fe90000 	.word	0x3fe90000
 8007748:	3fd20000 	.word	0x3fd20000
 800774c:	00000000 	.word	0x00000000

08007750 <__kernel_rem_pio2>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	ed2d 8b02 	vpush	{d8}
 8007758:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800775c:	f112 0f14 	cmn.w	r2, #20
 8007760:	9308      	str	r3, [sp, #32]
 8007762:	9101      	str	r1, [sp, #4]
 8007764:	4bc6      	ldr	r3, [pc, #792]	; (8007a80 <__kernel_rem_pio2+0x330>)
 8007766:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007768:	9009      	str	r0, [sp, #36]	; 0x24
 800776a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800776e:	9304      	str	r3, [sp, #16]
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007776:	bfa8      	it	ge
 8007778:	1ed4      	subge	r4, r2, #3
 800777a:	9306      	str	r3, [sp, #24]
 800777c:	bfb2      	itee	lt
 800777e:	2400      	movlt	r4, #0
 8007780:	2318      	movge	r3, #24
 8007782:	fb94 f4f3 	sdivge	r4, r4, r3
 8007786:	f06f 0317 	mvn.w	r3, #23
 800778a:	fb04 3303 	mla	r3, r4, r3, r3
 800778e:	eb03 0a02 	add.w	sl, r3, r2
 8007792:	9b04      	ldr	r3, [sp, #16]
 8007794:	9a06      	ldr	r2, [sp, #24]
 8007796:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007a70 <__kernel_rem_pio2+0x320>
 800779a:	eb03 0802 	add.w	r8, r3, r2
 800779e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077a0:	1aa7      	subs	r7, r4, r2
 80077a2:	ae20      	add	r6, sp, #128	; 0x80
 80077a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077a8:	2500      	movs	r5, #0
 80077aa:	4545      	cmp	r5, r8
 80077ac:	dd18      	ble.n	80077e0 <__kernel_rem_pio2+0x90>
 80077ae:	9b08      	ldr	r3, [sp, #32]
 80077b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80077b4:	aa20      	add	r2, sp, #128	; 0x80
 80077b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007a70 <__kernel_rem_pio2+0x320>
 80077ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80077be:	f1c3 0301 	rsb	r3, r3, #1
 80077c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	4443      	add	r3, r8
 80077ce:	429a      	cmp	r2, r3
 80077d0:	db2f      	blt.n	8007832 <__kernel_rem_pio2+0xe2>
 80077d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80077da:	462f      	mov	r7, r5
 80077dc:	2600      	movs	r6, #0
 80077de:	e01b      	b.n	8007818 <__kernel_rem_pio2+0xc8>
 80077e0:	42ef      	cmn	r7, r5
 80077e2:	d407      	bmi.n	80077f4 <__kernel_rem_pio2+0xa4>
 80077e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80077e8:	f7f8 fe40 	bl	800046c <__aeabi_i2d>
 80077ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7da      	b.n	80077aa <__kernel_rem_pio2+0x5a>
 80077f4:	ec51 0b18 	vmov	r0, r1, d8
 80077f8:	e7f8      	b.n	80077ec <__kernel_rem_pio2+0x9c>
 80077fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007802:	f7f8 fe9d 	bl	8000540 <__aeabi_dmul>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780e:	f7f8 fce1 	bl	80001d4 <__adddf3>
 8007812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007816:	3601      	adds	r6, #1
 8007818:	9b06      	ldr	r3, [sp, #24]
 800781a:	429e      	cmp	r6, r3
 800781c:	f1a7 0708 	sub.w	r7, r7, #8
 8007820:	ddeb      	ble.n	80077fa <__kernel_rem_pio2+0xaa>
 8007822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007826:	3508      	adds	r5, #8
 8007828:	ecab 7b02 	vstmia	fp!, {d7}
 800782c:	f108 0801 	add.w	r8, r8, #1
 8007830:	e7ca      	b.n	80077c8 <__kernel_rem_pio2+0x78>
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	aa0c      	add	r2, sp, #48	; 0x30
 8007836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800783a:	930b      	str	r3, [sp, #44]	; 0x2c
 800783c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800783e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007842:	9c04      	ldr	r4, [sp, #16]
 8007844:	930a      	str	r3, [sp, #40]	; 0x28
 8007846:	ab98      	add	r3, sp, #608	; 0x260
 8007848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800784c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007850:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007854:	f8cd b008 	str.w	fp, [sp, #8]
 8007858:	4625      	mov	r5, r4
 800785a:	2d00      	cmp	r5, #0
 800785c:	dc78      	bgt.n	8007950 <__kernel_rem_pio2+0x200>
 800785e:	ec47 6b10 	vmov	d0, r6, r7
 8007862:	4650      	mov	r0, sl
 8007864:	f000 fbfc 	bl	8008060 <scalbn>
 8007868:	ec57 6b10 	vmov	r6, r7, d0
 800786c:	2200      	movs	r2, #0
 800786e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007872:	ee10 0a10 	vmov	r0, s0
 8007876:	4639      	mov	r1, r7
 8007878:	f7f8 fe62 	bl	8000540 <__aeabi_dmul>
 800787c:	ec41 0b10 	vmov	d0, r0, r1
 8007880:	f000 fb6e 	bl	8007f60 <floor>
 8007884:	4b7f      	ldr	r3, [pc, #508]	; (8007a84 <__kernel_rem_pio2+0x334>)
 8007886:	ec51 0b10 	vmov	r0, r1, d0
 800788a:	2200      	movs	r2, #0
 800788c:	f7f8 fe58 	bl	8000540 <__aeabi_dmul>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	f7f8 fc9a 	bl	80001d0 <__aeabi_dsub>
 800789c:	460f      	mov	r7, r1
 800789e:	4606      	mov	r6, r0
 80078a0:	f7f9 f8e8 	bl	8000a74 <__aeabi_d2iz>
 80078a4:	9007      	str	r0, [sp, #28]
 80078a6:	f7f8 fde1 	bl	800046c <__aeabi_i2d>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f8 fc8d 	bl	80001d0 <__aeabi_dsub>
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	dd70      	ble.n	80079a2 <__kernel_rem_pio2+0x252>
 80078c0:	1e62      	subs	r2, r4, #1
 80078c2:	ab0c      	add	r3, sp, #48	; 0x30
 80078c4:	9d07      	ldr	r5, [sp, #28]
 80078c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80078ca:	f1ca 0118 	rsb	r1, sl, #24
 80078ce:	fa40 f301 	asr.w	r3, r0, r1
 80078d2:	441d      	add	r5, r3
 80078d4:	408b      	lsls	r3, r1
 80078d6:	1ac0      	subs	r0, r0, r3
 80078d8:	ab0c      	add	r3, sp, #48	; 0x30
 80078da:	9507      	str	r5, [sp, #28]
 80078dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80078e0:	f1ca 0317 	rsb	r3, sl, #23
 80078e4:	fa40 f303 	asr.w	r3, r0, r3
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd66      	ble.n	80079be <__kernel_rem_pio2+0x26e>
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	2200      	movs	r2, #0
 80078f4:	3301      	adds	r3, #1
 80078f6:	9307      	str	r3, [sp, #28]
 80078f8:	4615      	mov	r5, r2
 80078fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80078fe:	4294      	cmp	r4, r2
 8007900:	f300 8099 	bgt.w	8007a36 <__kernel_rem_pio2+0x2e6>
 8007904:	f1ba 0f00 	cmp.w	sl, #0
 8007908:	dd07      	ble.n	800791a <__kernel_rem_pio2+0x1ca>
 800790a:	f1ba 0f01 	cmp.w	sl, #1
 800790e:	f000 80a5 	beq.w	8007a5c <__kernel_rem_pio2+0x30c>
 8007912:	f1ba 0f02 	cmp.w	sl, #2
 8007916:	f000 80c1 	beq.w	8007a9c <__kernel_rem_pio2+0x34c>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d14e      	bne.n	80079be <__kernel_rem_pio2+0x26e>
 8007920:	4632      	mov	r2, r6
 8007922:	463b      	mov	r3, r7
 8007924:	4958      	ldr	r1, [pc, #352]	; (8007a88 <__kernel_rem_pio2+0x338>)
 8007926:	2000      	movs	r0, #0
 8007928:	f7f8 fc52 	bl	80001d0 <__aeabi_dsub>
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	2d00      	cmp	r5, #0
 8007932:	d044      	beq.n	80079be <__kernel_rem_pio2+0x26e>
 8007934:	4650      	mov	r0, sl
 8007936:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007a78 <__kernel_rem_pio2+0x328>
 800793a:	f000 fb91 	bl	8008060 <scalbn>
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	ec53 2b10 	vmov	r2, r3, d0
 8007946:	f7f8 fc43 	bl	80001d0 <__aeabi_dsub>
 800794a:	4606      	mov	r6, r0
 800794c:	460f      	mov	r7, r1
 800794e:	e036      	b.n	80079be <__kernel_rem_pio2+0x26e>
 8007950:	4b4e      	ldr	r3, [pc, #312]	; (8007a8c <__kernel_rem_pio2+0x33c>)
 8007952:	2200      	movs	r2, #0
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f8 fdf2 	bl	8000540 <__aeabi_dmul>
 800795c:	f7f9 f88a 	bl	8000a74 <__aeabi_d2iz>
 8007960:	f7f8 fd84 	bl	800046c <__aeabi_i2d>
 8007964:	4b4a      	ldr	r3, [pc, #296]	; (8007a90 <__kernel_rem_pio2+0x340>)
 8007966:	2200      	movs	r2, #0
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	f7f8 fde8 	bl	8000540 <__aeabi_dmul>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f8 fc2a 	bl	80001d0 <__aeabi_dsub>
 800797c:	f7f9 f87a 	bl	8000a74 <__aeabi_d2iz>
 8007980:	9b02      	ldr	r3, [sp, #8]
 8007982:	f843 0b04 	str.w	r0, [r3], #4
 8007986:	3d01      	subs	r5, #1
 8007988:	9302      	str	r3, [sp, #8]
 800798a:	ab70      	add	r3, sp, #448	; 0x1c0
 800798c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f8 fc1c 	bl	80001d4 <__adddf3>
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	e75b      	b.n	800785a <__kernel_rem_pio2+0x10a>
 80079a2:	d105      	bne.n	80079b0 <__kernel_rem_pio2+0x260>
 80079a4:	1e63      	subs	r3, r4, #1
 80079a6:	aa0c      	add	r2, sp, #48	; 0x30
 80079a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80079ac:	15c3      	asrs	r3, r0, #23
 80079ae:	e79b      	b.n	80078e8 <__kernel_rem_pio2+0x198>
 80079b0:	4b38      	ldr	r3, [pc, #224]	; (8007a94 <__kernel_rem_pio2+0x344>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f9 f84a 	bl	8000a4c <__aeabi_dcmpge>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d139      	bne.n	8007a30 <__kernel_rem_pio2+0x2e0>
 80079bc:	9002      	str	r0, [sp, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4630      	mov	r0, r6
 80079c4:	4639      	mov	r1, r7
 80079c6:	f7f9 f823 	bl	8000a10 <__aeabi_dcmpeq>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f000 80b4 	beq.w	8007b38 <__kernel_rem_pio2+0x3e8>
 80079d0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80079d4:	465b      	mov	r3, fp
 80079d6:	2200      	movs	r2, #0
 80079d8:	9904      	ldr	r1, [sp, #16]
 80079da:	428b      	cmp	r3, r1
 80079dc:	da65      	bge.n	8007aaa <__kernel_rem_pio2+0x35a>
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d07b      	beq.n	8007ada <__kernel_rem_pio2+0x38a>
 80079e2:	ab0c      	add	r3, sp, #48	; 0x30
 80079e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80079e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80a0 	beq.w	8007b32 <__kernel_rem_pio2+0x3e2>
 80079f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007a78 <__kernel_rem_pio2+0x328>
 80079f6:	4650      	mov	r0, sl
 80079f8:	f000 fb32 	bl	8008060 <scalbn>
 80079fc:	4f23      	ldr	r7, [pc, #140]	; (8007a8c <__kernel_rem_pio2+0x33c>)
 80079fe:	ec55 4b10 	vmov	r4, r5, d0
 8007a02:	46d8      	mov	r8, fp
 8007a04:	2600      	movs	r6, #0
 8007a06:	f1b8 0f00 	cmp.w	r8, #0
 8007a0a:	f280 80cf 	bge.w	8007bac <__kernel_rem_pio2+0x45c>
 8007a0e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007a70 <__kernel_rem_pio2+0x320>
 8007a12:	465f      	mov	r7, fp
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	f2c0 80fd 	blt.w	8007c18 <__kernel_rem_pio2+0x4c8>
 8007a1e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a20:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007a98 <__kernel_rem_pio2+0x348>
 8007a24:	ec55 4b18 	vmov	r4, r5, d8
 8007a28:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	e0e5      	b.n	8007bfc <__kernel_rem_pio2+0x4ac>
 8007a30:	2302      	movs	r3, #2
 8007a32:	9302      	str	r3, [sp, #8]
 8007a34:	e75c      	b.n	80078f0 <__kernel_rem_pio2+0x1a0>
 8007a36:	f8db 3000 	ldr.w	r3, [fp]
 8007a3a:	b955      	cbnz	r5, 8007a52 <__kernel_rem_pio2+0x302>
 8007a3c:	b123      	cbz	r3, 8007a48 <__kernel_rem_pio2+0x2f8>
 8007a3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a42:	f8cb 3000 	str.w	r3, [fp]
 8007a46:	2301      	movs	r3, #1
 8007a48:	3201      	adds	r2, #1
 8007a4a:	f10b 0b04 	add.w	fp, fp, #4
 8007a4e:	461d      	mov	r5, r3
 8007a50:	e755      	b.n	80078fe <__kernel_rem_pio2+0x1ae>
 8007a52:	1acb      	subs	r3, r1, r3
 8007a54:	f8cb 3000 	str.w	r3, [fp]
 8007a58:	462b      	mov	r3, r5
 8007a5a:	e7f5      	b.n	8007a48 <__kernel_rem_pio2+0x2f8>
 8007a5c:	1e62      	subs	r2, r4, #1
 8007a5e:	ab0c      	add	r3, sp, #48	; 0x30
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a68:	a90c      	add	r1, sp, #48	; 0x30
 8007a6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a6e:	e754      	b.n	800791a <__kernel_rem_pio2+0x1ca>
	...
 8007a7c:	3ff00000 	.word	0x3ff00000
 8007a80:	08008370 	.word	0x08008370
 8007a84:	40200000 	.word	0x40200000
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	3e700000 	.word	0x3e700000
 8007a90:	41700000 	.word	0x41700000
 8007a94:	3fe00000 	.word	0x3fe00000
 8007a98:	08008330 	.word	0x08008330
 8007a9c:	1e62      	subs	r2, r4, #1
 8007a9e:	ab0c      	add	r3, sp, #48	; 0x30
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007aa8:	e7de      	b.n	8007a68 <__kernel_rem_pio2+0x318>
 8007aaa:	a90c      	add	r1, sp, #48	; 0x30
 8007aac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	e790      	b.n	80079d8 <__kernel_rem_pio2+0x288>
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d0fa      	beq.n	8007ab6 <__kernel_rem_pio2+0x366>
 8007ac0:	9a08      	ldr	r2, [sp, #32]
 8007ac2:	18e3      	adds	r3, r4, r3
 8007ac4:	18a6      	adds	r6, r4, r2
 8007ac6:	aa20      	add	r2, sp, #128	; 0x80
 8007ac8:	1c65      	adds	r5, r4, #1
 8007aca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007ace:	9302      	str	r3, [sp, #8]
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	42ab      	cmp	r3, r5
 8007ad4:	da04      	bge.n	8007ae0 <__kernel_rem_pio2+0x390>
 8007ad6:	461c      	mov	r4, r3
 8007ad8:	e6b5      	b.n	8007846 <__kernel_rem_pio2+0xf6>
 8007ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007adc:	2301      	movs	r3, #1
 8007ade:	e7eb      	b.n	8007ab8 <__kernel_rem_pio2+0x368>
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae6:	f7f8 fcc1 	bl	800046c <__aeabi_i2d>
 8007aea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	46b3      	mov	fp, r6
 8007af2:	461c      	mov	r4, r3
 8007af4:	2700      	movs	r7, #0
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	f04f 0900 	mov.w	r9, #0
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	429f      	cmp	r7, r3
 8007b02:	dd06      	ble.n	8007b12 <__kernel_rem_pio2+0x3c2>
 8007b04:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b0a:	e9c3 8900 	strd	r8, r9, [r3]
 8007b0e:	3501      	adds	r5, #1
 8007b10:	e7de      	b.n	8007ad0 <__kernel_rem_pio2+0x380>
 8007b12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b1a:	f7f8 fd11 	bl	8000540 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fb55 	bl	80001d4 <__adddf3>
 8007b2a:	3701      	adds	r7, #1
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4689      	mov	r9, r1
 8007b30:	e7e5      	b.n	8007afe <__kernel_rem_pio2+0x3ae>
 8007b32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b36:	e754      	b.n	80079e2 <__kernel_rem_pio2+0x292>
 8007b38:	ec47 6b10 	vmov	d0, r6, r7
 8007b3c:	f1ca 0000 	rsb	r0, sl, #0
 8007b40:	f000 fa8e 	bl	8008060 <scalbn>
 8007b44:	ec57 6b10 	vmov	r6, r7, d0
 8007b48:	4b9f      	ldr	r3, [pc, #636]	; (8007dc8 <__kernel_rem_pio2+0x678>)
 8007b4a:	ee10 0a10 	vmov	r0, s0
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4639      	mov	r1, r7
 8007b52:	f7f8 ff7b 	bl	8000a4c <__aeabi_dcmpge>
 8007b56:	b300      	cbz	r0, 8007b9a <__kernel_rem_pio2+0x44a>
 8007b58:	4b9c      	ldr	r3, [pc, #624]	; (8007dcc <__kernel_rem_pio2+0x67c>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fcee 	bl	8000540 <__aeabi_dmul>
 8007b64:	f7f8 ff86 	bl	8000a74 <__aeabi_d2iz>
 8007b68:	4605      	mov	r5, r0
 8007b6a:	f7f8 fc7f 	bl	800046c <__aeabi_i2d>
 8007b6e:	4b96      	ldr	r3, [pc, #600]	; (8007dc8 <__kernel_rem_pio2+0x678>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f8 fce5 	bl	8000540 <__aeabi_dmul>
 8007b76:	460b      	mov	r3, r1
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7f8 fb27 	bl	80001d0 <__aeabi_dsub>
 8007b82:	f7f8 ff77 	bl	8000a74 <__aeabi_d2iz>
 8007b86:	f104 0b01 	add.w	fp, r4, #1
 8007b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b8c:	f10a 0a18 	add.w	sl, sl, #24
 8007b90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b94:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007b98:	e72b      	b.n	80079f2 <__kernel_rem_pio2+0x2a2>
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 ff69 	bl	8000a74 <__aeabi_d2iz>
 8007ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ba4:	46a3      	mov	fp, r4
 8007ba6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007baa:	e722      	b.n	80079f2 <__kernel_rem_pio2+0x2a2>
 8007bac:	ab70      	add	r3, sp, #448	; 0x1c0
 8007bae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007bb2:	ab0c      	add	r3, sp, #48	; 0x30
 8007bb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007bb8:	f7f8 fc58 	bl	800046c <__aeabi_i2d>
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	f7f8 fcbe 	bl	8000540 <__aeabi_dmul>
 8007bc4:	4632      	mov	r2, r6
 8007bc6:	e9c9 0100 	strd	r0, r1, [r9]
 8007bca:	463b      	mov	r3, r7
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 fcb6 	bl	8000540 <__aeabi_dmul>
 8007bd4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	e713      	b.n	8007a06 <__kernel_rem_pio2+0x2b6>
 8007bde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007be2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007be6:	f7f8 fcab 	bl	8000540 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 faef 	bl	80001d4 <__adddf3>
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	9b04      	ldr	r3, [sp, #16]
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	dc01      	bgt.n	8007c06 <__kernel_rem_pio2+0x4b6>
 8007c02:	45b0      	cmp	r8, r6
 8007c04:	daeb      	bge.n	8007bde <__kernel_rem_pio2+0x48e>
 8007c06:	ab48      	add	r3, sp, #288	; 0x120
 8007c08:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c0c:	e9c3 4500 	strd	r4, r5, [r3]
 8007c10:	3f01      	subs	r7, #1
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	e6ff      	b.n	8007a18 <__kernel_rem_pio2+0x2c8>
 8007c18:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	dc0b      	bgt.n	8007c36 <__kernel_rem_pio2+0x4e6>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dc6e      	bgt.n	8007d00 <__kernel_rem_pio2+0x5b0>
 8007c22:	d045      	beq.n	8007cb0 <__kernel_rem_pio2+0x560>
 8007c24:	9b07      	ldr	r3, [sp, #28]
 8007c26:	f003 0007 	and.w	r0, r3, #7
 8007c2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c2e:	ecbd 8b02 	vpop	{d8}
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d1f3      	bne.n	8007c24 <__kernel_rem_pio2+0x4d4>
 8007c3c:	ab48      	add	r3, sp, #288	; 0x120
 8007c3e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007c42:	46d0      	mov	r8, sl
 8007c44:	46d9      	mov	r9, fp
 8007c46:	f1b9 0f00 	cmp.w	r9, #0
 8007c4a:	f1a8 0808 	sub.w	r8, r8, #8
 8007c4e:	dc64      	bgt.n	8007d1a <__kernel_rem_pio2+0x5ca>
 8007c50:	465c      	mov	r4, fp
 8007c52:	2c01      	cmp	r4, #1
 8007c54:	f1aa 0a08 	sub.w	sl, sl, #8
 8007c58:	dc7e      	bgt.n	8007d58 <__kernel_rem_pio2+0x608>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f1bb 0f01 	cmp.w	fp, #1
 8007c62:	f300 8097 	bgt.w	8007d94 <__kernel_rem_pio2+0x644>
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007c6c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 8099 	bne.w	8007da8 <__kernel_rem_pio2+0x658>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	e9c3 5600 	strd	r5, r6, [r3]
 8007c7c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007c80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c84:	e7ce      	b.n	8007c24 <__kernel_rem_pio2+0x4d4>
 8007c86:	ab48      	add	r3, sp, #288	; 0x120
 8007c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f7f8 faa0 	bl	80001d4 <__adddf3>
 8007c94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c98:	f1bb 0f00 	cmp.w	fp, #0
 8007c9c:	daf3      	bge.n	8007c86 <__kernel_rem_pio2+0x536>
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	b113      	cbz	r3, 8007ca8 <__kernel_rem_pio2+0x558>
 8007ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	e9c3 0100 	strd	r0, r1, [r3]
 8007cae:	e7b9      	b.n	8007c24 <__kernel_rem_pio2+0x4d4>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	e7f0      	b.n	8007c98 <__kernel_rem_pio2+0x548>
 8007cb6:	ab48      	add	r3, sp, #288	; 0x120
 8007cb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fa88 	bl	80001d4 <__adddf3>
 8007cc4:	3c01      	subs	r4, #1
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	daf5      	bge.n	8007cb6 <__kernel_rem_pio2+0x566>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	b1e3      	cbz	r3, 8007d08 <__kernel_rem_pio2+0x5b8>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd4:	9c01      	ldr	r4, [sp, #4]
 8007cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007ce2:	f7f8 fa75 	bl	80001d0 <__aeabi_dsub>
 8007ce6:	ad4a      	add	r5, sp, #296	; 0x128
 8007ce8:	2401      	movs	r4, #1
 8007cea:	45a3      	cmp	fp, r4
 8007cec:	da0f      	bge.n	8007d0e <__kernel_rem_pio2+0x5be>
 8007cee:	9b02      	ldr	r3, [sp, #8]
 8007cf0:	b113      	cbz	r3, 8007cf8 <__kernel_rem_pio2+0x5a8>
 8007cf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007cfe:	e791      	b.n	8007c24 <__kernel_rem_pio2+0x4d4>
 8007d00:	465c      	mov	r4, fp
 8007d02:	2000      	movs	r0, #0
 8007d04:	2100      	movs	r1, #0
 8007d06:	e7de      	b.n	8007cc6 <__kernel_rem_pio2+0x576>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e7e2      	b.n	8007cd4 <__kernel_rem_pio2+0x584>
 8007d0e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007d12:	f7f8 fa5f 	bl	80001d4 <__adddf3>
 8007d16:	3401      	adds	r4, #1
 8007d18:	e7e7      	b.n	8007cea <__kernel_rem_pio2+0x59a>
 8007d1a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007d1e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007d22:	4620      	mov	r0, r4
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fa53 	bl	80001d4 <__adddf3>
 8007d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fa49 	bl	80001d0 <__aeabi_dsub>
 8007d3e:	4632      	mov	r2, r6
 8007d40:	463b      	mov	r3, r7
 8007d42:	f7f8 fa47 	bl	80001d4 <__adddf3>
 8007d46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d4a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007d4e:	ed88 7b00 	vstr	d7, [r8]
 8007d52:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007d56:	e776      	b.n	8007c46 <__kernel_rem_pio2+0x4f6>
 8007d58:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d5c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d60:	4640      	mov	r0, r8
 8007d62:	4632      	mov	r2, r6
 8007d64:	463b      	mov	r3, r7
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fa34 	bl	80001d4 <__adddf3>
 8007d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 fa2a 	bl	80001d0 <__aeabi_dsub>
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	f7f8 fa28 	bl	80001d4 <__adddf3>
 8007d84:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d8c:	ed8a 7b00 	vstr	d7, [sl]
 8007d90:	3c01      	subs	r4, #1
 8007d92:	e75e      	b.n	8007c52 <__kernel_rem_pio2+0x502>
 8007d94:	ab48      	add	r3, sp, #288	; 0x120
 8007d96:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fa19 	bl	80001d4 <__adddf3>
 8007da2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007da6:	e75a      	b.n	8007c5e <__kernel_rem_pio2+0x50e>
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	601d      	str	r5, [r3, #0]
 8007dae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007db2:	605c      	str	r4, [r3, #4]
 8007db4:	609f      	str	r7, [r3, #8]
 8007db6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007dba:	60d3      	str	r3, [r2, #12]
 8007dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dc0:	6110      	str	r0, [r2, #16]
 8007dc2:	6153      	str	r3, [r2, #20]
 8007dc4:	e72e      	b.n	8007c24 <__kernel_rem_pio2+0x4d4>
 8007dc6:	bf00      	nop
 8007dc8:	41700000 	.word	0x41700000
 8007dcc:	3e700000 	.word	0x3e700000

08007dd0 <__kernel_sin>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	ed2d 8b04 	vpush	{d8-d9}
 8007dd8:	eeb0 8a41 	vmov.f32	s16, s2
 8007ddc:	eef0 8a61 	vmov.f32	s17, s3
 8007de0:	ec55 4b10 	vmov	r4, r5, d0
 8007de4:	b083      	sub	sp, #12
 8007de6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007dea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007dee:	9001      	str	r0, [sp, #4]
 8007df0:	da06      	bge.n	8007e00 <__kernel_sin+0x30>
 8007df2:	ee10 0a10 	vmov	r0, s0
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fe3c 	bl	8000a74 <__aeabi_d2iz>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d051      	beq.n	8007ea4 <__kernel_sin+0xd4>
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7f8 fb9a 	bl	8000540 <__aeabi_dmul>
 8007e0c:	4682      	mov	sl, r0
 8007e0e:	468b      	mov	fp, r1
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4620      	mov	r0, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f8 fb92 	bl	8000540 <__aeabi_dmul>
 8007e1c:	a341      	add	r3, pc, #260	; (adr r3, 8007f24 <__kernel_sin+0x154>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	4650      	mov	r0, sl
 8007e28:	4659      	mov	r1, fp
 8007e2a:	f7f8 fb89 	bl	8000540 <__aeabi_dmul>
 8007e2e:	a33f      	add	r3, pc, #252	; (adr r3, 8007f2c <__kernel_sin+0x15c>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 f9cc 	bl	80001d0 <__aeabi_dsub>
 8007e38:	4652      	mov	r2, sl
 8007e3a:	465b      	mov	r3, fp
 8007e3c:	f7f8 fb80 	bl	8000540 <__aeabi_dmul>
 8007e40:	a33c      	add	r3, pc, #240	; (adr r3, 8007f34 <__kernel_sin+0x164>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 f9c5 	bl	80001d4 <__adddf3>
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	f7f8 fb77 	bl	8000540 <__aeabi_dmul>
 8007e52:	a33a      	add	r3, pc, #232	; (adr r3, 8007f3c <__kernel_sin+0x16c>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 f9ba 	bl	80001d0 <__aeabi_dsub>
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	f7f8 fb6e 	bl	8000540 <__aeabi_dmul>
 8007e64:	a337      	add	r3, pc, #220	; (adr r3, 8007f44 <__kernel_sin+0x174>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 f9b3 	bl	80001d4 <__adddf3>
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	4606      	mov	r6, r0
 8007e72:	460f      	mov	r7, r1
 8007e74:	b9eb      	cbnz	r3, 8007eb2 <__kernel_sin+0xe2>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	f7f8 fb5f 	bl	8000540 <__aeabi_dmul>
 8007e82:	a325      	add	r3, pc, #148	; (adr r3, 8007f18 <__kernel_sin+0x148>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 f9a2 	bl	80001d0 <__aeabi_dsub>
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f7f8 fb56 	bl	8000540 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 f99a 	bl	80001d4 <__adddf3>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	ec45 4b10 	vmov	d0, r4, r5
 8007ea8:	b003      	add	sp, #12
 8007eaa:	ecbd 8b04 	vpop	{d8-d9}
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <__kernel_sin+0x150>)
 8007eb4:	ec51 0b18 	vmov	r0, r1, d8
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f7f8 fb41 	bl	8000540 <__aeabi_dmul>
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	ec41 0b19 	vmov	d9, r0, r1
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 fb39 	bl	8000540 <__aeabi_dmul>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	ec51 0b19 	vmov	r0, r1, d9
 8007ed6:	f7f8 f97b 	bl	80001d0 <__aeabi_dsub>
 8007eda:	4652      	mov	r2, sl
 8007edc:	465b      	mov	r3, fp
 8007ede:	f7f8 fb2f 	bl	8000540 <__aeabi_dmul>
 8007ee2:	ec53 2b18 	vmov	r2, r3, d8
 8007ee6:	f7f8 f973 	bl	80001d0 <__aeabi_dsub>
 8007eea:	a30b      	add	r3, pc, #44	; (adr r3, 8007f18 <__kernel_sin+0x148>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	f7f8 fb22 	bl	8000540 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 f966 	bl	80001d4 <__adddf3>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7f8 f95e 	bl	80001d0 <__aeabi_dsub>
 8007f14:	e7c4      	b.n	8007ea0 <__kernel_sin+0xd0>
 8007f16:	bf00      	nop
 8007f18:	55555549 	.word	0x55555549
 8007f1c:	3fc55555 	.word	0x3fc55555
 8007f20:	3fe00000 	.word	0x3fe00000
 8007f24:	5acfd57c 	.word	0x5acfd57c
 8007f28:	3de5d93a 	.word	0x3de5d93a
 8007f2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f30:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f34:	57b1fe7d 	.word	0x57b1fe7d
 8007f38:	3ec71de3 	.word	0x3ec71de3
 8007f3c:	19c161d5 	.word	0x19c161d5
 8007f40:	3f2a01a0 	.word	0x3f2a01a0
 8007f44:	1110f8a6 	.word	0x1110f8a6
 8007f48:	3f811111 	.word	0x3f811111

08007f4c <fabs>:
 8007f4c:	ec51 0b10 	vmov	r0, r1, d0
 8007f50:	ee10 2a10 	vmov	r2, s0
 8007f54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f58:	ec43 2b10 	vmov	d0, r2, r3
 8007f5c:	4770      	bx	lr
	...

08007f60 <floor>:
 8007f60:	ec51 0b10 	vmov	r0, r1, d0
 8007f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007f6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f70:	2e13      	cmp	r6, #19
 8007f72:	ee10 5a10 	vmov	r5, s0
 8007f76:	ee10 8a10 	vmov	r8, s0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	dc32      	bgt.n	8007fe4 <floor+0x84>
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	da14      	bge.n	8007fac <floor+0x4c>
 8007f82:	a333      	add	r3, pc, #204	; (adr r3, 8008050 <floor+0xf0>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 f924 	bl	80001d4 <__adddf3>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f7f8 fd66 	bl	8000a60 <__aeabi_dcmpgt>
 8007f94:	b138      	cbz	r0, 8007fa6 <floor+0x46>
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	da57      	bge.n	800804a <floor+0xea>
 8007f9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f9e:	431d      	orrs	r5, r3
 8007fa0:	d001      	beq.n	8007fa6 <floor+0x46>
 8007fa2:	4c2d      	ldr	r4, [pc, #180]	; (8008058 <floor+0xf8>)
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	e025      	b.n	8007ff8 <floor+0x98>
 8007fac:	4f2b      	ldr	r7, [pc, #172]	; (800805c <floor+0xfc>)
 8007fae:	4137      	asrs	r7, r6
 8007fb0:	ea01 0307 	and.w	r3, r1, r7
 8007fb4:	4303      	orrs	r3, r0
 8007fb6:	d01f      	beq.n	8007ff8 <floor+0x98>
 8007fb8:	a325      	add	r3, pc, #148	; (adr r3, 8008050 <floor+0xf0>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f909 	bl	80001d4 <__adddf3>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f7f8 fd4b 	bl	8000a60 <__aeabi_dcmpgt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d0eb      	beq.n	8007fa6 <floor+0x46>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	bfbe      	ittt	lt
 8007fd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007fd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8007fda:	19a4      	addlt	r4, r4, r6
 8007fdc:	ea24 0407 	bic.w	r4, r4, r7
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	e7e0      	b.n	8007fa6 <floor+0x46>
 8007fe4:	2e33      	cmp	r6, #51	; 0x33
 8007fe6:	dd0b      	ble.n	8008000 <floor+0xa0>
 8007fe8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007fec:	d104      	bne.n	8007ff8 <floor+0x98>
 8007fee:	ee10 2a10 	vmov	r2, s0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	f7f8 f8ee 	bl	80001d4 <__adddf3>
 8007ff8:	ec41 0b10 	vmov	d0, r0, r1
 8007ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008000:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008008:	fa23 f707 	lsr.w	r7, r3, r7
 800800c:	4207      	tst	r7, r0
 800800e:	d0f3      	beq.n	8007ff8 <floor+0x98>
 8008010:	a30f      	add	r3, pc, #60	; (adr r3, 8008050 <floor+0xf0>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 f8dd 	bl	80001d4 <__adddf3>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	f7f8 fd1f 	bl	8000a60 <__aeabi_dcmpgt>
 8008022:	2800      	cmp	r0, #0
 8008024:	d0bf      	beq.n	8007fa6 <floor+0x46>
 8008026:	2c00      	cmp	r4, #0
 8008028:	da02      	bge.n	8008030 <floor+0xd0>
 800802a:	2e14      	cmp	r6, #20
 800802c:	d103      	bne.n	8008036 <floor+0xd6>
 800802e:	3401      	adds	r4, #1
 8008030:	ea25 0507 	bic.w	r5, r5, r7
 8008034:	e7b7      	b.n	8007fa6 <floor+0x46>
 8008036:	2301      	movs	r3, #1
 8008038:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800803c:	fa03 f606 	lsl.w	r6, r3, r6
 8008040:	4435      	add	r5, r6
 8008042:	4545      	cmp	r5, r8
 8008044:	bf38      	it	cc
 8008046:	18e4      	addcc	r4, r4, r3
 8008048:	e7f2      	b.n	8008030 <floor+0xd0>
 800804a:	2500      	movs	r5, #0
 800804c:	462c      	mov	r4, r5
 800804e:	e7aa      	b.n	8007fa6 <floor+0x46>
 8008050:	8800759c 	.word	0x8800759c
 8008054:	7e37e43c 	.word	0x7e37e43c
 8008058:	bff00000 	.word	0xbff00000
 800805c:	000fffff 	.word	0x000fffff

08008060 <scalbn>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	ec55 4b10 	vmov	r4, r5, d0
 8008066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800806a:	4606      	mov	r6, r0
 800806c:	462b      	mov	r3, r5
 800806e:	b99a      	cbnz	r2, 8008098 <scalbn+0x38>
 8008070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008074:	4323      	orrs	r3, r4
 8008076:	d036      	beq.n	80080e6 <scalbn+0x86>
 8008078:	4b39      	ldr	r3, [pc, #228]	; (8008160 <scalbn+0x100>)
 800807a:	4629      	mov	r1, r5
 800807c:	ee10 0a10 	vmov	r0, s0
 8008080:	2200      	movs	r2, #0
 8008082:	f7f8 fa5d 	bl	8000540 <__aeabi_dmul>
 8008086:	4b37      	ldr	r3, [pc, #220]	; (8008164 <scalbn+0x104>)
 8008088:	429e      	cmp	r6, r3
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	da10      	bge.n	80080b2 <scalbn+0x52>
 8008090:	a32b      	add	r3, pc, #172	; (adr r3, 8008140 <scalbn+0xe0>)
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	e03a      	b.n	800810e <scalbn+0xae>
 8008098:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800809c:	428a      	cmp	r2, r1
 800809e:	d10c      	bne.n	80080ba <scalbn+0x5a>
 80080a0:	ee10 2a10 	vmov	r2, s0
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 f894 	bl	80001d4 <__adddf3>
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	e019      	b.n	80080e6 <scalbn+0x86>
 80080b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80080b6:	460b      	mov	r3, r1
 80080b8:	3a36      	subs	r2, #54	; 0x36
 80080ba:	4432      	add	r2, r6
 80080bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80080c0:	428a      	cmp	r2, r1
 80080c2:	dd08      	ble.n	80080d6 <scalbn+0x76>
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	a120      	add	r1, pc, #128	; (adr r1, 8008148 <scalbn+0xe8>)
 80080c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080cc:	da1c      	bge.n	8008108 <scalbn+0xa8>
 80080ce:	a120      	add	r1, pc, #128	; (adr r1, 8008150 <scalbn+0xf0>)
 80080d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d4:	e018      	b.n	8008108 <scalbn+0xa8>
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	dd08      	ble.n	80080ec <scalbn+0x8c>
 80080da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080e6:	ec45 4b10 	vmov	d0, r4, r5
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080f0:	da19      	bge.n	8008126 <scalbn+0xc6>
 80080f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080f6:	429e      	cmp	r6, r3
 80080f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80080fc:	dd0a      	ble.n	8008114 <scalbn+0xb4>
 80080fe:	a112      	add	r1, pc, #72	; (adr r1, 8008148 <scalbn+0xe8>)
 8008100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e2      	bne.n	80080ce <scalbn+0x6e>
 8008108:	a30f      	add	r3, pc, #60	; (adr r3, 8008148 <scalbn+0xe8>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 fa17 	bl	8000540 <__aeabi_dmul>
 8008112:	e7cb      	b.n	80080ac <scalbn+0x4c>
 8008114:	a10a      	add	r1, pc, #40	; (adr r1, 8008140 <scalbn+0xe0>)
 8008116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0b8      	beq.n	8008090 <scalbn+0x30>
 800811e:	a10e      	add	r1, pc, #56	; (adr r1, 8008158 <scalbn+0xf8>)
 8008120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008124:	e7b4      	b.n	8008090 <scalbn+0x30>
 8008126:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800812a:	3236      	adds	r2, #54	; 0x36
 800812c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008130:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008134:	4620      	mov	r0, r4
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <scalbn+0x108>)
 8008138:	2200      	movs	r2, #0
 800813a:	e7e8      	b.n	800810e <scalbn+0xae>
 800813c:	f3af 8000 	nop.w
 8008140:	c2f8f359 	.word	0xc2f8f359
 8008144:	01a56e1f 	.word	0x01a56e1f
 8008148:	8800759c 	.word	0x8800759c
 800814c:	7e37e43c 	.word	0x7e37e43c
 8008150:	8800759c 	.word	0x8800759c
 8008154:	fe37e43c 	.word	0xfe37e43c
 8008158:	c2f8f359 	.word	0xc2f8f359
 800815c:	81a56e1f 	.word	0x81a56e1f
 8008160:	43500000 	.word	0x43500000
 8008164:	ffff3cb0 	.word	0xffff3cb0
 8008168:	3c900000 	.word	0x3c900000

0800816c <_init>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr

08008178 <_fini>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr
